<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开启研究生面试的记录（2-3）</title>
      <link href="/post/e9707aa3.html"/>
      <url>/post/e9707aa3.html</url>
      
        <content type="html"><![CDATA[<h2 id="grid-布局"><a href="#grid-布局" class="headerlink" title="grid 布局"></a>grid 布局</h2><p>grid 布局与 flex 布局相同之处在于：都有分别针对于父元素与子元素的一些属性。<br>grid 布局与 flex 布局不同之处在于：flex 布局是轴线布局，只能指定“子元素”针对轴线的位置，可以看作是一维布局，grid 布局则是将容器划分成“行”和“列”，产生单元格，然后指定“子元素所在”的单元格，可以看作是二维布局。</p><h3 id="常见父元素属性"><a href="#常见父元素属性" class="headerlink" title="常见父元素属性"></a>常见父元素属性</h3><blockquote><p>常见的父元素属性主要有 7 种：</p><ul><li>grid-template-系列：包含 grid-template-columns（设置列数）以及 grid-template-rows（设置行数）</li><li>gap： 设置行或列之间间距</li><li>grid-template-areas： 设置单元格区域，区域由单元格组成</li><li>grid-auto-flow：设置子元素的排放顺序，默认是“先行后列”</li><li>justify-items 与 align-items：设置单元格内容的对齐方向</li><li>justify-content 与 align-content：设置整个内容区域的对齐方向</li><li>grid-auto-columns 与 grid-auto-rows 系列：用于设置多出来的子元素的宽或高</li></ul></blockquote><p>创建两个 50px 高的行和两个 200px 宽的列<br><code>grid-template: 50px 50px / 200px 200px</code></p><ul><li>如果设置的每行（每列）的高度（宽度）相同的话，如上述 <code>grid-template-columns：100px 100px 100px</code>，就可以使用 repeat 函数，用法为：<code>grid-template-columns：repeat(3, 100px)</code></li></ul><p><code>repeat(number, px)</code>: 其中第一个参数表示重复次数，第二个参数表示所要重复的数值；</p><ul><li><p>若单元格的大小是固定的，但是父元素的大小不确定，此时可用 auto-fill 自动填充父元素</p></li><li><p>repeat(auto-fill, 100px) 表示 100px 自动填充，直至父元素填满；</p></li><li><p>如未指定父元素的宽度，则不断拖动浏览器宽度时，每行排列的列数是不断变化的，排不满就挤到下一行；</p></li><li><p>若设置每一部分占父元素的比例为多少，可通过单位 fr 实现。fr 是 fraction（片段）的意思</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 分成3份，每个占一份</span><br><span class="line">grid-template-columns: repeat(3, 1fr);</span><br><span class="line">// 也可写成</span><br><span class="line">grid-template-columns: 1fr 1fr 1fr;</span><br><span class="line">// 分成3份 第一部分占一份 第二部分占2份 第三部分占三份</span><br><span class="line">grid-template-column: 1fr 2fr 3fr</span><br></pre></td></tr></table></figure><ul><li>若限制子元素最大值与最小值，可使用 minmax 设置<br><code>minmax: &lt;最小值&gt; &lt;最大值&gt;</code><br><code>grid-template-column: 100px minmax(100px, 200px) 100px</code></li><li>设置了 minmax 值后，在拖动浏览器放大时，最大不能超过 200px，缩小时，最小不能少于 100px，即不能再放大缩小；</li></ul><h3 id="网格线"><a href="#网格线" class="headerlink" title="网格线"></a>网格线</h3><pre><code>网格线在页面上看不出来，但是在设置完行和列之后，自动会有网格线生成；若有3行，则会有4个网格线，有4列，则有5条网格线</code></pre><p>网格线也可以命名，用方括号表示，如下 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 行方向定义了两行，有三条网格线，分别命名r1 r2 r3</span><br><span class="line">grid-template-rows: [r1] 100px [r2] 100px [r3];</span><br><span class="line">// 列方向定义了三列，有四条网格线，分别命名为c1 c2 c3 c4</span><br><span class="line">grid-template-columns: [c1] 100px [c2] 100px [c3] 200px [c4]</span><br></pre></td></tr></table></figure><h3 id="gap-系列"><a href="#gap-系列" class="headerlink" title="gap 系列"></a>gap 系列</h3><p>gap 是指行之间或列之间的间距；gap 是 column-gap（列间距）和 row-gap（行间距）的合并形式。若行距和列距相同，可将 gap 简写为 gap： 10px<br><code>gap : &lt;row-gap&gt; &lt;column-gap&gt;</code></p><p><strong>注意</strong>：以前标准是 grid-column-gap 和 grid-row-gap 和 grid-gap，现在都将 grid 前缀给去掉了～</p><h3 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h3><p>areas 指区域，是由单个或多个单元格组成（数量由子元素属性自定义）<br><code>grid-template-areas: &#39;a b c&#39; &#39;d e f&#39; &#39;g h i&#39;;</code><br>上述代码表示第一行为三个区域 区域名分别为 a b c 第二行和第三行也分别划分了各自的三个区域；行之间用空格表示；</p><p>当然，单元格也可以是同一个区域，如：<br><code>grid-template-areas: &#39;a a a&#39; &#39;d e f&#39; &#39;b b b&#39;;</code><br>第一行全部为 a 区域，第三行全部为 b 区域；（相同命名的单元格属于一个区域）</p><p>若不想给某个单元格命名，可用点.表示<br><code>grid-template-areas: &#39;a . a&#39; &#39;d . f&#39; &#39;b b b&#39;;</code></p><p>如第一行和第二行的第二列单元格并不想命名，就可以用.表示。为书写美观，可写成如下：<br><code>grid-template-areas: &#39;a a a&#39;                       &#39;d e f&#39;                       &#39;b b b&#39;;</code></p><p><em>区域的命名和网格线的命名会影响到网格线，每个区域的起始网格线会自动命名为区域名-start，终止网格线自动命名为区域名-end ～</em></p><h3 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h3><p>父元素设为 grid 布局之后，对应的子元素会按照顺序，自动放置在每一个网格，默认的放置位置是“先行后列”，即先填满第一行，再开始放入第二行；参数有两个： row 和 column</p><h3 id="justify-items-与-align-items"><a href="#justify-items-与-align-items" class="headerlink" title="justify-items 与 align-items"></a>justify-items 与 align-items</h3><p>用于设置单元格内容的水平和垂直的对齐方式；其中 justify-items 用于设置水平对齐方式，align-items 用于表示垂直对齐方式；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">justify-items： start ｜ end ｜ center ｜ stretch（默认start）</span><br><span class="line">align-items： start ｜ end ｜ center ｜ stretch（默认start）</span><br></pre></td></tr></table></figure><p><em>place-items 属性是 align-items 属性和 justify-items 属性的合并形式：</em><br><code>place-items: &lt;align-items&gt; &lt;justify-items&gt;;</code></p><h3 id="justify-content-与-align-content"><a href="#justify-content-与-align-content" class="headerlink" title="justify-content 与 align-content"></a>justify-content 与 align-content</h3><p>用于设置<em>整个内容区域</em>的对齐方式，其中 justify-content 用于设置整个内容区域的水平方向，align-content 用于设置整个内容区域的垂直方向；各参数含义与 flex 布局一样；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">justify-content： start ｜ end ｜ center ｜ stretch ｜ space-around ｜ space-between ｜ space-evenly（默认是start）</span><br><span class="line">`align-content： start ｜ end ｜ center ｜ stretch ｜ space-around ｜ space-between ｜ space-evenly（默认是start）</span><br></pre></td></tr></table></figure><h3 id="grid-auto-rows-与-grid-auto-columns"><a href="#grid-auto-rows-与-grid-auto-columns" class="headerlink" title="grid-auto-rows 与 grid-auto-columns"></a>grid-auto-rows 与 grid-auto-columns</h3><p>用于设置多出来的宽或高，包含 grid-auto-rows（用于设置高）和 grid-auto-columns（用于设置宽）；在排列方式为先行后列时，可以用 grid-auto-rows 限制多出来子元素的高，在排列方式为先列后行时，可以用 grid-auto-columns 限制多出来子元素的宽；</p><h3 id="常见子元素属性"><a href="#常见子元素属性" class="headerlink" title="常见子元素属性"></a>常见子元素属性</h3><blockquote><p>常见子元素属性有如下 3 种：</p><ul><li>grid-column-系列与 grid-row-系列</li><li>grid-area</li><li>justify-self 与 align-self</li></ul></blockquote><h3 id="grid-column-系列与-grid-row-系列"><a href="#grid-column-系列与-grid-row-系列" class="headerlink" title="grid-column-系列与 grid-row-系列"></a>grid-column-系列与 grid-row-系列</h3><p>grid-column-start 和 grid-column-end 用于指定子元素的开始&#x2F;结束于哪条列网格线，确定子元素的具体位置；</p><blockquote><p>也可以用 span 表示跨越几行或几列：</p><ul><li>grid-row-start：span 2 表示从子元素起始行网格线跨越两条网格线距离；</li><li>grid-row-end：span 2 也表示从子元素起始行网格线跨越两条网格线距离；</li><li>grid-column-start:：span 2 表示从子元素起始列网格线跨越两条网格线距离；</li><li>grid-column-end：span 2 也表示从子元素起始列网格线跨越两条网格线距离；</li></ul></blockquote><blockquote><p>上述亦可简写为：</p><ul><li>grid-column: 1 &#x2F; 3 表示从第一条列网格线开始到第三条列网格线</li></ul></blockquote><blockquote><ul><li>grid-row: 2 &#x2F; 3 表示从第二条行网格线开始到第三条行网格线</li></ul></blockquote><h3 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h3><p>用于指定子元素放置在哪个区域内（还记得区域是什么嘛，不记得往上翻翻哦，区域是在父元素中定义好的～）</p><p>如我们定义父元素区域划分为：<br><code>grid-template-areas: &#39;a a a&#39;                      &#39;b c d&#39;;</code></p><p>将某个子元素定义为 a 区域：<br><code>grid-area: a</code></p><p>grid-area 还可以用作 grid-row-start&#x2F;grid-column-start&#x2F;grid-row-end&#x2F;grid-column-end 的合并形式，用于直接指定子元素的具体位置：<br><code>grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;</code></p><h3 id="justify-self-与-column-self-系列"><a href="#justify-self-与-column-self-系列" class="headerlink" title="justify-self 与 column-self 系列"></a>justify-self 与 column-self 系列</h3><p>用于设置单个子元素的单元格内容的位置， justify-self 用于设置单元格内容的水平方向，align-self 用于设置单元格内容的垂直方向；与上面所述 justify-items 和 align-items 属性用法完全一致，参数也一样；</p><p>place-self 属性是 justify-self 和 align-self 的合并形式：<br><code>place-self: &lt;align-self&gt; &lt;justify-self&gt; </code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（2-2）</title>
      <link href="/post/51cc1dc6.html"/>
      <url>/post/51cc1dc6.html</url>
      
        <content type="html"><![CDATA[<h2 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>flex 布局是一种布局模型，经常被称之为 flexbox，使用 flex 布局之后，他会给子元素提供强大空间分配和对齐能力。flex 的优点就是避免不灵活的布局形式，创建更多种布局模式供你选择，解决了子元素的对齐和分布与 响应式等问题。缺点是只能依靠自身的布局模式，稍有变化则无法改变。</p><p>CSS 中提供了以下属性来实现 Flex 布局：</p><table><thead><tr><th align="center">选择器</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">display</td><td align="center">指定 HTML 元素的盒子类型</td></tr><tr><td align="center">flex-direction</td><td align="center">指定弹性盒子中子元素的排列方式</td></tr><tr><td align="center">flex-wrap</td><td align="center">设置当弹性盒子的子元素超出父容器时是否换行</td></tr><tr><td align="center">flex-flow</td><td align="center">flex-direction 和 flex-wrap 两个属性的简写</td></tr><tr><td align="center">justify-content</td><td align="center">设置弹性盒子中元素在主轴（横轴）方向上的对齐方式</td></tr><tr><td align="center">align-items</td><td align="center">设置弹性盒子中元素在侧轴（纵轴）方向上的对齐方式</td></tr><tr><td align="center">align-content</td><td align="center">修改 flex-wrap 属性的行为，类似 align-items，但不是设置子元素对齐，而是设置行对齐</td></tr><tr><td align="center">order</td><td align="center">设置弹性盒子中子元素的排列顺序</td></tr><tr><td align="center">align-self</td><td align="center">在弹性盒子的子元素上使用，用来覆盖容器的 align-items 属性</td></tr><tr><td align="center">flex</td><td align="center">设置弹性盒子中子元素如何分配空间</td></tr><tr><td align="center">flex-grow</td><td align="center">设置弹性盒子的扩展比率</td></tr><tr><td align="center">flex-shrink</td><td align="center">设置弹性盒子的收缩比率</td></tr><tr><td align="center">flex-basis</td><td align="center">设置弹性盒子伸缩基准值</td></tr></tbody></table><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><blockquote><p>flex-direction<br>flex-direction 属性用来决定主轴的方向（即项目的排列方向），属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">row</td><td align="center">默认值，主轴沿水平方向从左到右</td></tr><tr><td align="center">row-reverse</td><td align="center">主轴沿水平方向从右到左</td></tr><tr><td align="center">column</td><td align="center">主轴沿垂直方向从上到下</td></tr><tr><td align="center">column-reverse</td><td align="center">主轴沿垂直方向从下到上</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承此属性的值</td></tr></tbody></table><blockquote><p>flex-wrap<br>flex-wrap 属性用来设置当弹性盒子的子元素（项目）超出父容器时是否换行，属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">nowrap</td><td align="center">默认值，表示项目不会换行</td></tr><tr><td align="center">wrap</td><td align="center">表示项目会在需要时换行</td></tr><tr><td align="center">wrap-reverse</td><td align="center">表示项目会在需要时换行，但会以相反的顺序</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>flex-flow<br>flex-flow 属性是 flex-direction 和 flex-wrap 两个属性的简写，语法格式如下：<br><code>flex-flow: flex-direction flex-wrap;</code></p></blockquote><blockquote><p>justify-content<br>justify-content 属性用于设置弹性盒子中元素在主轴（横轴）方向上的对齐方式，属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">flex-start</td><td align="center">默认值，左对齐</td></tr><tr><td align="center">flex-end</td><td align="center">右对齐</td></tr><tr><td align="center">center</td><td align="center">居中</td></tr><tr><td align="center">space-between</td><td align="center">两端对齐，项目之间的间隔是相等的</td></tr><tr><td align="center">space-around</td><td align="center">每个项目两侧的间隔相等</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>align-items<br>align-items 属性用来设置弹性盒子中元素在侧轴（纵轴）方向上的对齐方式，属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">stretch</td><td align="center">默认值，项目将被拉伸以适合容器</td></tr><tr><td align="center">center</td><td align="center">项目位于容器的中央</td></tr><tr><td align="center">flex-start</td><td align="center">项目位于容器的顶部</td></tr><tr><td align="center">flex-end</td><td align="center">项目位于容器的底部</td></tr><tr><td align="center">baseline</td><td align="center">项目与容器的基线对齐</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>align-content<br>align-content 属性与 justify-content 属性类似，可以在弹性盒子的侧轴还有多余空间时调整容器内项目的对齐方式，属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">stretch</td><td align="center">默认值，将项目拉伸以占据剩余空间</td></tr><tr><td align="center">center</td><td align="center">项目在容器内居中排布</td></tr><tr><td align="center">flex-start</td><td align="center">项目在容器的顶部排列</td></tr><tr><td align="center">flex-end</td><td align="center">项目在容器的底部排列</td></tr><tr><td align="center">space-between</td><td align="center">多行项目均匀分布在容器中，其中第一行分布在容器的顶部，最后一行分布在容器的底部</td></tr><tr><td align="center">space-around</td><td align="center">多行项目均匀分布在容器中，并且每行的间距（包括离容器边缘的间距）都相等</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>order<br>order 属性用来设置项目在容器中出现的顺序，您可以通过具体的数值来定义项目在容器中的位置，属性的语法格式如下：<br><code>order: number;</code><br>其中 number 就是项目在容器中的位置，默认值为 0。</p></blockquote><blockquote><p>align-self<br>align-self 属性允许您为某个项目设置不同于其它项目的对齐方式，该属性可以覆盖 align-items 属性的值。align-self 属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">auto</td><td align="center">默认值，表示元素将继承其父容器的 align-items 属性值，如果没有父容器，则为“stretch”</td></tr><tr><td align="center">stretch</td><td align="center">项目将被拉伸以适合容器</td></tr><tr><td align="center">center</td><td align="center">项目位于容器的中央</td></tr><tr><td align="center">flex-start</td><td align="center">项目位于容器的顶部</td></tr><tr><td align="center">flex-end</td><td align="center">项目位于容器的底部</td></tr><tr><td align="center">baseline</td><td align="center">项目与容器的基线对齐</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>flex<br>flex 属性是 flex-grow、flex-shrink 和 flex-basis 三个属性的简写，语法格式如下：<br><code>flex: flex-grow flex-shrink flex-basis;</code></p><p>参数说明如下：</p><ul><li>flex-grow：（必填参数）一个数字，用来设置项目相对于其他项目的增长量，默认值为 0；</li><li>flex-shrink：（选填参数）一个数字，用来设置项目相对于其他项目的收缩量，默认值为 1；</li><li>flex-basis：（选填参数）项目的长度，合法值为 auto（默认值，表示自动）、inherit（表示从父元素继承该属性的值） 或者以具体的值加 “%”、”px”、”em” 等单位的形式。</li></ul><p>另外，flex 属性还有两个快捷值，分别为 auto（1 1 auto）和 none（0 0 auto）。</p></blockquote><p>另外，除了可以使用 flex 属性外，您也可以使用 flex-grow、flex-shrink、flex-basis 几个属性来分别设置项目的增长量、收缩量以及项目长度，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.flex div:nth-child(4) &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">    flex-basis: auto;</span><br><span class="line">    /* 等同于 flex:1 1 auto; */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（2-1）</title>
      <link href="/post/5c0cb90c.html"/>
      <url>/post/5c0cb90c.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>今天下午经历了第二次面试，面试官是一个小姐姐，看着挺和蔼的，具体问的问题其实也不算难，<br>都是前端开发中常用的东西，但是她可能更想了解原理，而我处于只会用的境界，整体感觉我觉<br>得很不好，不出意外，应该是挂了…</p><h2 id="CSS3-中的动画以及常用的-css3-属性"><a href="#CSS3-中的动画以及常用的-css3-属性" class="headerlink" title="CSS3 中的动画以及常用的 css3 属性"></a>CSS3 中的动画以及常用的 css3 属性</h2><p>我回答的是 scale、transform、rotate 等，然后她又问我动画相关的，我说自己常用的可能就是 animation，然后自定义一些动画，进行引用啥的…</p><h2 id="promise-相关"><a href="#promise-相关" class="headerlink" title="promise 相关"></a>promise 相关</h2><p>刚开始小姐姐问 promise 了解吗，我说了解，主要是用来解决 ajax 回调地狱的问题的，然后她问我 promise 可以实现同步吗，问到这里，我已经不行了，这种概念题可真是让我头疼，之后又问我.then 方法是同步还是异步？.all 可以实现同步吗？为什么？直接想死</p><h2 id="ES6-相关"><a href="#ES6-相关" class="headerlink" title="ES6 相关"></a>ES6 相关</h2><p>先问了我会用 ES6 吗，都用了哪些，我说常用的可能就是解构赋值和箭头函数，然后又问我解构赋值具体咋用，最后问了我结构赋值是深拷贝还是浅拷贝，为什么？我的妈，又是为什么，哎….没了</p><h2 id="关于面试的回顾，知识点总结"><a href="#关于面试的回顾，知识点总结" class="headerlink" title="关于面试的回顾，知识点总结"></a>关于面试的回顾，知识点总结</h2><h2 id="css3-新增有哪些"><a href="#css3-新增有哪些" class="headerlink" title="css3 新增有哪些"></a>css3 新增有哪些</h2><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><table><thead><tr><th>选择器</th><th align="center">例子</th><th>例子描述</th></tr></thead><tbody><tr><td>elem1~elem2</td><td align="center">p~ul</td><td>选择前面有&lt;p&gt;元素的每个&lt;ul&gt;元素</td></tr><tr><td>[attribute^&#x3D;value]</td><td align="center">a[src^&#x3D;”https”]</td><td>选择其 src 属性值以“HTTP 是”开头的每个&lt;a&gt;元素</td></tr><tr><td>[attribute$&#x3D;value]</td><td align="center">a[src$&#x3D;”.pdf”]</td><td>选择其 src 属性以“.pdf”结尾的所有&lt;a&gt;元素</td></tr><tr><td>[attribute*&#x3D;value]</td><td align="center">a[src*&#x3D;”abd”]</td><td>选择其 src 属性中包含“abc”子串的每个&lt;a&gt;元素</td></tr><tr><td>:first-of-type</td><td align="center">p:first-of-type</td><td>选择属于其父元素的首个&lt;p&gt;元素的每个&lt;p&gt;元素</td></tr><tr><td>:last-of-type</td><td align="center">p:last-of-type</td><td>选择属于其父元素的最后&lt;p&gt;元素的每个&lt;p&gt;元素</td></tr><tr><td>:only-of-type</td><td align="center">p:only-of-type</td><td>选择属于其父元素的唯一的&lt;p&gt;元素的每个&lt;p&gt;元素</td></tr><tr><td>:noly-child</td><td align="center">p:only-child</td><td>选择属于其父元素的唯一子元素的每个&lt;p&gt;元素</td></tr><tr><td>:nth-child(n)</td><td align="center">p:nth-child(2)</td><td>选择属于其父元素的第二个子元素的每个&lt;p&gt;元素</td></tr><tr><td>:nth-last-child(n)</td><td align="center">p:nth-last-child(2)</td><td>同上，从最后一个子元素开始计数</td></tr><tr><td>:nth-of-type(n)</td><td align="center">p:nth-of-type(2)</td><td>选择属于其父元素第二个&lt;p&gt;元素的每个&lt;p&gt;元素</td></tr><tr><td>:nth-last-of-type(n)</td><td align="center">p:nth-last-of-type(2)</td><td>同上，但是从最后一个子元素开始计数</td></tr><tr><td>:last-child</td><td align="center">p:last-child</td><td>选择属于其父元素最后一个子元素每个&lt;p&gt;元素</td></tr></tbody></table><h3 id="新样式"><a href="#新样式" class="headerlink" title="新样式"></a>新样式</h3><ul><li><p>边框</p><blockquote><ul><li>border-radius: 创建圆角边框</li><li>box-shadow: 为元素添加阴影</li><li>border-image: 使用图片来绘制边框</li></ul></blockquote></li><li><p>box-shadow</p><blockquote><p>设置元素阴影，设置属性如下：</p><ul><li>水平阴影</li><li>垂直阴影</li><li>模糊距离</li><li>阴影尺寸（影子大小）</li><li>阴影颜色</li><li>内&#x2F;外阴影</li></ul><p>其中水平阴影和垂直阴影是必须设置的</p></blockquote></li></ul><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>新增了几个关于背景的属性，分别是<code>background-clip</code>、<code>background-origin</code>、<code>background-size</code> 和 <code>background-break</code></p><ul><li><p>background-clip</p><blockquote><p>用于确定背景画区，有以下几种可能的属性：</p><ul><li>background-clip: border-box; 背景从 <code>border</code> 开始显示</li><li>background-clip: padding-box; 背景从 <code>padding</code> 开始显示</li><li>background-clip: content-box; 背景从 <code>content</code> 区域开始显示</li><li>background-clip: no-clip; 默认属性，等同于 <code>border-box</code></li></ul></blockquote></li><li><p>background-origin</p><blockquote><p>我们设置背景图片时，图片是会以左上角对齐，但是是以 <code>border</code> 的左上角对齐还是以 <code>padding</code> 的左上角或者 <code>content</code> 的左上角对齐？<code>border-origin</code> 正是用来设置这个的</p><ul><li>background-origin: border-box; 从 <code>border</code> 开始计算 <code>background-position</code></li><li>background-origin: padding-box; 从 <code>padding</code> 开始计算 <code>background-position</code></li><li>background-origin: content-box; 从 <code>content</code> 开始计算 <code>background-position</code></li></ul><p>默认情况是 <code>padding-box</code>，即以 <code>padding</code> 的左上角为原定</p></blockquote></li><li><p>background-size</p><blockquote><p><code>background-size</code> 属性常用来调整背景图片的大小，主要用于设定图片本身。有以下可能的属性：</p><ul><li>background-size: contain; 缩小图片以适合元素（维持像素长宽比）</li><li>background-size: cover; 扩展元素以填补元素（维持像素长宽比）</li><li>background-size: 100px 100px; 缩小图片至指定的大小</li><li>background-size: 50% 100%; 缩小图片至指定的大小，百分比是相对包含元素的尺寸</li></ul></blockquote></li><li><p>background-break</p><blockquote><p>元素可以被分成几个独立的盒子（如使内联元素 span 跨越多行），background-break 属性用来控制背景怎样在这些不同的盒子中显示</p><ul><li>background-break: continous; 默认值。忽略盒之间的距离（也就是像元素没有分成多个盒子，依然是一个整体一样）</li><li>background-break: bounding-box; 把盒之间的距离计算在内</li><li>background-break: each-box; 为每个盒子单独重绘背景</li></ul></blockquote></li></ul><h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><ul><li><p>word-wrap</p><blockquote><p>语法：word-wrap: normal | break-wrod</p><ul><li>normal: 使用浏览器默认的换行</li><li>break-all: 允许在单词内换行</li></ul></blockquote></li><li><p>text-overflow</p><blockquote><p><code>text-overflow</code> 设置或检索当当前行超过指定容器的边界时如何显示，属性有两个值选择：</p><ul><li>clip: 修剪文本</li><li>ellipsis: 显示省略符号来代表被修剪的文本</li></ul></blockquote></li><li><p>text-shadow</p><blockquote><p><code>text-shadow</code>可向文本应用阴影。能够规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色</p></blockquote></li><li><p>text-decoration</p><blockquote><p><code>CSS3</code> 里面开始支持对文字的更深层次的渲染，具体有三个属性可供设置：</p><ul><li>text-fill-color: 设置文字内部填充颜色</li><li>text-stroke-color: 设置文字边界填充颜色</li><li>text-stroke-width: 设置文字边界宽度</li></ul></blockquote></li></ul><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><blockquote><p>css3 新增了新的颜色表示方式 rgba 与 hsla</p><ul><li>rgba 分为两部分，rgb 为颜色值，a 为透明度</li><li>hala 分为四部分，h 为色相，s 为饱和度，l 为亮度，a 为透明度</li></ul></blockquote><h2 id="transition-过渡"><a href="#transition-过渡" class="headerlink" title="transition 过渡"></a>transition 过渡</h2><blockquote><p><code>transition</code> 属性可以被指定为一个或多个 <code>CSS</code> 属性的过渡效果，多个属性之间用逗号进行分隔，必须规定两项内容：</p><ul><li>过渡效果</li><li>持续时间</li></ul></blockquote><p>语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认0)</span><br></pre></td></tr></table></figure><p>上面为简写模式，也可以分开写各个属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transition-property: width;</span><br><span class="line">transition-duration: 1s;</span><br><span class="line">transition-timing-function: linear;</span><br><span class="line">transition-delay: 2s;</span><br></pre></td></tr></table></figure><h2 id="transform-转换"><a href="#transform-转换" class="headerlink" title="transform 转换"></a>transform 转换</h2><blockquote><p><code>transform</code> 属性允许你旋转，缩放，倾斜或平移给定元素</p><p><code>transform-origin</code>：转换元素的位置（围绕那个点进行转换），默认值为(x,y,z):(50%,50%,0)</p><p>使用方式：</p><ul><li>transform: translate(120px, 50%)：位移</li><li>transform: scale(2, 0.5)：缩放</li><li>transform: rotate(0.5turn)：旋转</li><li>transform: skew(30deg, 20deg)：倾斜</li></ul></blockquote><h2 id="animation-动画"><a href="#animation-动画" class="headerlink" title="animation 动画"></a>animation 动画</h2><blockquote><p>动画这个平常用的也很多，主要是做一个预设的动画。和一些页面交互的动画效果，结果和过渡应该一样，让页面不会那么生硬</p><p><code>animation</code> 也有很多的属性</p><ul><li>animation-name：动画名称</li><li>animation-duration：动画持续时间</li><li>animation-timing-function：动画时间函数</li><li>animation-delay：动画延迟时间</li><li>animation-iteration-count：动画执行次数，可以设置为一个整数，也可以设置为 infinite，意思是无限循环</li><li>animation-direction：动画执行方向</li><li>animation-paly-state：动画播放状态</li><li>animation-fill-mode：动画填充模式</li></ul></blockquote><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><blockquote><p>颜色渐变是指在两个颜色之间平稳的过渡，<code>css3</code> 渐变包括</p></blockquote><ul><li><p>linear-gradient：线性渐变</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image: linear-gradient(direction, color-stop1, color-stop2, …);</span><br></pre></td></tr></table></figure></li><li><p>radial-gradient：径向渐变</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image: radial-gradient(0deg, red, green);</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><ul><li><a href="https://blog.csdn.net/u012138854/article/details/127740658">https://blog.csdn.net/u012138854/article/details/127740658</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（1）</title>
      <link href="/post/4eb916e2.html"/>
      <url>/post/4eb916e2.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>由于个人觉得找工作的时候有和没有实习经历是不一样的，所以就特别想在找正式工作之前，经历一个实习，<br>然后就投递了一些简历（我投的时候，是挑着投的，后来有经验的人说，实习嘛，不应该追求工资，所以不要挑，<br>别人要你就行）。然后今天下午收到了一个笔试链接，因为之前投递后，也会有一些链接，让你填写一些类似公<br>务员考试的那种场景题、逻辑题、还有一些工作场景中会有的问题，问你如何解决，结果这一次不是，我点进去<br>一看，只有三个题，30 分钟，我瞬间觉得是正儿八经的笔试题，但是回不去了，开着摄像头呢，没办法，做吧，<br>由于太紧张，第一个提看了七分钟还没有头绪，就想着先做后面的，然后平静下来后，回来在做，结果…，人<br>家规定提交上一个，才来做下一个，但是因为时间关系，没办法，我只能放弃第一个了，后面俩个做的挺顺利的，<br>一共 23 分钟，这时候，我想其实第一个也不难，但是没机会了，哎第一个题就是让你从给定的数组中选出出现<br>次数最多的元素，可能不止一个。看到这个题，我就想如何存储每一个数字的次数，思路对，但是数据结构…，<br>由于平时用的 java，一下就想到了 map，但是 js 有 map 吗？忘了，尴尬，没办法，用数组吧，本来用数组<br>也挺简单，紧张的不行竟然想着用两个存储，对应位置一个记录数字，一个记录次数，线上的 ide，没有提示，<br>好像有的方法也没法用，比如 indexOf，最终无疾而终</p><h2 id="正确的答案"><a href="#正确的答案" class="headerlink" title="正确的答案"></a>正确的答案</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getReaptNums(arr) &#123;</span><br><span class="line">  <span class="built_in">let</span> res = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">let</span> i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    res[arr[i]]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">let</span> max = 0;</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">let</span> i = 0; i &lt; res.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(max &lt; res[i])</span><br><span class="line">      max = res[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">let</span> ans = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">let</span> i = 0; i &lt; res.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(res[i] == max)</span><br><span class="line">      ans.push(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html相关知识1-1</title>
      <link href="/post/c4d42ff.html"/>
      <url>/post/c4d42ff.html</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要记录了自己在 HTML 学习的过程中遇到的知识点</p><h2 id="如何理解-HTML-的语义化"><a href="#如何理解-HTML-的语义化" class="headerlink" title="如何理解 HTML 的语义化"></a>如何理解 HTML 的语义化</h2><blockquote><ul><li>让人更容易读懂代码（增加代码可读性）</li><li>让搜索引擎更容易读懂（SEO-搜索引擎优化）</li></ul></blockquote><p>在此基础上列举一个简单的例子，比如说标题使用 div 和 h1，列表使用 div 和 ul、li 等的对比。</p><h2 id="默认情况下，哪些是块状元素，哪些是内联元素"><a href="#默认情况下，哪些是块状元素，哪些是内联元素" class="headerlink" title="默认情况下，哪些是块状元素，哪些是内联元素"></a>默认情况下，哪些是块状元素，哪些是内联元素</h2><blockquote><p>display：block&#x2F;table div、table、h1、h2、…、ul、ol、p<br>display：inline&#x2F;inline-block span、img、input、button</p></blockquote><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;圣杯布局&lt;/title&gt;</span><br><span class="line">    &lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            min-width: 550px;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#header &#123;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: <span class="comment">#f1f1f1;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#container &#123;</span></span><br><span class="line">            padding-left: 200px;</span><br><span class="line">            padding-right: 150px;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#container .column &#123;</span></span><br><span class="line">            <span class="built_in">float</span>: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#center &#123;</span></span><br><span class="line">            background-color: <span class="comment">#ccc;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#left &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            width: 200px;</span><br><span class="line">            margin-left: -100%;</span><br><span class="line">            right: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#right &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">            width: 150px;</span><br><span class="line">            margin-right: -150px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#footer &#123;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: <span class="comment">#f1f1f1;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* 手写 clearfix */</span><br><span class="line">        .clearfix:after &#123;</span><br><span class="line">            content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            display: table;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line">        .clearfix &#123;</span><br><span class="line">            /* 兼容IE低版本 */</span><br><span class="line">            *zoom: 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;header&quot;</span>&gt;this is header&lt;/div&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;container&quot;</span> class=<span class="string">&quot;clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="built_in">id</span>=<span class="string">&quot;center&quot;</span> class=<span class="string">&quot;column&quot;</span>&gt;this is center&lt;/div&gt;</span><br><span class="line">        &lt;div <span class="built_in">id</span>=<span class="string">&quot;left&quot;</span> class=<span class="string">&quot;column&quot;</span>&gt;this is left&lt;/div&gt;</span><br><span class="line">        &lt;div <span class="built_in">id</span>=<span class="string">&quot;right&quot;</span> class=<span class="string">&quot;column&quot;</span>&gt;this is right&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;footer&quot;</span>&gt;this is footer&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo搭建博客的第一篇文章</title>
      <link href="/post/bbb939dd.html"/>
      <url>/post/bbb939dd.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
