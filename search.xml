<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>html 相关知识（2）</title>
      <link href="/post/3ef83a43.html"/>
      <url>/post/3ef83a43.html</url>
      
        <content type="html"><![CDATA[<h2 id="盒模型宽度的计算"><a href="#盒模型宽度的计算" class="headerlink" title="盒模型宽度的计算"></a>盒模型宽度的计算</h2><blockquote><ul><li>offsetWidth &#x3D; 内容宽度(width) + 内边距(padding) + 边框(border)，不包含外边距</li><li>clientWidth &#x3D; 内容宽度(width) + 内边距(padding)</li></ul></blockquote><blockquote><p>设置 box-sizing：border-box，就可以将一个 div 的上述 offsetwidth 变为原 width 的宽度、设置以后，width 的宽度将会比之前有所减少(因为它将 width、padding、border 的总体宽度缩放到设定的宽度值)</p></blockquote><h2 id="border-box-和-content-box-的区别"><a href="#border-box-和-content-box-的区别" class="headerlink" title="border-box 和 content-box 的区别"></a>border-box 和 content-box 的区别</h2><blockquote><p>border-box：怪异盒模型；会根据设定的宽度值缩放，到达设定的宽度值<br>content-box： 标准盒模型；盒子宽度 &#x3D; 内容的宽度 + 左右内间距 + 左右边框的宽度</p></blockquote><h2 id="margin-的纵向重叠问题"><a href="#margin-的纵向重叠问题" class="headerlink" title="margin 的纵向重叠问题"></a>margin 的纵向重叠问题</h2><blockquote><p>相邻元素的 margin-top 和 margin-bottom 会发生重叠，空白内容的 p 标签也会发生重叠，最终的 margin 值就是 margin-top 和 margin-bottom 中较大的</p></blockquote><h2 id="margin-的负值问题"><a href="#margin-的负值问题" class="headerlink" title="margin 的负值问题"></a>margin 的负值问题</h2><blockquote><p>对 margin 的 left、top、bottom、right 设定为负值会发生什么问题</p><ul><li>margin-top 和 margin-left 设置为负值会向上、向左移动（正常逻辑）</li><li>margin-right 设定为负值，该元素的右侧元素会发生左移，本身不受影响</li><li>margin-bottom 设定为负值，该元素的下方元素会发生上移，本身不受影响</li></ul></blockquote><h2 id="BFC-理解与应用：什么时候会发生-BFC，如何应用"><a href="#BFC-理解与应用：什么时候会发生-BFC，如何应用" class="headerlink" title="BFC 理解与应用：什么时候会发生 BFC，如何应用"></a>BFC 理解与应用：什么时候会发生 BFC，如何应用</h2><blockquote><p>BFC: block format context 块级格式化上下文<br>一块独立渲染区域，内部元素渲染不会影响边界以外的元素<br>形成 BFC 的常见条件：1）、float 不是 none 2）、position：absolute&#x2F;fiexed 3）、overflow 不是 visible 4）、display： inline-block&#x2F;flex<br>常见应用：清除浮动：就是对于使用了 float 的元素，可能会影响父元素或者兄弟元素，这时候可以对父元素或者兄弟元素使用 BFC，具体就是能够形成 BFC 的条件之一即可，影响了谁，谁就用 BFC，常用的一般是 .bfc { overflow: hidden; }，也可以使用 clear：both</p></blockquote><h3 id="relative-和-absolute-定位"><a href="#relative-和-absolute-定位" class="headerlink" title="relative 和 absolute 定位"></a>relative 和 absolute 定位</h3><blockquote><ul><li>relative：依据自身进行定位，不会对外界元素产生影响</li><li>absolute：依据最近一层的定位元素进行定位</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（6-1）</title>
      <link href="/post/d8e8f03e.html"/>
      <url>/post/d8e8f03e.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>今天下午面试了另一家公司，总体来说，他问的东西不算很难，但是通常这种问题就是没有固定的答案的那种，所以究竟如何，我也不知道^^</p><h3 id="http-和-https"><a href="#http-和-https" class="headerlink" title="http 和 https"></a>http 和 https</h3><pre><code>背景</code></pre><blockquote><ul><li>HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了 Web 浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP 协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。端口 80，无状态连接</li><li>安全套接字层超文本传输协议 HTTPS，为了数据传输的安全，HTTPS 在 HTTP 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密.。<strong>HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL</strong> HTTPS 协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。端口 443</li></ul></blockquote><pre><code>区别</code></pre><blockquote><ul><li>https 协议需要到 CA（Certificate Authority，数字证书认证机构）申请证书，一般免费证书较少，因而需要一定费用</li><li>http 是明文传输，数据未加密，安全性差；https 则是具有安全性的 ssl 加密传输协议，安全性好</li><li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443</li><li>http 页面响应速度比 https 快，因为 http 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 https 除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包</li><li>https&#x3D;SSL&#x2F;TLS+http，所以，https 比 http 要更耗费服务器资源</li></ul></blockquote><pre><code>https的请求过程</code></pre><blockquote><p>客户端发起 HTTPS 请求：就是用户在浏览器里输入一个 https 网址，然后连接到 server 的 443 端口<br>采用 HTTPS 协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请，区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl 就是个不错的选择，有 1 年的免费服务)。<em>这套证书其实就是一对公钥和私钥，如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。</em><br>传送证书：这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等<br>客户端解析证书：这部分工作是有客户端的 TLS 来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密，就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容<br>传送加密信息：这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了<br>服务端解密信息：服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密，所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全<br>传输加密后的信息：这部分信息是服务段用私钥加密后的信息，可以在客户端被还原<br>客户端解密信息：客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容，整个过程第三方即使监听到了数据，也束手无策</p></blockquote><h3 id="vue2-和-vue3-的区别"><a href="#vue2-和-vue3-的区别" class="headerlink" title="vue2 和 vue3 的区别"></a>vue2 和 vue3 的区别</h3><blockquote><ul><li>生命周期函数钩子不同</li><li>数据双向绑定原理不同</li><li>定义变量和方法不同</li><li>指令和插槽的使用不同</li><li>API 类型不同</li><li>是否支持碎片</li><li>父子之间传参不同</li><li>main.js 文件中部分设置不同</li></ul></blockquote><pre><code>具体不同</code></pre><blockquote><ul><li>生命周期钩子不同：1）、vue2：beforeCreate 组件创建之前、created 组件创建之后、beforeMount 组件挂载到页面之前执行、mounted 组件挂载到页面之后执行、beforeUpdate 组件更新之前、updated 组件更新之后；2）、vue3：setup 开始创建组件、onBeforeMount 组件挂载到页面之前执行、onMounted 组件挂载到页面之后执行、onBeforeUpdate 组件更新之前、onUpdated 组件更新之后</li><li>数据双向绑定原理不同：vue2：利用 ES5 的 Object.defineProperty 对数据进行劫持，然后结合订阅&#x2F;发布实现；vue3：利用 ES6 的 proxy API 对数据进行代理</li><li>vue3 的 proxy 代理的优势在于：1）、defineProperty 只能监听某个属性，不能对全对象监听；2）、可以省去 for…in，闭包等内容来提升效率（直接绑定整个对象即可）；3）、可以监听数组，不再单独的对数组做特异性处理。可以检测到数组内部数据的变化；</li><li>定义变量和方法不同：1）、vue2：在 data 中定义变量，在 methods 中创建方法；2）、vue3：使用一个新的 setup 方法，使用 ref 和 reactive 来声明响应式数据</li><li>指令和插槽的使用不同：1）、vue2：不建议将 v-for 和 v-if 写在一起使用，允许直接使用 slot；2）、vue3：将 v-if 当作 v-for 大的一个判断语句，不会相互冲突；移除 keyCode 作为 v-on 的修饰符，不支持 config.keyCodes；移除 v-on.native 修饰符；移除过滤器 filter；不允许直接使用 slot，正确格式为 v-slot</li><li>API 类型不同：1）、vue2：选项型 api（在代码中分割不同属性：data，computed，methods 等；2）、vue3：组合型 api（使用方法进行分隔，显得更加简便整洁）</li><li>是否支持碎片：1）、vue2：不支持，每个组件只能有一个根节点；2）、vue3：支持，每个组件可以有多个根节点</li><li>父子传参不同：1）、vue2：父传子 子组件通过 prop 接收；子传父 子组件中通过$emit 向父组件触发一个监听方法，传递一个参数；2）、vue3：使用 setup()中的第二个参数 content 对象中有 emit，只需要在 setup()接收第二个参数中使用分解对象法取出 emit 就可以在 setup 方法中随意使用了，第一个参数时 prop</li><li>main.js 文件不同：1）、vue2：使用 prototype（原型）的形式进行操作，引入的是构造函数；2）、vue3：需要使用结构的形式进行操作，引入的是工厂函数；vue3 中 app 组件中可以没用根标签</li></ul></blockquote><pre><code>关于插槽的修改：使用的每一个slot都需要一个 template 包裹，且 slot=“名称” 修改为 v-slot:名称</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改前</span></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-bar-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">tab-bar-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../src/assets/img/tabbar/home.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="comment">// 父组件，子组件无需修改</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">tab-bar-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:item-icon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../src/assets/img/tabbar/home.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="ES6-中的新增的方法和具体的使用"><a href="#ES6-中的新增的方法和具体的使用" class="headerlink" title="ES6 中的新增的方法和具体的使用"></a>ES6 中的新增的方法和具体的使用</h3><p>这个之前的 ES6 中有详细的说明，在这里就不重复了</p><h3 id="数组的去重（包括数字、和根据数组中对象的名称进行的去重）"><a href="#数组的去重（包括数字、和根据数组中对象的名称进行的去重）" class="headerlink" title="数组的去重（包括数字、和根据数组中对象的名称进行的去重）"></a>数组的去重（包括数字、和根据数组中对象的名称进行的去重）</h3><blockquote><ul><li>如果是数字的去重的话，直接使用 ES6 中新增的 Set 即可</li><li>如果是数组中是一个个的对象，需要根据对象的名称去重的话，我当时回答的是使用 map，对数组进行遍历，然后用名称作为键值，如果不包含，则存入，包含不用管，继续即可</li></ul></blockquote><p>其他的根据对象中名称或者 id 进行去重的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">  arr = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张一&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张一&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;张二&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、通过forEach再通过some方法判断数组是否包含当前对象id，不包含则添加</span></span><br><span class="line"><span class="title function_">some</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">some</span>: any = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!some.<span class="title function_">some</span>(<span class="function"><span class="params">e</span> =&gt;</span> e.<span class="property">id</span> == el.<span class="property">id</span>)) &#123;</span><br><span class="line">      some.<span class="title function_">push</span>(el);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%c [ some去重结果 ]-43&#x27;</span>, <span class="string">&#x27;font-size:13px; background:pink; color:#bf2c9f;&#x27;</span>, some);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、通过forEach再通过find方法判断数组是否包含当前对象id，不包含则添加</span></span><br><span class="line"><span class="title function_">find</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">find</span>: any = [];</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!find.<span class="title function_">find</span>(<span class="function"><span class="params">e</span> =&gt;</span> e.<span class="property">id</span> == el.<span class="property">id</span>)) &#123;</span><br><span class="line">      find.<span class="title function_">push</span>(el);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%c [ find去重 ]-51&#x27;</span>, <span class="string">&#x27;font-size:13px; background:pink; color:#bf2c9f;&#x27;</span>, find);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、通过reduce方法，通过定义的obj，判断obj[next.id] 是否存在，存在设置为“”，不存在则push</span></span><br><span class="line"><span class="title function_">reduce</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> reduce = [];</span><br><span class="line">  reduce = <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">item, next</span>) &#123;</span><br><span class="line">    <span class="comment">//item为没有重复id的数组，next为当前对象</span></span><br><span class="line">    obj[next.<span class="property">id</span>] ? <span class="string">&#x27;&#x27;</span> : (obj[next.<span class="property">id</span>] = <span class="literal">true</span> &amp;&amp; item.<span class="title function_">push</span>(next));</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reduce);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vue-中父子声明周期的执行顺序"><a href="#vue-中父子声明周期的执行顺序" class="headerlink" title="vue 中父子声明周期的执行顺序"></a>vue 中父子声明周期的执行顺序</h3><p>这个之前面试也遇到过，前面的面试博客中也有总结，这里不重复了</p><h3 id="this-的指向问题（包括箭头函数的）"><a href="#this-的指向问题（包括箭头函数的）" class="headerlink" title="this 的指向问题（包括箭头函数的）"></a>this 的指向问题（包括箭头函数的）</h3><blockquote><ul><li>如果是普通函数，this 指向 window；如果是对象中的方法被调用，那就指向对象；如果使用 call、apply、bind 的话，传入什么就指向什么（指向第一个参数）；构造函数调用， 此时 this 指向 实例对象；通过事件绑定的方法， 此时 this 指向 绑定事件的对象；</li><li>当使用 call 或者 apply 的时候，如果我们传入的第一个参数为 null，函数体内的 this 会默认指向宿主对象，在浏览器中则是 window。bind()创建的是一个新的函数（称为绑定函数），与被调用函数有相同的函数体，当目标函数被调用时 this 的值绑定到 bind()的第一个参数上</li><li><strong>如果是箭头函数，this 指向是定义时所在的对象，而不是执行时的，箭头函数的 this 指向固定</strong> 箭头函数不会创建自己的 this，它只会从自己的作用域链的上一层继承 this（父级指向谁，当前箭头函数就指向谁）</li><li>在以下三种特殊情况下，this 指向 window：1）、立即执行函数（IIFE）2）、setTimeout 中传入的函数 3）、setInterval 中传入的函数</li></ul></blockquote><h3 id="let、var、const-的区别"><a href="#let、var、const-的区别" class="headerlink" title="let、var、const 的区别"></a>let、var、const 的区别</h3><p>这个问题之前也遇到并总结过，这里不重复了</p><h3 id="input-前一次输入比后一次返回晚，如何解决"><a href="#input-前一次输入比后一次返回晚，如何解决" class="headerlink" title="input 前一次输入比后一次返回晚，如何解决"></a>input 前一次输入比后一次返回晚，如何解决</h3><h3 id="如何判断是一个数组"><a href="#如何判断是一个数组" class="headerlink" title="如何判断是一个数组"></a>如何判断是一个数组</h3><blockquote><ul><li>a instanceof Array instanceof 运算符用于检验构造函数的 prototype 属性是否出现在对象的原型链中的任何位置，返回一个布尔值。但是 prototype 可以被修改。比如存在多个全局环境（iframe）</li><li>Array.isArray(a) 简单好用，而且对于多全局环境，Array.isArray() 同样能准确判断，但有个问题，Array.isArray() 是在 ES5 中提出，也就是说在 ES5 之前可能会存在不支持此方法的情况。解决办法如下</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="property">isArray</span>) &#123;</span><br><span class="line">  <span class="title class_">Array</span>.<span class="property">isArray</span> = <span class="keyword">function</span> (<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arg) === <span class="string">&quot;[object Array]&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>a.constructor &#x3D;&#x3D;&#x3D; Array 实例的构造函数属性 constructor 指向构造函数，那么通过 constructor 属性也可以判断是否为一个数组，问题和 instanceof 一样</li><li>Object.prototype.toString.call(a) &#x3D;&#x3D;&#x3D; ‘[object Array]’ Object.prototype.toString().call()可以获取到对象的不同类型，它强大的地方在于不仅仅可以检验是否为数组，比如是否是一个函数，是否是数字等等。<strong>甚至对于多全局环境时， Object.prototype.toString().call()也能符合预期处理判断</strong></li></ul></blockquote><h3 id="js-中的数据类型"><a href="#js-中的数据类型" class="headerlink" title="js 中的数据类型"></a>js 中的数据类型</h3><p>这个前面都总结过，也比较简单，这里不重复了</p><h3 id="冒泡和捕获"><a href="#冒泡和捕获" class="headerlink" title="冒泡和捕获"></a>冒泡和捕获</h3><pre><code>概念</code></pre><blockquote><ul><li>事件由子元素传递到父元素的过程叫做冒泡（false）冒泡就是子元素的点击事件会冒泡到父元素，就是相当于点击了多次，顺序是从子元素到父元素</li><li>事件由父元素传递到子元素的过程叫做事件捕获（ture）捕获就是子元素的点击事件会父元素执行到子元素，就是相当于点击了多次，顺序是从父元素到子元素</li></ul></blockquote><pre><code>区别</code></pre><blockquote><ul><li>在捕获事件触发的前提，我们需要使用事件监听 document.addEventListener(‘event’, funciton() {}, true) <strong>这里的 true 是布尔值判断是否为捕获事件，当为 true 时，这里为捕获事件，如果为 false 时，这里就是冒泡事件</strong></li></ul></blockquote><pre><code>预防</code></pre><blockquote><ul><li>e.stoppropagation(); 来阻止冒泡</li><li>e.preventDefault() 方法来阻止默认</li><li>return false; 既阻止冒泡又阻止默认</li></ul></blockquote><h3 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h3><blockquote><ul><li>git init 初始化 在工作路径上创建主分支</li><li>git clone 地址 克隆远程仓库</li><li>git clone -b 分支名 地址 克隆分支的代码到本地</li><li>git status 查看状态</li><li>git add . 将文件保存到本地</li><li>git checkout -b branch1 新创建分支 （如果当前分支存在就是切换，如果不存在就是创建）</li><li>git checkout master 切换到主分支</li><li>git commit -m “备注内容” 提交时使用，为了规范化</li><li>git push origin master 推送到远端</li><li>git pull origin master 从远端拉取</li><li>git branch 查看分支（就是显示创建的分支）</li><li>git merge xxx 可用来将某分支和当前分支进行合并</li><li>git diff 可用来查看修改文件的具体修改，不是新添加的，是修改的</li><li>git log 可用来查看提交记录</li><li>config user.name 用来配置提交的用户名</li><li>git config user.email 用来配置提交用户的邮箱，以便于知道谁提交的</li><li>git show “id” 可用来查看某次提交的具体内容 id 是 git log 中的，每次提交都有一个</li><li>checkout . 或者 git checkout 具体文件名 可用来撤销修改</li><li>git fetch 可用来把所有分支拉到本地</li><li>git blame 文件名 查看该文件的修改历史</li><li>git blame -L 100,10 文件名 从 100 行开始，到 110 行 逐行查看文件的修改历史</li><li>git mv a b 把 a 文件名字改成 b 并且直接放入 git add 后的暂存区</li><li>git mv b .&#x2F;demos&#x2F; 把 b 文件移动到 demos 文件夹下</li></ul></blockquote><h3 id="v-for-的渲染为何要加个-key"><a href="#v-for-的渲染为何要加个-key" class="headerlink" title="v-for 的渲染为何要加个 key"></a>v-for 的渲染为何要加个 key</h3><blockquote><ul><li>diff 算法中通过 tag 和 key 来判断，是否是 sameNode</li><li>减少渲染次数，提高渲染性能</li></ul></blockquote><h3 id="二维数组扁平化"><a href="#二维数组扁平化" class="headerlink" title="二维数组扁平化"></a>二维数组扁平化</h3><p>如果是二维的，可以使用 concat，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattern</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    res = res.<span class="title function_">concat</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">7</span>], <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flattern</span>(arr2));</span><br></pre></td></tr></table></figure><p>如果是多维的，递归遍历即可，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattern3</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)) &#123;</span><br><span class="line">      <span class="keyword">const</span> tmp = <span class="title function_">flattern3</span>(item);</span><br><span class="line">      <span class="comment">/* </span></span><br><span class="line"><span class="comment">        因为这一步返回的是数组，所以可以直接使用concat，因为concat自动扁平化一级的嵌套数组</span></span><br><span class="line"><span class="comment">        或者可以使用循环，然后push</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      res = res.<span class="title function_">concat</span>(tmp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">7</span>, [<span class="number">8</span>]]]], <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flattern3</span>(arr3));</span><br></pre></td></tr></table></figure><h3 id="如何删除数组中第二个位置的元素，并在第二个位置添加-3-个元素"><a href="#如何删除数组中第二个位置的元素，并在第二个位置添加-3-个元素" class="headerlink" title="如何删除数组中第二个位置的元素，并在第二个位置添加 3 个元素"></a>如何删除数组中第二个位置的元素，并在第二个位置添加 3 个元素</h3><blockquote><p>数组的 splice 方法<code>arrayObject.splice(index,howmany,item1,.....,itemX)</code> 该方法对数组直接进行修改</p><ul><li>index 必需。整数，规定添加&#x2F;删除项目的位置，使用负数可从数组结尾处规定位置</li><li>howmany 必需。要删除的项目数量。如果设置为 0，则不会删除项目</li><li>item1, …, itemX 可选。向数组添加的新项目</li></ul></blockquote><h3 id="使用-function-声明的函数和使用变量接收的函数有什么区别"><a href="#使用-function-声明的函数和使用变量接收的函数有什么区别" class="headerlink" title="使用 function 声明的函数和使用变量接收的函数有什么区别"></a>使用 function 声明的函数和使用变量接收的函数有什么区别</h3><blockquote><ul><li>使用 function 声明的函数，其 this 指向 window；<strong>function fn(){}这种形式声明的函数，会被提升到作用域的最最顶部</strong></li><li>使用变量接收的函数，其 this 指向函数</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="title function_">getName</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="title function_">getName</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述两者相同就是因为 function fn()&#123;&#125;这种形式声明的函数，会被提升到作用域的最最顶部</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncaught TypeError: fn is not a function</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（4-3）</title>
      <link href="/post/3f2999be.html"/>
      <url>/post/3f2999be.html</url>
      
        <content type="html"><![CDATA[<h2 id="总的概括-vue-的双向绑定原理"><a href="#总的概括-vue-的双向绑定原理" class="headerlink" title="总的概括 vue 的双向绑定原理"></a>总的概括 vue 的双向绑定原理</h2><blockquote><p>由于上一节的双向绑定原理是分开讲的，可能我们看每一部分都理解，再最后自己统一的串起来的时候，又有点迷糊了，所以写这一节，整的描述概括一下<br>整的一个思路是没有变的，还是分为以下几个步骤去思考</p><ul><li>输入框以及文本节点与 data 中的数据绑定</li><li>输入框内容变化时，data 中的数据同步变化。即 view &#x3D;&gt; model 的变化</li><li>data 中的数据变化时，文本节点的内容同步变化。即 model &#x3D;&gt; view 的变化</li></ul></blockquote><blockquote><p>整体过程描述如下：首先初始化的过程中，需要使用 data 中的属性数据替换 html 中的变量值，所以需要使用一个 compile 编译函数，在编译 HTML 过程中，为每个与 data 关联的节点生成一个 Watcher，Watcher 会执行 update 方法，该方法首先执行 get 去获取 data 中对应 name 的值，由于 vue 的双向绑定核心使用了 Object.defineProperty，它会对 data 中的所有属性在 get 时进行劫持，然后给其添加一个订阅者（只有进行编译触发 watcher 的 update 方法，然后触发 get 的时候，才会进入到 Object.defineProperty 的 get 方法，这时候添加的 Dep.target 就是 watcher，因为 watcher 中 Dep.target &#x3D; this）到 Dep 主题对象中，之后比如触发 dom 的各种事件对 data 中的属性值进行修改的时候，Object.defineProperty 中在 set 的时候（这时候先对比值是否变化了，变化了的话，先更新值，然后通知进行重新），就会触发 Dep 的发布通知，然后执行 update 方法，这个 update 也就是 watcher 中的 update，然后触发 get 重新获取新值，然后对该节点的值进行更新</p></blockquote><p>针对以下的 dom 元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dom = <span class="title function_">nodeToFragment</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nodeToFragment</span>(<span class="params">node, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="variable language_">document</span>.<span class="title function_">createFragment</span>();</span><br><span class="line">  <span class="keyword">let</span> child;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ((child = node.<span class="property">firstChild</span>)) &#123;</span><br><span class="line">    flag.<span class="title function_">appendChild</span>(child);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、对节点进行编译</span></span><br><span class="line">  <span class="title function_">compile</span>(flag, vm);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>).<span class="title function_">appendChild</span>(dom);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compile</span>(<span class="params">node, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果节点类型为元素</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> attrs = node.<span class="property">attributes</span>;</span><br><span class="line">    <span class="comment">// 解析属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; attrs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (attrs[i].<span class="property">nodeName</span> === <span class="string">&quot;v-model&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取v-model绑定的属性名</span></span><br><span class="line">        <span class="keyword">let</span> name = attrs[i].<span class="property">nodeValue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听input事件</span></span><br><span class="line">        node.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">          vm.<span class="property">data</span>[name] = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将data中声明的对应名称的值赋值给改节点</span></span><br><span class="line">        <span class="comment">// node.value = vm.data[name];</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、在编译 HTML 过程中，为每个与 data 关联的节点生成一个 Watcher</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, node, name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为text</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(node.<span class="property">nodeValue</span>)) &#123;</span><br><span class="line">      <span class="comment">// 获取匹配到的字符串</span></span><br><span class="line">      <span class="keyword">var</span> name = <span class="title class_">RegExp</span>.<span class="property">$1</span>;</span><br><span class="line">      name = name.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">      <span class="comment">// node.nodeValue = vm.data[name];</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4、在编译 HTML 过程中，为每个与 data 关联的节点生成一个 Watcher</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, node, name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Watcher</span>(<span class="params">vm, node, name</span>) &#123;</span><br><span class="line">  <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">node</span> = node;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">  <span class="comment">// 5、触发update</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">update</span>();</span><br><span class="line">  <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Watcher</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 6、触发get</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">get</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">nodeValue</span> = <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 7、在这一步才会触发到Object.defineProperty中的get方法，也就是这时候，将watcher(订阅者)添加到了Dep主题对象中</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">vm</span>.<span class="property">data</span>[<span class="variable language_">this</span>.<span class="property">name</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dep</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subs</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dep</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">addSub</span>: <span class="keyword">function</span> (<span class="params">sub</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">notify</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">sub</span>) &#123;</span><br><span class="line">      <span class="comment">// 10、接收通知、并执行update方法，因为这里面的sub就是watcher，所以会执行watcher中的update方法</span></span><br><span class="line">      sub.<span class="title function_">update</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 8、添加订阅者watcher到主题对象Dep（因为在编译的时候，会添加一个watcher，然后Dep.targte=this，this就是watcher）</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal === val) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在这一步对值进行了更新，然后触发通知，然后执行watcher的update操作，然后触发其中的get，就又回到了Object.defineProperty中的get方法，然后循环了就</span></span><br><span class="line">      vm.<span class="property">data</span>[key] = newVal;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 9、作为发布者发出通知</span></span><br><span class="line">      dep.<span class="title function_">notify</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj, vm</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="title function_">defineReactive</span>(vm, key, obj[key]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span> = options.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> data = <span class="variable language_">this</span>.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、首先使用Object.defineProperty对Vue实例中data的所有属性进行数据劫持，在get的时候绑定订阅者，在set的时候接收通知</span></span><br><span class="line">  <span class="title function_">observe</span>(data, <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> id = options.<span class="property">el</span>;</span><br><span class="line">  <span class="comment">// 2、将元素转换为节点并进行编译</span></span><br><span class="line">  <span class="keyword">var</span> dom = <span class="title function_">nodeToFragment</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id), <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 编译完成后，将dom返回到app中</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="title function_">appendChild</span>(dom);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（5-3）</title>
      <link href="/post/f4754a1b.html"/>
      <url>/post/f4754a1b.html</url>
      
        <content type="html"><![CDATA[<h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="comment">// 检查用户是否已登录</span></span><br><span class="line">    !isAuthenticated &amp;&amp;</span><br><span class="line">    <span class="comment">// ❗️ 避免无限重定向</span></span><br><span class="line">    to.<span class="property">name</span> !== <span class="string">&quot;Login&quot;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 将用户重定向到登录页面</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上所有都同 async 函数 和 Promise 工作方式一样</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// canUserAccess() 返回 `true` 或 `false`</span></span><br><span class="line">  <span class="keyword">const</span> canAccess = <span class="keyword">await</span> <span class="title function_">canUserAccess</span>(to);</span><br><span class="line">  <span class="keyword">if</span> (!canAccess) <span class="keyword">return</span> <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="全局解析守卫"><a href="#全局解析守卫" class="headerlink" title="全局解析守卫"></a>全局解析守卫</h3><blockquote><p>这和 router.beforeEach 类似，因为它在每次导航时都会触发，不同的是，解析守卫刚好会在导航被确认之前、所有组件内守卫和异步路由组件被解析之后调用 router.beforeResolve 是获取数据或执行任何其他操作（如果用户无法进入页面时你希望避免执行的操作）的理想位置。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeResolve</span>(<span class="keyword">async</span> (to) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresCamera</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">askForCameraPermission</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">NotAllowedError</span>) &#123;</span><br><span class="line">        <span class="comment">// ... 处理错误，然后取消导航</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 意料之外的错误，取消导航并把错误传给全局处理器</span></span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h3><blockquote><p>不会接受 next 函数也不会改变导航本身<br>它们对于分析、更改页面标题、声明页面等辅助功能以及许多其他事情都很有用<br>它们也反映了 navigation failures 作为第三个参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">sendToAnalytics</span>(to.<span class="property">fullPath</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, failure</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!failure) <span class="title function_">sendToAnalytics</span>(to.<span class="property">fullPath</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h3><blockquote><p>你可以直接在路由配置上定义 beforeEnter 守卫</p><ul><li>beforeEnter 守卫 只在进入路由时触发，不会在 params、query 或 hash 改变时触发。例如，从 &#x2F;users&#x2F;2 进入到 &#x2F;users&#x2F;3 或者从 &#x2F;users&#x2F;2#info 进入到 &#x2F;users&#x2F;2#projects。它们只有在 从一个不同的 路由导航时，才会被触发</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/users/:id&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserDetails</span>,</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// reject the navigation</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h3><blockquote><p>你可以为路由组件添加以下配置：</p><ul><li>beforeRouteEnter</li><li>beforeRouteUpdate</li><li>beforeRouteLeave</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">UserDetails</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`...`</span>,</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被验证前调用</span></span><br><span class="line">    <span class="comment">// 不能获取组件实例 `this` ！</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行时，组件实例还没被创建！</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 `/users/:id`，在 `/users/1` 和 `/users/2` 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 `UserDetails` 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 因为在这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 在导航离开渲染该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 与 `beforeRouteUpdate` 一样，它可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>beforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用，因此即将登场的新组件还没被创建<br>不过，你可以通过传一个回调给 next 来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数：<br>注意 beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持 传递回调，因为没有必要了<br>这个 离开守卫 通常用来预防用户在还未保存修改前突然离开。该导航可以通过返回 false 来取消。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">  <span class="comment">// just use `this`</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = to.<span class="property">params</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> answer = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;Do you really want to leave? you have unsaved changes!&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!answer) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由元信息（meta）"><a href="#路由元信息（meta）" class="headerlink" title="路由元信息（meta）"></a>路由元信息（meta）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/posts&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">PostsLayout</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;new&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">PostsNew</span>,</span><br><span class="line">        <span class="comment">// 只有经过身份验证的用户才能创建帖子</span></span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;:id&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">PostsDetail</span></span><br><span class="line">        <span class="comment">// 任何人都可以阅读文章</span></span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">false</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 而不是去检查每条路由记录</span></span><br><span class="line">  <span class="comment">// to.matched.some(record =&gt; record.meta.requiresAuth)</span></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresAuth</span> &amp;&amp; !auth.<span class="title function_">isLoggedIn</span>()) &#123;</span><br><span class="line">    <span class="comment">// 此路由需要授权，请检查是否已登录</span></span><br><span class="line">    <span class="comment">// 如果没有，则重定向到登录页面</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="comment">// 保存我们所在的位置，以便以后再来</span></span><br><span class="line">      <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: to.<span class="property">fullPath</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（5-2）</title>
      <link href="/post/4cc92d7e.html"/>
      <url>/post/4cc92d7e.html</url>
      
        <content type="html"><![CDATA[<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><h3 id="路由传参的几种形式"><a href="#路由传参的几种形式" class="headerlink" title="路由传参的几种形式"></a>路由传参的几种形式</h3><pre><code>静态路由</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面中定义和使用的方式</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--使用 router-link 组件进行导航 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--通过传递 `to` 来指定链接 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--`&lt;router-link&gt;` 将呈现一个带有正确 `href` 属性的 `&lt;a&gt;` 标签--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Go to Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>Go to About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// js文件中定义</span></span><br><span class="line"><span class="language-xml">// 1. 定义路由组件，也可以从其他文件导入</span></span><br><span class="line"><span class="language-xml">const Home = &#123; template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27; &#125;</span></span><br><span class="line"><span class="language-xml">const About = &#123; template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>About<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27; &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 2. 定义一些路由，每个路由都需要映射到一个组件</span></span><br><span class="line"><span class="language-xml">const routes = [</span></span><br><span class="line"><span class="language-xml">  &#123; path: &#x27;/&#x27;, component: Home &#125;,</span></span><br><span class="line"><span class="language-xml">  &#123; path: &#x27;/about&#x27;, component: About &#125;,</span></span><br><span class="line"><span class="language-xml">]</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 3. 创建路由实例并传递 `routes` 配置</span></span><br><span class="line"><span class="language-xml">const router = VueRouter.createRouter(&#123;</span></span><br><span class="line"><span class="language-xml">  // 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。</span></span><br><span class="line"><span class="language-xml">  history: VueRouter.createWebHashHistory(),</span></span><br><span class="line"><span class="language-xml">  // `routes: routes` 的缩写</span></span><br><span class="line"><span class="language-xml">  routes,</span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 5. 创建并挂载根实例</span></span><br><span class="line"><span class="language-xml">const app = Vue.createApp(&#123;&#125;)</span></span><br><span class="line"><span class="language-xml">// 确保 _use_ 路由实例使，整个应用支持路由。</span></span><br><span class="line"><span class="language-xml">app.use(router)</span></span><br><span class="line"><span class="language-xml">app.mount(&#x27;#app&#x27;)</span></span><br></pre></td></tr></table></figure><blockquote><p>通过调用 app.use(router)，我们会触发第一次导航且可以在任意组件中以 this.$router 的形式访问它，并且以 this.$route 的形式访问当前路由：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">username</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 我们很快就会看到 `params` 是什么</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">username</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">goToDashboard</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isAuthenticated) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/dashboard&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre><code>动态路由</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这些都会传递给 `createRouter`</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// 动态字段以冒号开始</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/users/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>你可以在同一个路由中设置有多个 路径参数，它们会映射到 $route.params 上的相应字段。例如：</p><table><thead><tr><th>匹配模式</th><th align="center">匹配路径</th><th>$route.params</th></tr></thead><tbody><tr><td>&#x2F;users&#x2F;:username</td><td align="center">&#x2F;users&#x2F;eduardo</td><td>{ username: ‘eduardo’ }</td></tr><tr><td>&#x2F;users&#x2F;:username&#x2F;posts&#x2F;:postId</td><td align="center">&#x2F;users&#x2F;eduardo&#x2F;posts&#x2F;123</td><td>{ username: ‘eduardo’, postId: ‘123’ }</td></tr></tbody></table><p>除了 $route.params 之外，$route 对象还公开了其他有用的信息，如 $route.query（如果 URL 中存在参数）、$route.hash 等</p></blockquote><pre><code>你也可以通过使用 ? 修饰符(0 个或 1 个)将一个参数标记为可选：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// 匹配 /users 和 /users/posva</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/users/:userId?&quot;</span> &#125;,</span><br><span class="line">  <span class="comment">// 匹配 /users 和 /users/42</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/users/:userId(\\d+)?&quot;</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><pre><code>嵌套路由</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要将组件渲染到这个嵌套的 router-view 中，我们需要在路由中配置 children：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/profile 匹配成功</span></span><br><span class="line">        <span class="comment">// UserProfile 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;profile&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">UserProfile</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/posts 匹配成功</span></span><br><span class="line">        <span class="comment">// UserPosts 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;posts&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">UserPosts</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>此时，按照上面的配置，当你访问 &#x2F;user&#x2F;eduardo 时，在 User 的 router-view 里面什么都不会呈现，因为没有匹配到嵌套路由。也许你确实想在那里渲染一些东西。在这种情况下，你可以提供一个空的嵌套路径：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">// 当 /user/:id 匹配成功</span></span><br><span class="line">      <span class="comment">// UserHome 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserHome</span> &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ...其他子路由</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><pre><code>嵌套的命名路由</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="comment">// 请注意，只有子路由具有名称</span></span><br><span class="line">    <span class="attr">children</span>: [&#123; <span class="attr">path</span>: <span class="string">&quot;&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserHome</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><ul><li>声明式路由：<router-link :to="..."></li><li>编程式路由：router.push(…)</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&quot;/users/eduardo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有路径的对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/users/eduardo&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由，并加上参数，让路由建立 url</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&quot;eduardo&quot;</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，结果是 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&quot;private&quot;</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带 hash，结果是 /about#team</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>, <span class="attr">hash</span>: <span class="string">&quot;#team&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path ：</span></span><br><span class="line"><span class="keyword">const</span> username = <span class="string">&quot;eduardo&quot;</span>;</span><br><span class="line"><span class="comment">// 我们可以手动建立 url，但我们必须自己处理编码 -&gt; /user/eduardo</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// 同样 -&gt; /user/eduardo</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span> &#125;);</span><br><span class="line"><span class="comment">// 如果可能的话，使用 `name` 和 `params` 从自动 URL 编码中获益  -&gt; /user/eduardo</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>, <span class="attr">params</span>: &#123; username &#125; &#125;);</span><br><span class="line"><span class="comment">// `params` 不能与 `path` 一起使用   -&gt; /user</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>, <span class="attr">params</span>: &#123; username &#125; &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 横跨历史</span></span><br><span class="line"><span class="comment">// 向前移动一条记录，与 router.forward() 相同</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一条记录，与 router.back() 相同</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前进 3 条记录</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有那么多记录，静默失败</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">100</span>);</span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><pre><code>router.push、router.replace 和 router.go 是 window.history.pushState、window.history.replaceState 和 window.history.go 的翻版命名路由</code></pre><blockquote><p>除了 path 之外，你还可以为任何路由提供 name。这有以下优点：</p><ul><li>没有硬编码的 URL</li><li>params 的自动编码&#x2F;解码</li><li>防止你在 url 中出现打字错误</li><li>绕过路径排序（如显示一个）</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:username&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要链接到一个命名的路由，可以向 router-link 组件的 to 属性传递一个对象：</span></span><br><span class="line">&lt;router-link :to=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123; username: &#x27;erina&#x27; &#125;&#125;&quot;</span>&gt;</span><br><span class="line">  <span class="title class_">User</span></span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这跟代码调用 router.push() 是一回事：</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;erina&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两种情况下，路由将导航到路径 /user/erina</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>重定向：<code>const routes = [&#123; path: &#39;/home&#39;, redirect: &#39;/&#39; &#125;]</code></li><li>重定向的目标也可以是一个命名的路由：const routes &#x3D; [{ path: ‘&#x2F;home’, redirect: { name: ‘homepage’ } }]</li><li>甚至是一个方法，动态返回重定向目标：</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// /search/screens -&gt; /search?q=screens</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/search/:searchText&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 方法接收目标路由作为参数</span></span><br><span class="line">      <span class="comment">// return 重定向的字符串路径/路径对象</span></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">path</span>: <span class="string">&quot;/search&quot;</span>, <span class="attr">query</span>: &#123; <span class="attr">q</span>: to.<span class="property">params</span>.<span class="property">searchText</span> &#125; &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/search&quot;</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><pre><code>相对重定向</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 将总是把/users/123/posts重定向到/users/123/profile。</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/users/:id/posts&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 该函数接收目标路由作为参数</span></span><br><span class="line">      <span class="comment">// 相对位置不以`/`开头</span></span><br><span class="line">      <span class="comment">// 或 &#123; path: &#x27;profile&#x27;&#125;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;profile&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>别名</p><blockquote><ul><li>通过别名，你可以自由地将 UI 结构映射到一个任意的 URL，而不受配置的嵌套结构的限制。使别名以 &#x2F; 开头，以使嵌套路径中的路径成为绝对路径。你甚至可以将两者结合起来，用一个数组提供多个别名：</li><li>如果你的路由有参数，请确保在任何绝对别名中包含它们</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: <span class="title class_">Homepage</span>, <span class="attr">alias</span>: <span class="string">&quot;/home&quot;</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/users&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UsersLayout</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">// 为这 3 个 URL 呈现 UserList</span></span><br><span class="line">      <span class="comment">// - /users</span></span><br><span class="line">      <span class="comment">// - /users/list</span></span><br><span class="line">      <span class="comment">// - /people</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserList</span>, <span class="attr">alias</span>: [<span class="string">&quot;/people&quot;</span>, <span class="string">&quot;list&quot;</span>] &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/users/:id&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UsersByIdLayout</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">// 为这 3 个 URL 呈现 UserDetails</span></span><br><span class="line">      <span class="comment">// - /users/24</span></span><br><span class="line">      <span class="comment">// - /users/24/profile</span></span><br><span class="line">      <span class="comment">// - /24</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;profile&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserDetails</span>, <span class="attr">alias</span>: [<span class="string">&quot;/:id&quot;</span>, <span class="string">&quot;&quot;</span>] &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="路由组件传参"><a href="#路由组件传参" class="headerlink" title="路由组件传参"></a>路由组件传参</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述可以替换为</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="comment">// 请确保添加一个与路由参数完全相同的 prop 名</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;id&quot;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;User &#123;&#123; id &#125;&#125;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;];</span><br></pre></td></tr></table></figure><pre><code>布尔模式：当 props 设置为 true 时，route.params 将被设置为组件的 props。命名视图：对于有命名视图的路由，你必须为每个命名视图定义 props 配置</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="attr">default</span>: <span class="title class_">User</span>, <span class="attr">sidebar</span>: <span class="title class_">Sidebar</span> &#125;,</span><br><span class="line">    <span class="attr">props</span>: &#123; <span class="attr">default</span>: <span class="literal">true</span>, <span class="attr">sidebar</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><pre><code>对象模式</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/search&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">SearchUser</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="function">(<span class="params">route</span>) =&gt;</span> (&#123; <span class="attr">query</span>: route.<span class="property">query</span>.<span class="property">q</span> &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//  /search?q=vue 将传递 &#123;query: &#x27;vue&#x27;&#125; 作为 props 传给 SearchUser 组件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（5-1）</title>
      <link href="/post/5e7c8290.html"/>
      <url>/post/5e7c8290.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>今天下午进行了又一个面试，今天的这个面试主要针对的是 vue，vue 部分我觉得回答的还可以，但是后面又被问到 vue-router（路由），这个还没有复习到，就是凭感觉回答了一点，很不好，然后就结束了，可能又凉了</p><h3 id="vue-的生命周期，父子生命周期的执行顺序"><a href="#vue-的生命周期，父子生命周期的执行顺序" class="headerlink" title="vue 的生命周期，父子生命周期的执行顺序"></a>vue 的生命周期，父子生命周期的执行顺序</h3><blockquote><p>挂载阶段记住，其他的比较容易记：父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p></blockquote><h3 id="ES6-的一些新增方法，列举四五个"><a href="#ES6-的一些新增方法，列举四五个" class="headerlink" title="ES6 的一些新增方法，列举四五个"></a>ES6 的一些新增方法，列举四五个</h3><blockquote><p>let、const、解构赋值、filter、箭头函数</p></blockquote><h3 id="const-定义的对象中的属性值能否修改"><a href="#const-定义的对象中的属性值能否修改" class="headerlink" title="const 定义的对象中的属性值能否修改"></a>const 定义的对象中的属性值能否修改</h3><p>const 定义的基础变量是不能修改的，对象可以，因为 const 的变量指向的是对象的内存地址</p><h3 id="vue-的双向数据绑定原理"><a href="#vue-的双向数据绑定原理" class="headerlink" title="vue 的双向数据绑定原理"></a>vue 的双向数据绑定原理</h3><p>这个问题上午刚被问过，然后中午我总结了以下，回答的还可以，这个问题可以在面试的 4-2 去看，解释的很详细</p><h3 id="vue-访问服务端，在哪个生命周期"><a href="#vue-访问服务端，在哪个生命周期" class="headerlink" title="vue 访问服务端，在哪个生命周期"></a>vue 访问服务端，在哪个生命周期</h3><p>这个问题问的挺多的，mounted</p><h3 id="promise-的-all-和-race，以及在哪些场景使用"><a href="#promise-的-all-和-race，以及在哪些场景使用" class="headerlink" title="promise 的 all 和 race，以及在哪些场景使用"></a>promise 的 all 和 race，以及在哪些场景使用</h3><blockquote><p>promise.all 可以将多个 Promise 实例包装成一个新的 Promise 实例。用于将多个 Promise 实例，包装成一个新的 Promise 实例</p><ul><li>它接受一个数组作为参数</li><li>数组可以是 Promise 对象，也可以是其它值，只有 Promise 会等待状态改变</li><li>当所有的子 Promise 都完成，该 Promise 完成，返回值是全部值的数组</li><li>如果有任何一个失败，该 Promise 失败，返回值是第一个失败的子 Promise 的结果</li><li><strong>使用场景：需要从不同的接口获取数据，并且两部分数据需要同时获得展示</strong></li></ul><p>类似于 Promise.all() ,区别在于 它有任意一个返回成功后，就算完成，但是 进程不会立即停止。常见使用场景：把异步操作和定时器放到一起，如果定时器先触发，认为超时，告知用户</p><ul><li><strong>使用场景：点击按钮发请求，当后端的接口超过一定时间，假设超过三秒，没有返回结果，我们就提示用户请求超时</strong></li></ul></blockquote><h3 id="vue-中父子通信的方式"><a href="#vue-中父子通信的方式" class="headerlink" title="vue 中父子通信的方式"></a>vue 中父子通信的方式</h3><pre><code>props 和 $emit、.async 修饰符、$refs（父组件访问子组件的数据和方法）、$parent（子组件访问父组件的数据和方法）、provide + inject、$attrs + $listeners</code></pre><blockquote><ul><li>props 和 $emit：父组件向子组件传递数据 :toods&#x3D;”todos” 传递函数 :deleteTodo&#x3D;”deleteTodo” 子组件接收：props: [‘todos’, ‘deleteTodo’]，也可以在接收的时候声明类型 props: { deleteTodo: { type: Function, required: true }}</li></ul></blockquote><p>props 的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串数组形式：</span></span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;likes&#x27;</span>, <span class="string">&#x27;isPublished&#x27;</span>, <span class="string">&#x27;commentIds&#x27;</span>, <span class="string">&#x27;author&#x27;</span>]</span><br><span class="line"><span class="comment">// 指定 props 值类型：</span></span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">likes</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">isPublished</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  <span class="attr">commentIds</span>: <span class="title class_">Array</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="title class_">Object</span>,</span><br><span class="line">  <span class="attr">callback</span>: <span class="title class_">Function</span>,</span><br><span class="line">  <span class="attr">contactsPromise</span>: <span class="title class_">Promise</span>,</span><br><span class="line">  <span class="attr">propE</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">    <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">    <span class="attr">default</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义验证函数</span></span><br><span class="line">  <span class="attr">propF</span>: &#123;</span><br><span class="line">    <span class="attr">validator</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="父子组件通信方式：props-和-emit-使用"><a href="#父子组件通信方式：props-和-emit-使用" class="headerlink" title="父子组件通信方式：props 和 $emit 使用"></a>父子组件通信方式：props 和 $emit 使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ChildrenDemo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeParentTitle&quot;</span>&gt;</span>点击更改父组件title<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">changeParentTitle</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 第一个参数是提交的事件名，后面的参数可以是多个需要传递给父组件的参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;childEvent&quot;</span>, <span class="string">&quot;子组件传给父组件的title&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件title值：&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">    <span class="tag">&lt;<span class="name">ChildrenDemo</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span> @<span class="attr">childEvent</span>=<span class="string">&quot;changeTitle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ChildrenDemo</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&lt;script&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">ChildrenDemo</span> <span class="keyword">from</span> <span class="string">&quot;@/views/components/ChildrenDemo&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">ChildrenDemo</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">title</span>: <span class="string">&quot;My Journey with Vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">changeTitle</span>: <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">title</span> = str</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="父子组件通信方式：-async-修饰符使用"><a href="#父子组件通信方式：-async-修饰符使用" class="headerlink" title="父子组件通信方式：.async 修饰符使用"></a>父子组件通信方式：.async 修饰符使用</h3><blockquote><ul><li>一般情况下，子组件不能直接修改从父组件接收的属性值，否则会报错，如果子组件需要接收值后处理再使用，可以将接收的值赋值给子组件本身的属性，如 data 中的属性或计算属性。如果希望子组件 prop 父组件中的值改变时，将变化同步到父组件中，可使用事件监听或**.sync 修饰符**</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;h1&gt;父组件title值：&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ChildrenDemo</span> <span class="attr">:title.sync</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ChildrenDemo</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ChildrenDemo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;childTitle&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 接收的父组件的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&quot;title&quot;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 在computed中处理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">childTitle</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">title</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 更新父组件中的title</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.$emit(<span class="string">&quot;update:title&quot;</span>, val);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><ul><li>如果要将一个对象的所有 property 都作为 prop 传入，你可以使用不带参数的 v-bind 比如 post: {id: 1,title: ‘My Journey with Vue’} 传递给子组件 <blog-post v-bind="post"></blog-post></li></ul></blockquote><h3 id="父子组件通信方式：-refs（父组件访问子组件的数据和方法）使用"><a href="#父子组件通信方式：-refs（父组件访问子组件的数据和方法）使用" class="headerlink" title="父子组件通信方式：$refs（父组件访问子组件的数据和方法）使用"></a>父子组件通信方式：$refs（父组件访问子组件的数据和方法）使用</h3><blockquote><ul><li>父组件使用 $refs 可以访问子组件的数据和方法，使用时需在调用子组件时给子组件定义一个 ref 名</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;<span class="title class_">ChildrenDemo</span> ref=<span class="string">&quot;childrenDemo&quot;</span>&gt;&lt;/<span class="title class_">ChildrenDemo</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getChildData&quot;</span>&gt;</span>点击获取子组件数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="attr">getChildData</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取子组件实例</span></span><br><span class="line">  <span class="keyword">let</span> child = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">childrenDemo</span></span><br><span class="line">  <span class="comment">// 访问子组件属性</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">value</span>);</span><br><span class="line">  <span class="comment">// 调用子组件的childFn()方法</span></span><br><span class="line">  child.<span class="title function_">childFn</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>$refs 只会在组件渲染完成之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的“逃生舱”——你应该避免在模板或计算属性中访问 $refs。</li><li>由于 ref 需要在 dom 渲染完成后才会有，在使用的时候确保 dom 已经渲染完成。比如在生命周期 mounted(){} 钩子中调用，或者在 this.$nextTick(()&#x3D;&gt;{}) 中调用。</li></ul></blockquote><h3 id="父子组件通信方式：-parent（子组件访问父组件的数据和方法）使用"><a href="#父子组件通信方式：-parent（子组件访问父组件的数据和方法）使用" class="headerlink" title="父子组件通信方式：$parent（子组件访问父组件的数据和方法）使用"></a>父子组件通信方式：$parent（子组件访问父组件的数据和方法）使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;button @click=<span class="string">&quot;getParentData&quot;</span>&gt;点击获取父组件数据&lt;/button&gt;</span><br><span class="line"><span class="title function_">getParentData</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 获取父组件实例</span></span><br><span class="line">  <span class="keyword">let</span> parent = <span class="variable language_">this</span>.<span class="property">$parent</span></span><br><span class="line">  <span class="comment">// 访问父组件属性</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(parent.<span class="property">parentValue</span>)</span><br><span class="line">  <span class="comment">// 调用父组件的方法parentFn()</span></span><br><span class="line">  parent.<span class="title function_">parentFn</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="父子组件通信方式：provide-inject-使用"><a href="#父子组件通信方式：provide-inject-使用" class="headerlink" title="父子组件通信方式：provide + inject 使用"></a>父子组件通信方式：provide + inject 使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Child</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">provide</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;周帅帅&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">inject</span>: [<span class="string">&#x27;name&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="父子组件通信方式：-attrs-listeners-使用"><a href="#父子组件通信方式：-attrs-listeners-使用" class="headerlink" title="父子组件通信方式：$attrs + $listeners 使用"></a>父子组件通信方式：$attrs + $listeners 使用</h3><blockquote><ul><li>我们在父组件(Parent.vue)中向子组件(Child.vue)传递 name 和 age，我们在父组件(Parent.vue)中定义了一个 parentName 事件监听器</li><li>我们在子组件(Child.vue)中可以通过 $listeners 获取到父组件(Parent.vue)中的 parentName，这样我们就能执行父组件(Parent.vue)中绑定的事件处理函数(changeName)。然后我们在子组件(Child.vue)里面引入孙子组件(GrandChild.vue)，将父组件(Parent.vue)传递给子组件(Child.vue)的 name 和 age 通过 v-bind&#x3D;”$attrs” 传递给孙子组件(GrandChild.vue)。</li><li>这样我们在孙子组件(GrandChild.vue)中就可以接收子组件(Child.vue)传递过来的 name 和 age 了。然后通过 $attrs.name 和 $attrs.age 来使用。</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;age&quot;</span> @<span class="attr">parentName</span>=<span class="string">&quot;changeName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Child</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;周帅帅&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">age</span>: <span class="number">24</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;小夏&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$listeners.parentName&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    // $attrs相当于子组件向孙子组件传递:name=&quot;name&quot; :age=&quot;age&quot;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">GrandChild</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">GrandChild</span> <span class="keyword">from</span> <span class="string">&#x27;./GrandChild.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">GrandChild</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 孙子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>孙子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：&#123;&#123; $attrs.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123; $attrs.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 如果不加这个属性，我们发现div中会携带name和age这两个属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">inheritAttrs</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（4-2）</title>
      <link href="/post/8795fedb.html"/>
      <url>/post/8795fedb.html</url>
      
        <content type="html"><![CDATA[<h2 id="理解-vue-的双向绑定原理"><a href="#理解-vue-的双向绑定原理" class="headerlink" title="理解 vue 的双向绑定原理"></a>理解 vue 的双向绑定原理</h2><pre><code>使用以下代码，理解 vue 双向绑定原理</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123; text &#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;hello world&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>首先将该任务分成几个子任务：</p><ul><li>输入框以及文本节点与 data 中的数据绑定</li><li>输入框内容变化时，data 中的数据同步变化。即 view &#x3D;&gt; model 的变化</li><li>data 中的数据变化时，文本节点的内容同步变化。即 model &#x3D;&gt; view 的变化</li></ul></blockquote><blockquote><ul><li>要实现任务一，需要对 DOM 进行编译，这里有一个知识点：DocumentFragment</li><li>DocumentFragment（文档片段）可以看作节点容器，它可以包含多个子节点，当我们将它插入到 DOM 中时，只有它的子节点会插入目标节点，所以把它看作一组节点的容器。使用 DocumentFragment 处理节点，速度和性能远远优于直接操作 DOM。Vue 进行编译时，就是将挂载目标的所有子节点劫持（真的是劫持，通过 append 方法，DOM 中的节点会被自动删除）到 DocumentFragment 中，经过一番处理后，再将 DocumentFragment 整体返回插入挂载目标。</li></ul></blockquote><pre><code>具体过程如下代码所示：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> dom = <span class="title function_">nodeToFragment</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">nodeToFragment</span>(<span class="params">node</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> flag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> child;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">while</span>(child = node.<span class="property">firstChild</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      flag.<span class="title function_">appendChild</span>(child);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> flag;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>).<span class="title function_">appendChild</span>(dom);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><pre><code>接下来是进行数据的初始化绑定:</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compile</span>(<span class="params">node, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为元素</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> attr = ndoe.<span class="property">attributes</span>;</span><br><span class="line">    <span class="comment">// 解析属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; attr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (attr[i].<span class="property">nodeName</span> == <span class="string">&quot;v-model&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取v-model绑定的属性名</span></span><br><span class="line">        <span class="keyword">var</span> name = attr[i].<span class="property">nodeValue</span>;</span><br><span class="line">        <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">        node.<span class="property">value</span> = vm.<span class="property">data</span>[name];</span><br><span class="line"></span><br><span class="line">        node.<span class="title function_">removeAttribute</span>(<span class="string">&quot;v-model&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为text</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(node.<span class="property">nodeValue</span>)) &#123;</span><br><span class="line">      <span class="comment">// 获取匹配到的字符串</span></span><br><span class="line">      <span class="keyword">var</span> name = <span class="title class_">RegExp</span>.<span class="property">$1</span>;</span><br><span class="line">      name = name.<span class="title function_">trim</span>();</span><br><span class="line">      <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">      node.<span class="property">nodeValue</span> = vm.<span class="property">data</span>[name];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">nodeToFragment</span>(<span class="params">node, vm</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">    <span class="keyword">var</span> child;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((child = node.<span class="property">firstChild</span>)) &#123;</span><br><span class="line">      <span class="comment">// 针对每一个节点，判断节点类型，根据包含的属性，进行赋值</span></span><br><span class="line">      <span class="title function_">compile</span>(child, vm);</span><br><span class="line"></span><br><span class="line">      flag.<span class="title function_">appendChild</span>(child);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值完毕，再将节点返回</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Vue</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = options.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">var</span> id = options.<span class="property">el</span>;</span><br><span class="line">    <span class="keyword">var</span> dom = <span class="title function_">nodeToFragment</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id), <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译完成后，将dom返回到app中</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="title function_">appendChild</span>(dom);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>上述工作可以完成任务一：输入框以及文本节点与 data 中的数据绑定接下来是进行 响应式的数据绑定：</code></pre><blockquote><p>再来看任务二的实现思路：当我们在输入框输入数据的时候，首先触发 input 事件（或者 keyup、change 事件），在相应的事件处理程序中，我们获取输入框的 value 并赋值给 vm 实例的 text 属性。我们会利用 defineProperty 将 data 中的 text 设置为 vm 的访问器属性，因此给 vm.text 赋值，就会触发 set 方法。在 set 方法中主要做两件事，第一是更新属性的值，第二留到任务三再说。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="title function_">fcuntion</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(newVal === val) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      val = newVal;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj, vm</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="title function_">defineReactive</span>(vm, key, obj[key]);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span> = options.<span class="property">data</span>;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="variable language_">this</span>.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">observe</span>(data, <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> id = options.<span class="property">el</span>;</span><br><span class="line">  <span class="keyword">var</span> dom = <span class="title function_">nodeToFragment</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id), <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 编译完成后，将dom返回到app中</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="title function_">appendChild</span>(dom);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compile</span>(<span class="params">node, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为元素</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> attr = ndoe.<span class="property">attributes</span>;</span><br><span class="line">    <span class="comment">// 解析属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; attr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (attr[i].<span class="property">nodeName</span> == <span class="string">&quot;v-model&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取v-model绑定的属性名</span></span><br><span class="line">        <span class="keyword">var</span> name = attr[i].<span class="property">nodeValue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听input事件</span></span><br><span class="line">        node.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">          vm.<span class="property">data</span>[name] = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">        node.<span class="property">value</span> = vm.<span class="property">data</span>[name];</span><br><span class="line"></span><br><span class="line">        node.<span class="title function_">removeAttribute</span>(<span class="string">&quot;v-model&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为text</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(node.<span class="property">nodeValue</span>)) &#123;</span><br><span class="line">      <span class="comment">// 获取匹配到的字符串</span></span><br><span class="line">      <span class="keyword">var</span> name = <span class="title class_">RegExp</span>.<span class="property">$1</span>;</span><br><span class="line">      name = name.<span class="title function_">trim</span>();</span><br><span class="line">      <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">      node.<span class="property">nodeValue</span> = vm.<span class="property">data</span>[name];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>之后进行 订阅/发布模式（subscribe &amp; publish）</code></pre><blockquote><p>text 属性变化了，set 方法触发了，但是文本节点的内容没有变化。如何让同样绑定到 text 的文本节点也同步变化呢？这里又有一个知识点：订阅发布模式。订阅发布模式（又称观察者模式）定义了一种一对多的关系，让多个观察者同时监听某一个主题对象，这个主题对象的状态发生改变时就会通知所有观察者对象。发布者发出通知 &#x3D;&gt; 主题对象收到通知并推送给订阅者 &#x3D;&gt; 订阅者执行相应操作</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pub = &#123;</span><br><span class="line">  <span class="attr">publish</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    dep.<span class="title function_">notify</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三个订阅者</span></span><br><span class="line"><span class="keyword">var</span> sub1 = &#123;</span><br><span class="line">  <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sub2 = &#123;</span><br><span class="line">  <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sub3 = &#123;</span><br><span class="line">  <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个主题对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dep</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subs</span> = [sub1, sub2, sub3];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dep</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">notify</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">sub</span>) &#123;</span><br><span class="line">    sub.<span class="title function_">update</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布订阅者消息，主题对象执行notify方法，进而触发订阅者执行update方法</span></span><br><span class="line"><span class="keyword">var</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span><br><span class="line">pub.<span class="title function_">publish</span>();</span><br></pre></td></tr></table></figure><blockquote><p>之前提到的，当 set 方法触发后做的第二件事就是作为发布者发出通知：“我是属性 text，我变了”。文本节点则是作为订阅者，在收到消息后执行相应的更新操作。</p></blockquote><pre><code>双向绑定的实现：</code></pre><blockquote><p>回顾一下，每当 new 一个 Vue，主要做了两件事：第一个是监听数据：observe(data)，第二个是编译 HTML：nodeToFragement(id)。在监听数据的过程中，会为 data 中的每一个属性生成一个主题对象 dep。在编译 HTML 的过程中，会为每个与数据绑定相关的节点生成一个订阅者 watcher，watcher 会将自己添加到相应属性的 dep 中。我们已经实现：修改输入框内容 &#x3D;&gt; 在事件回调函数中修改属性值 &#x3D;&gt; 触发属性的 set 方法。接下来我们要实现的是：发出通知 dep.notify() &#x3D;&gt; 触发订阅者的 update 方法 &#x3D;&gt; 更新视图。这里的关键逻辑是：如何将 watcher 添加到关联属性的 dep 中。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compile</span>(<span class="params">node, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为元素</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> attr = ndoe.<span class="property">attributes</span>;</span><br><span class="line">    <span class="comment">// 解析属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; attr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (attr[i].<span class="property">nodeName</span> == <span class="string">&quot;v-model&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取v-model绑定的属性名</span></span><br><span class="line">        <span class="keyword">var</span> name = attr[i].<span class="property">nodeValue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听input事件</span></span><br><span class="line">        node.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">          vm.<span class="property">data</span>[name] = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">        node.<span class="property">value</span> = vm.<span class="property">data</span>[name];</span><br><span class="line"></span><br><span class="line">        node.<span class="title function_">removeAttribute</span>(<span class="string">&quot;v-model&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为text</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(node.<span class="property">nodeValue</span>)) &#123;</span><br><span class="line">      <span class="comment">// 获取匹配到的字符串</span></span><br><span class="line">      <span class="keyword">var</span> name = <span class="title class_">RegExp</span>.<span class="property">$1</span>;</span><br><span class="line">      name = name.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">      <span class="comment">// node.nodeValue = vm.data[name];</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在编译 HTML 过程中，为每个与 data 关联的节点生成一个 Watcher。</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, node, name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Watcher</span>(<span class="params">vm, node, name</span>) &#123;</span><br><span class="line">  <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">node</span> = node;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">update</span>();</span><br><span class="line">  <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Watcher</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">get</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">nodeValue</span> = <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">vm</span>.<span class="property">data</span>[<span class="variable language_">this</span>.<span class="property">name</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>首先，将自己赋给了一个全局变量 Dep.target；其次，执行了 update 方法，进而执行了 get 方法，get 的方法读取了 vm 的访问器属性，从而触发了访问器属性的 get 方法，get 方法中将该 watcher 添加到了对应访问器属性的 dep 中；再次，获取属性的值，然后更新视图。最后，将 Dep.target 设为空。因为它是全局变量，也是 watcher 与 dep 关联的唯一桥梁，任何时刻都必须保证 Dep.target 只有一个值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 添加订阅者watcher到主题对象Dep</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="title class_">Dep</span>.<span class="property">target</span>) dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>);</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="title function_">fcuntion</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(newVal === val) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      val = newVal;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 作为发布者发出通知</span></span><br><span class="line">      dep.<span class="title function_">notify</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dep</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subs</span> = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dep</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">addSub</span>: <span class="keyword">function</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">notify</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">      sub.<span class="title function_">update</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>至此，hello world 双向绑定就基本实现了。文本内容会随输入框内容同步变化，在控制器中修改 vm.text 的值，会同步反映到文本内容中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（4-1）</title>
      <link href="/post/95205135.html"/>
      <url>/post/95205135.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><pre><code>今天上午进行了一个面试（这次的面试官是个小哥），今天问的问题是和 vue 相关的，回答的过程相比之前可能又好了一点，成功与否，这个我还真不知道</code></pre><h3 id="vue-的双向绑定"><a href="#vue-的双向绑定" class="headerlink" title="vue 的双向绑定"></a>vue 的双向绑定</h3><blockquote><p>这个问题我可能回答的不太好，我说的是具体如何操作的，比如通过 data 去和页面绑定，data 来控制页面的展示，页面上的事件修改 data，形成一种双向。但是这个问题应该回答 defineProperty，双向绑定其原理是通过数据劫持+发布订阅模式相结合的方式来是实现的，简单来说就是数据层发生变化的时候，可同布更新视图层，当视图层发生变化的时候，同步更新数据层。通过 Object.defineProperty 对 data 的所有属性进行重新定义，给数据的获取和设置进行一个拦截功能（就是数据劫持），当 getter 获取数据的时候，就会给当前数据一个依赖收集（就是订阅者 Watcher），当数据 setter 更新时，就会通知对应的订阅者，进行视图更新如何视图更新呢？这我们需要一个，compile 解析模板指令，将模板中的变量替换成数据，绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图。</p></blockquote><h3 id="如何实现一个轮播图"><a href="#如何实现一个轮播图" class="headerlink" title="如何实现一个轮播图"></a>如何实现一个轮播图</h3><blockquote><p>首先，在一个 div 盒子中定义你需要轮播的图片，使用 css 控制图片在 div 中一行显示（overflow: hidden），设置一个定时器，一秒执行一次，主要控制的是图片的 margin-left 值（负值，这样才能让图片左移），到达最后一张以后，在回到第一张（margin-left 为 0）</p></blockquote><h3 id="less、sass-相对于-css-是什么"><a href="#less、sass-相对于-css-是什么" class="headerlink" title="less、sass 相对于 css 是什么"></a>less、sass 相对于 css 是什么</h3><pre><code>是一种预处理器</code></pre><h3 id="computed-和-watch-的区别以及什么时候用"><a href="#computed-和-watch-的区别以及什么时候用" class="headerlink" title="computed 和 watch 的区别以及什么时候用"></a>computed 和 watch 的区别以及什么时候用</h3><blockquote><p>computed 是对现有属性进行处理，返回一个新的属性值，有缓存。computed 是需要对数据进行处理的时候使用（比如展现格式）<br>watch 是对现有属性的一种监听。是在属性变化时，需要执行异步或者开销大的时候使用</p></blockquote><h3 id="vue-的生命周期以及调用后端在哪个生命周期"><a href="#vue-的生命周期以及调用后端在哪个生命周期" class="headerlink" title="vue 的生命周期以及调用后端在哪个生命周期"></a>vue 的生命周期以及调用后端在哪个生命周期</h3><blockquote><p>beforeCreate created beforeMount mounted beforeUpdate updated beforeDestroy destroyed<br>如果调用的是 data 中的数据，或者 methods 中的方法可以在 created 中，发请求如果需要操作 dom 就需要在 mounted 中</p></blockquote><h3 id="如果想在-jquery-上实现自己的方法，怎么做"><a href="#如果想在-jquery-上实现自己的方法，怎么做" class="headerlink" title="如果想在 jquery 上实现自己的方法，怎么做"></a>如果想在 jquery 上实现自己的方法，怎么做</h3><blockquote><p>如果是一个方法可以直接：$.fn.myFunc &#x3D; function() { … }<br>如果有多个方法，可以：$.fn.extend({<br>“myfunc1”: function() { … },<br>“myFunc2”: function() { … }<br>})</p></blockquote><h3 id="数据的深拷贝"><a href="#数据的深拷贝" class="headerlink" title="数据的深拷贝"></a>数据的深拷贝</h3><blockquote><ul><li>如果是简单的对象，也就是对象中只有一些简单的值变量，没有嵌套的对象的话，可以使用解构赋值，或者 Json.parse(Json.stringify(obj))</li><li>如果 hi 复杂的对象，对象中包含对象的，那就需要写一个方法，对其进行遍历，直到都是值变量</li></ul></blockquote><h3 id="闭包是什么，是为了解决什么问题的，什么时候使用"><a href="#闭包是什么，是为了解决什么问题的，什么时候使用" class="headerlink" title="闭包是什么，是为了解决什么问题的，什么时候使用"></a>闭包是什么，是为了解决什么问题的，什么时候使用</h3><blockquote><p>「函数」和「函数内部能访问到的变量」的总和，就是一个闭包。可以把闭包简单理解成”定义在一个函数内部的函数”。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁</p><ul><li>闭包为什么需要嵌套函数呢？是因为需要局部变量，所以才把 local 放在一个函数里，如果不把 local 放在一个函数里，local 就是一个全局变量了，达不到使用闭包的目的——隐藏变量（如果没有局部变量，那就是全局变量，但全局变量可能会把值修改成范围外的值）</li><li>闭包为什么最后需要 return 一个函数呢？因为如果不 return，你就无法使用这个闭包。把 return bar 改成 window.bar &#x3D; bar 也是一样的，只要让外面可以访问到这个 bar 函数就行了</li><li>闭包常常用来「间接访问一个变量」。换句话说，「隐藏一个变量」</li><li><strong>变量的作用域是在函数定义声明的时候就是确定的，而非在函数运行时</strong></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">  <span class="attr">getNameFunc</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Window</span></span><br><span class="line"><span class="title function_">alert</span>(object.<span class="title function_">getNameFunc</span>()());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">  <span class="attr">getNameFunc</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> that.<span class="property">name</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// My Object</span></span><br><span class="line"><span class="title function_">alert</span>(object.<span class="title function_">getNameFunc</span>()());</span><br></pre></td></tr></table></figure><p>应用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">return</span> ++a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每次执行都会初始化 a = 1  结果：2、 2</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">fn</span>()());</span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">fn</span>()());</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outerFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">innerFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> innerFn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每次外部函数执行的时候,都会开辟一块内存空间,外部函数的地址不同,都会重新创建一个新的地址，结果为：1 2 3 1 2 3</span></span><br><span class="line"><span class="keyword">var</span> inner = <span class="title function_">outerFn</span>();</span><br><span class="line"><span class="title function_">inner</span>();</span><br><span class="line"><span class="title function_">inner</span>();</span><br><span class="line"><span class="title function_">inner</span>();</span><br><span class="line"><span class="keyword">var</span> inner2 = <span class="title function_">outerFn</span>();</span><br><span class="line"><span class="title function_">inner2</span>();</span><br><span class="line"><span class="title function_">inner2</span>();</span><br><span class="line"><span class="title function_">inner2</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 100  闭包找到的是同一地址中父级函数中对应变量最终的值</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> m = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getM</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">seta</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    m = val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">g</span> = getM;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">f</span> = seta;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="title function_">f</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">g</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数柯里化</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sum = x;</span><br><span class="line">  <span class="keyword">var</span> tmp = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    sum = sum + x;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;;</span><br><span class="line">  tmp.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 执行add(1)的时候，会将sum赋值为1，然后返回tmp函数，剩下tmp(2)(3)，执行tmp(2)的时候，因为需要用到add中的sum，所以sum不会被清除，这时就会将sum = sum + 2，也就是1 + 2，这时就剩下tmp(3)，再次执行，sum结果就变成了6，返回tmp函数，之后使用alert或者console.log的时候，会将内容自动转为字符串，所以alert(tmp)就是alert(tmp.toString())，而tmp.toString将输出改为return sum，所以返回是6</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">n, o</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">fun</span>: <span class="keyword">function</span> (<span class="params">m</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fun</span>(m, n);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// undefined，因为只传入了一个参数，会赋值给n，所以o就是undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">fun</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 0，因为a的返回值是fun: function(m) &#123; return fun(m, n) &#125;，这时候传参1，会赋值给m，因为里面用到n，所以上一步的n会被保留，这时候也就是return f(1, 0) 即赋值给了n，o，所以o是0，下面的a.fun(2) a.fun(3)是一样的</span></span><br><span class="line">a.<span class="title function_">fun</span>(<span class="number">1</span>);</span><br><span class="line">a.<span class="title function_">fun</span>(<span class="number">2</span>);</span><br><span class="line">a.<span class="title function_">fun</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 首先使用fun(0)n赋值为0，返回的是fun: function(m) &#123; return fun(m, n) &#125;，在继续调用fun(1)，m是1，n是0，又回到fun外层，即fun(n, o)，所以n是1，o是0，再调用fun(2)，m是2，n是1、又回到外层fun(n, o)，所以n是2，o是1，再调用fun(3)，m是3，n是2、又回到外层fun(n, o)，所以n是3，o是2，所以最后的结果就是：undefined  0  1  2</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">fun</span>(<span class="number">0</span>).<span class="title function_">fun</span>(<span class="number">1</span>).<span class="title function_">fun</span>(<span class="number">2</span>).<span class="title function_">fun</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// undefined  0  1  1</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="title function_">fun</span>(<span class="number">0</span>).<span class="title function_">fun</span>(<span class="number">1</span>);</span><br><span class="line">c.<span class="title function_">fun</span>(<span class="number">2</span>);</span><br><span class="line">c.<span class="title function_">fun</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件处理函数中闭包的写法</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">    lis[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i是var声明的全局变量，如果不使用闭包，每次打印的i都是最后的值，除了使用闭包，还可以使用let声明i</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（3-1）</title>
      <link href="/post/8825618d.html"/>
      <url>/post/8825618d.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>2023 年 6 月 21 号下午开启了又一次的面试，面试官是个小姐姐（发现面试前端的都是小姐姐），前面的一些概念性或者口头回答的问题回答的自己感觉比上次好了一点（promise 那个又给记错了…），主要是最后一个共享屏幕写代码，没有写出来，就凉了</p><h3 id="flex-的相关问题"><a href="#flex-的相关问题" class="headerlink" title="flex 的相关问题"></a>flex 的相关问题</h3><blockquote><ul><li><p>align-content<br>设置侧轴上(纵轴)的所有子元素排列方式</p></li><li><p>align-items<br>设置侧轴上子元素自己的排列方式</p></li></ul></blockquote><h3 id="css3-的相关问题"><a href="#css3-的相关问题" class="headerlink" title="css3 的相关问题"></a>css3 的相关问题</h3><blockquote><ul><li>css3 画三角形<br>使用 border 代替 width、height、，然后选定一个方向，将其他方向的颜色指定为透明色即可</li><li>css3 画空心三角形<br>这个我当时没有回答出来，一个简单的方法是使用伪元素或者其他元素通过定位，画一个小一点的三角形，然后背景色改为透明色即可；由这种想法还可以通过画同样大小的三角形，然后一个靠上，一个靠下，这样就能画出一个箭头的形状</li></ul></blockquote><h3 id="各种居中问题"><a href="#各种居中问题" class="headerlink" title="各种居中问题"></a>各种居中问题</h3><blockquote><p>水平居中</p><ul><li>行内元素通过：text-align: center; 即可</li><li>块状元素通过：margin: auto; 或者定位元素的话，可以通过 left: 50%; transform: translateX(-50%); 如果知道宽高的话，还可以通过 left: 50%; margin-left: -一半的宽即可</li></ul><p>垂直居中</p><ul><li>行内元素通过设定和 height 一样大小的 line-height 即可</li><li>块状元素有几种方式都可以：针对定位元素：1、在知道宽高的情况下，通过 top：50%; margin-top: -一半的高度即可；2、不知道宽高的情况下可以通过 top: 50%; transform: translateY(-50%); 即可；或者通过 left、top、bottom、right 设定为 0，然后 margin: auto 即可</li></ul></blockquote><h3 id="promise-的相关问题"><a href="#promise-的相关问题" class="headerlink" title="promise 的相关问题"></a>promise 的相关问题</h3><pre><code>以下代码输出什么</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promiseConsole</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">promiseConsole</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出为：1、2、4、5，promise在构建的时候，就会执行 executor 函数，resolve 和 reject 两个函数作为参数传递给 executor，所以先输出 1，然后reject和resolve属于微任务（异步），所以接下来输出 2，然后再输出 4，最后先执行 reject 所以输出5、因为执行了 reject，所以后续就不执行了</span></span><br></pre></td></tr></table></figure><h3 id="共享屏幕的编码"><a href="#共享屏幕的编码" class="headerlink" title="共享屏幕的编码"></a>共享屏幕的编码</h3><p>将 data 数据转换为 data1（即是将 js 的数据转换为树状结构，或者说目录型的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">pid</span>: -<span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">&quot;1-1&quot;</span>, <span class="attr">pid</span>: <span class="number">101</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">&quot;1-1-1&quot;</span>, <span class="attr">pid</span>: <span class="number">102</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">104</span>, <span class="attr">name</span>: <span class="string">&quot;1-2 &quot;</span>, <span class="attr">pid</span>: <span class="number">101</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">202</span>, <span class="attr">name</span>: <span class="string">&quot;2-3&quot;</span>, <span class="attr">pid</span>: <span class="number">201</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">201</span>, <span class="attr">name</span>: <span class="string">&quot;2&quot;</span>, <span class="attr">pid</span>: -<span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">203</span>, <span class="attr">name</span>: <span class="string">&quot;2-1&quot;</span>, <span class="attr">pid</span>: <span class="number">201</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">204</span>, <span class="attr">name</span>: <span class="string">&quot;2-2&quot;</span>, <span class="attr">pid</span>: <span class="number">201</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">301</span>, <span class="attr">name</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">pid</span>: -<span class="number">1</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data1 = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">101</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">pid</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">102</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;1-1&quot;</span>,</span><br><span class="line">        <span class="attr">pid</span>: <span class="number">101</span>,</span><br><span class="line">        <span class="attr">children</span>: [&#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">&quot;1-1-1&quot;</span>, <span class="attr">pid</span>: <span class="number">102</span> &#125;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">104</span>, <span class="attr">name</span>: <span class="string">&quot;1-2 &quot;</span>, <span class="attr">pid</span>: <span class="number">101</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">201</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="attr">pid</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">202</span>, <span class="attr">name</span>: <span class="string">&quot;2-3&quot;</span>, <span class="attr">pid</span>: <span class="number">201</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">203</span>, <span class="attr">name</span>: <span class="string">&quot;2-1&quot;</span>, <span class="attr">pid</span>: <span class="number">201</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">204</span>, <span class="attr">name</span>: <span class="string">&quot;2-2&quot;</span>, <span class="attr">pid</span>: <span class="number">201</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">301</span>, <span class="attr">name</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">pid</span>: -<span class="number">1</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、非递归，使用 map 不改变原有数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toTree</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    map[item.<span class="property">id</span>] = item;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> parent = map[item.<span class="property">pid</span>];</span><br><span class="line">    <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">      parent.<span class="property">children</span> = parent.<span class="property">children</span> || [];</span><br><span class="line">      parent.<span class="property">children</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">toTree</span>(data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、递归，不改变原有数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toTree2</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    map[item.<span class="property">id</span>] = item;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  res = <span class="title function_">recur</span>(arr, map, -<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">recur</span>(<span class="params">arr, mapArr, rootVal</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">pid</span> == rootVal) &#123;</span><br><span class="line">      <span class="keyword">const</span> children = <span class="title function_">recur</span>(arr, mapArr, item.<span class="property">id</span>);</span><br><span class="line">      <span class="keyword">if</span> (children.<span class="property">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        item.<span class="property">children</span> = children;</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">toTree2</span>(data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、递归，改变原有数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toTree3</span>(<span class="params">list, rootValue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">pid</span> === rootValue) &#123;</span><br><span class="line">      <span class="keyword">const</span> children = <span class="title function_">toTree3</span>(list, item.<span class="property">id</span>);</span><br><span class="line">      <span class="keyword">if</span> (children.<span class="property">length</span>) &#123;</span><br><span class="line">        item.<span class="property">children</span> = children;</span><br><span class="line">      &#125;</span><br><span class="line">      arr.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">toTree3</span>(data, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、使用 reduce</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toTree4</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 最终树形数组</span></span><br><span class="line">  <span class="keyword">const</span> treeData = [];</span><br><span class="line">  <span class="comment">// 深拷贝</span></span><br><span class="line">  <span class="keyword">const</span> arrClone = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr));</span><br><span class="line">  <span class="comment">// 映射表 =&gt; 快速找到上级</span></span><br><span class="line">  <span class="keyword">const</span> mapInfo = arrClone.<span class="title function_">reduce</span>(<span class="function">(<span class="params">obj, item</span>) =&gt;</span> &#123;</span><br><span class="line">    item.<span class="property">children</span> = [];</span><br><span class="line">    obj[item.<span class="property">id</span>] = item;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转树</span></span><br><span class="line">  arrClone.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parent = mapInfo[item.<span class="property">pid</span>];</span><br><span class="line">    <span class="comment">// 如果父节点存在, 直接push到父级的children数组里面</span></span><br><span class="line">    <span class="comment">// 如果父级不存在, 说明本身就是一级, 直接push到treeData数组</span></span><br><span class="line">    parent ? parent.<span class="property">children</span>.<span class="title function_">push</span>(item) : treeData.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 打印结果</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(treeData);</span><br><span class="line">  <span class="comment">// 查看原数组是否有变化</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">  <span class="keyword">return</span> treeData;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">toTree4</span>(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、使用filter</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toTree5</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="comment">// 深拷贝避免影响源数据</span></span><br><span class="line">  <span class="keyword">const</span> cloneData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr));</span><br><span class="line">  <span class="keyword">return</span> cloneData.<span class="title function_">filter</span>(<span class="function">(<span class="params">father</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 循环所有项，并添加children属性</span></span><br><span class="line">    <span class="comment">// 筛选出此项的所有子元素</span></span><br><span class="line">    <span class="keyword">const</span> branchArr = cloneData.<span class="title function_">filter</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> father.<span class="property">id</span> === child.<span class="property">pid</span>);</span><br><span class="line">    <span class="comment">// 给父级添加一个children属性，并赋值</span></span><br><span class="line">    branchArr.<span class="property">length</span> &gt; <span class="number">0</span> ? (father.<span class="property">children</span> = branchArr) : <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// father.children = branchArr 如果希望每个元素无论有没有children都添加children属性  可以直接赋值</span></span><br><span class="line">    <span class="comment">// 返回pid为&#x27;-1&#x27;的顶级节点</span></span><br><span class="line">    <span class="keyword">return</span> father.<span class="property">pid</span> === -<span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">toTree5</span>(data);</span><br></pre></td></tr></table></figure><pre><code>希望通过大量的面试还有自己的总结以及相关知识的进一步学习，能够在秋招时找到一份还不错的工作！</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（2-5）</title>
      <link href="/post/cc1b257f.html"/>
      <url>/post/cc1b257f.html</url>
      
        <content type="html"><![CDATA[<h2 id="ES6-相关"><a href="#ES6-相关" class="headerlink" title="ES6 相关"></a>ES6 相关</h2><h3 id="ES6-新增的功能"><a href="#ES6-新增的功能" class="headerlink" title="ES6 新增的功能"></a>ES6 新增的功能</h3><h3 id="var、let、const"><a href="#var、let、const" class="headerlink" title="var、let、const"></a>var、let、const</h3><p>var 声明变量存在变量提升，let 和 const 不存在变量提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// undefined  ===&gt;  a已声明还没赋值，默认得到undefined值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="comment">// 报错：c is not defined  ===&gt; 找不到c这个变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// a=100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p>let 和 const 只能在块作用域里访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">const</span> c = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="comment">// 报错：c is not defined  ===&gt; 找不到c这个变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br></pre></td></tr></table></figure><p>同一作用域下 let 和 const 不能声明同名变量，而 var 可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 控制台输出 100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 控制台输出 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台报错：Identifier &#x27;a&#x27; has already been declared  ===&gt; 标识符a已经被声明了。</span></span><br></pre></td></tr></table></figure><p>const 定义常量，而且不能修改，但是在定义的对象时对象属性值可以改变。因为常量指的是内存中的地址，只要地址不变，地址里面的值如果是基础值，可以修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">2</span>;</span><br><span class="line">a = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 控制台报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;make&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="comment">// 运行发现控制台没有报错，且 person.name 被成功修改</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><h3 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h3><p>Symbol 是 ES6 中引入的一种新的基本数据类型，用于表示一个独一无二的值，不能与其他数据类型进行运算</p><p>使用 Symbol()创建一个 Symbol 类型的值并赋值给 a 变量后，你就得到了一个在内存中独一无二的值。现在除了通过变量 a，任何人在任何作用域内都无法重新创建出这个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> b = <span class="title class_">Symbol</span>();</span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><blockquote><ul><li>在 ES6 之前，处理模板字符串：通过“\”和“+”来构建模板</li><li>对 ES6 来说：用${}来界定；反引号(&#96;&#96;)直接搞定</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;xxxxxx&quot;</span>;</span><br><span class="line"><span class="comment">// es6之前</span></span><br><span class="line"><span class="keyword">let</span> html = <span class="string">&quot;&lt;div&gt; + &lt;a&gt; &quot;</span> + url + <span class="string">&quot; &lt;/a&gt;&lt;/div&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> eshtml = <span class="string">`&lt;div&gt;&lt;a&gt;<span class="subst">$&#123;url&#125;</span>&lt;/a&gt;&lt;/div&gt;`</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串新方法"><a href="#字符串新方法" class="headerlink" title="字符串新方法"></a>字符串新方法</h3><blockquote><ul><li>includes()判断字符串是否包含参数字符串，返回 boolean 值</li><li>startsWith() | endsWith()，判断字符串是否以参数字符串开头或结尾。返回 boolean 值。这两个方法可以有第二个参数，一个数字，表示开始查找的位置</li><li>repeat()方法按指定次数返回一个新的字符串</li><li>padStart()&#x2F;padEnd()，用参数字符串按给定长度从前面或后面补全字符串，返回新字符串</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;blue,red,orange,white&quot;</span>;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">str.<span class="title function_">startsWith</span>(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">str.<span class="title function_">endsWith</span>(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x27;hellohello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>.<span class="title function_">repeat</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="string">&quot;hell&quot;</span>;</span><br><span class="line"><span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">padEnd</span>(<span class="number">5</span>, <span class="string">&quot;o&quot;</span>));</span><br><span class="line"><span class="comment">// &#x27;helloo&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">padEnd</span>(<span class="number">6</span>, <span class="string">&quot;o&quot;</span>));</span><br><span class="line"><span class="comment">// &#x27;hell  &#x27;,如果没有指定将用空格代替</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">padEnd</span>(<span class="number">6</span>));</span><br><span class="line"><span class="comment">// &#x27;ohell&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">padStart</span>(<span class="number">5</span>, <span class="string">&quot;o&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="解构表达式"><a href="#解构表达式" class="headerlink" title="解构表达式"></a>解构表达式</h3><p>字符串、以及 ES6 新增的 Map 和 Set 都可以使用解构表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组解构</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, , <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 1, undefined, 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a,,b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 1, 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line"><span class="keyword">let</span> [a,..<span class="property">b</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// ...是剩余运算符，表示赋值运算符右边除第一个值外剩余的都赋值给b</span></span><br><span class="line"><span class="comment">// 1, [2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象解构</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;ren&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">sex</span>: <span class="string">&quot;male&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; name, age, sex &#125; = obj;</span><br><span class="line"><span class="comment">// &#x27;ren&#x27; 12 &#x27;male&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, sex);</span><br><span class="line"><span class="comment">// 自定义变量名</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: myName, <span class="attr">age</span>: myAge, <span class="attr">sex</span>: mySex &#125; = obj;</span><br><span class="line"><span class="comment">// &#x27;ren&#x27; 12 &#x27;male&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName, myAge, mySex);</span><br></pre></td></tr></table></figure><h3 id="map-和-set"><a href="#map-和-set" class="headerlink" title="map 和 set"></a>map 和 set</h3><blockquote><ul><li>object 的键只能是字符串或 ES6 的 symbol 值，而 Map 可以是任何值</li><li>Map 对象有一个 size 属性，存储了键值对的个数，而 object 对象没有类似属性</li><li>Set 对象和 Map 对象类似，但它存储不是键值对。类似数组，但它的每个元素都是唯一的</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ren&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;age&quot;</span>, <span class="number">12</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// &#123;&#x27;name&#x27;=&gt;&#x27;ren&#x27;,&#x27;age&#x27;=&gt;12&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap);</span><br><span class="line"></span><br><span class="line">myMap.<span class="title function_">set</span>(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="comment">// &#123;&#x27;name&#x27;=&gt;&#x27;ren&#x27;,&#x27;age&#x27;=&gt;12,&#x27;sex&#x27;=&gt;&#x27;male&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap.<span class="property">size</span>);</span><br><span class="line"><span class="comment">// &#x27;ren&#x27;</span></span><br><span class="line">myMap.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">myMap.<span class="title function_">has</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">myMap.<span class="title function_">delete</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">myMap.<span class="title function_">has</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line">myMap.<span class="title function_">get</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 里面要传一个数组，否则会报错</span></span><br><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet);</span><br><span class="line"></span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">mySet.<span class="title function_">delete</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">mySet.<span class="title function_">has</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// &#123;2, 3, 4&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet);</span><br></pre></td></tr></table></figure><p>利用 Set 对象唯一性的特点，可以轻松实现数组的去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(mySet);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><h3 id="数组的新方法"><a href="#数组的新方法" class="headerlink" title="数组的新方法"></a>数组的新方法</h3><blockquote><ul><li>Array.from() 是内置对象 Array 的方法，实例数组不能调用</li><li>includes()、map()、filter()、forEach()、find()、some()、every()</li><li>Array.from() 三个参数：第一个表示将被转换的可迭代对象(如果只有一个参数就是把形参转变成数组)；第二个是回调函数，将对每个数组元素应用该回调函数，然后返回新的值到新数组；第三个是回调函数内 this 的指向</li><li>map() 要利用原数组经过运算后的数组，或者从对象数组中拿某个属性</li><li>filter() 是将符合挑选的筛选出来成为一个新数组，新数组不会影响旧数组</li><li>forEach() 是循环遍历数组中的每一项，没有返回值</li><li>find() 是查找数组中符合条件的第一个元素，直接将这个元素返回出来</li><li>some() 找到一个符合条件的就返回 true,所有都不符合返回 false</li><li>every() 数组所有值都符合条件才会返回 true,有一个不符合返回 false</li></ul></blockquote><h3 id="object-的新方法"><a href="#object-的新方法" class="headerlink" title="object 的新方法"></a>object 的新方法</h3><pre><code>在 ES6 中，添加了Object.is()、Object.assign()、Object.keys()、Object.values()、Object.entries()等方法</code></pre><blockquote><ul><li>Object.is()方法用来判断两个值是否为同一个值，返回一个布尔类型的值</li><li>Object.assign()方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象，并返回目标对象</li><li>Object.keys() 返回对象所有属性；Object.values() 返回对象所有属性值；Object.entries() 返回多个数组，每个数组是 key–value</li></ul></blockquote><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><blockquote><ul><li>箭头函数实现了一种更加简洁的书写方式。箭头函数内部没有 arguments，也没有 prototype 属性，所以不能用 new 关键字调用箭头函数</li><li>箭头函数和普通函数最大的区别在于其内部 this 永远指向其父级对象的 this</li><li><strong>作为方法的箭头函数 this 指向全局 window 对象，而普通函数则指向调用它的对象</strong></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">456</span>,</span><br><span class="line">  <span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// this指向window</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 123</span></span><br><span class="line">obj.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><blockquote><ul><li>class 作为对象的模板被引入 ES6，你可以通过 class 关键字定义类。class 的本质依然是一个函数</li><li>类的继承通过 extends 关键字实现</li><li>子类必须在 constructor 中调用 super()</li></ul></blockquote><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><blockquote><ul><li>ES6 使用关键字 import 导入模块（文件），有两种常用的方式</li><li>ES6 通过 export 和 export default 导出模块</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> ‘模块名称’  <span class="keyword">from</span>  ‘路径’；</span><br><span class="line"><span class="keyword">import</span>  ‘路径’；</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;ren&#x27;</span>,age = <span class="number">12</span>;</span><br><span class="line"><span class="comment">// 注意：变量需要用大括号包裹，然后才能向外输出</span></span><br><span class="line"><span class="keyword">export</span> &#123;name, age&#125;;</span><br></pre></td></tr></table></figure><h3 id="模块化优点"><a href="#模块化优点" class="headerlink" title="模块化优点"></a>模块化优点</h3><blockquote><ul><li>防止命名冲突</li><li>复用性强</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（2-4）</title>
      <link href="/post/74a7421a.html"/>
      <url>/post/74a7421a.html</url>
      
        <content type="html"><![CDATA[<h2 id="promise-相关"><a href="#promise-相关" class="headerlink" title="promise 相关"></a>promise 相关</h2><pre><code>promise的then是异步还是同步？all是异步还是同步？async、await呢？</code></pre><p>首先，promise 的构造函数是同步的，但是它的 then 是异步的，all 也是异步的</p><p>语法：<code>new Promise(function(resolve,reject)&#123;&#125;)</code></p><blockquote><p>构建 Promise 对象时，需要传入一个 executor 函数，主要业务流程都在 executor 函数中执行<br><strong>Promise 构造函数执行时立即调用 executor 函数</strong>，resolve 和 reject 两个函数作为参数传递给 executor，resolve 和 reject 函数被调用时，分别将 promise 的状态改为 fulfilled(完成)或者 rejected(失败)。一旦状态改变，就不会再变，如何时候都可以得到这个结果<br>在 executor 函数中调用 resolve 函数后，会触发 promise.then 设置的回调函数，而调用 reject 函数后，会触发 promise.catch 设置的回调函数</p></blockquote><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出依次是1、2、3</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果为2、3、1</span></span><br><span class="line"><span class="keyword">let</span> a1=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span> 采用了回调函数延迟绑定技术，在执行 resolve 函数的时候，回调函数还没有绑定，那么只能推迟回调函数的执行</span><br></pre></td></tr></table></figure><p>再比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line">a.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span> + res);</span><br><span class="line">&#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败&quot;</span> + reason);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出为：1、2、3、成功 张三丰</span></span><br><span class="line"></span><br><span class="line">解释：<span class="keyword">new</span> <span class="title class_">Promise</span> 的时候先执行 executor 函数，打印出 <span class="number">1</span>、<span class="number">2</span>,<span class="title class_">Promise</span> 在执行 resolve 时，触发微任务，还是继续往下执行同步任务，执行 a.<span class="property">then</span> 时，存储起来两个函数（此时这两个函数还没有执行）然后打印出 <span class="number">3</span>，此时同步任务执行完成，最后执行刚刚那个微任务，从而执行.<span class="property">then</span> 中成功的方法</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;f&quot;</span>);</span><br><span class="line"><span class="comment">// abcfde</span></span><br><span class="line"></span><br><span class="line">在promise对象方法中then和<span class="keyword">catch</span>方法本身都是异步的</span><br><span class="line">在promise对象中出来then和<span class="keyword">catch</span>是异步之外，其他的都是同步的</span><br></pre></td></tr></table></figure><h2 id="promise-的进一步学习"><a href="#promise-的进一步学习" class="headerlink" title="promise 的进一步学习"></a>promise 的进一步学习</h2><h3 id="函数对象与实例对象"><a href="#函数对象与实例对象" class="headerlink" title="函数对象与实例对象"></a>函数对象与实例对象</h3><blockquote><ul><li>函数对象：将函数作为对象使用时，简称为函数对象</li><li>实例对象：new 函数产生的对象，简称为对象</li></ul></blockquote><h3 id="回调函数的类别"><a href="#回调函数的类别" class="headerlink" title="回调函数的类别"></a>回调函数的类别</h3><blockquote><p>同步回调:</p><ul><li>概念：立即执行，完全执行完了才结束，不会放入回调队列中</li><li>比如：数组遍历相关的回调函数 | Promise 的 excutor 函数<br>异步回调:</li><li>概念：不会立即执行，会放入回调队列中将来执行</li><li>比如：定时器回调 | ajax 回调 | Promise 的成功（resolve）| 失败（reject）的回调</li></ul></blockquote><h3 id="promise-的优势"><a href="#promise-的优势" class="headerlink" title="promise 的优势"></a>promise 的优势</h3><blockquote><p>指定回调函数的方式更加灵活：可以在请求发出甚至结束后指定回调函数<br>支持链式调用，可以解决回调地狱问题</p></blockquote><h3 id="async-与-await"><a href="#async-与-await" class="headerlink" title="async 与 await"></a>async 与 await</h3><blockquote><p>async 函数</p><ul><li>函数的返回值为 promise 对象</li><li>promise 对象的结果由 async 函数执行的返回值决定</li><li>async 函数中使用 return 返回的内容可以通过 then 来获取</li></ul><p>await 表达式</p><ul><li>await 右侧的表达式一般为 promise 对象, 但也可以是其它的值</li><li>如果表达式是 promise 对象, await 返回的是 promise 成功的值</li><li>如果表达式是其它值, 直接将此值作为 await 的返回值</li><li><strong>await 那一句会同步执行，但是它下面的语句就变成了异步的了，类似 callback 的功能（微任务）。即，只要遇到了 <code>await</code> ，后面的代码都相当于放在 callback 里</strong></li></ul><p>注意</p><ul><li>await 必须写在 async 函数中, 但 async 函数中可以没有 await</li><li>如果 await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 来捕获处理</li></ul></blockquote><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="comment">// 这一句会同步执行，返回 Promise ，其中的 `console.log(&#x27;async2&#x27;)` 也会同步执行</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="comment">// 上面有 await ，下面就变成了“异步”，类似 callback 的功能（微任务）</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步，宏任务</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 Promise 之后，即同步执行完成，then 是异步代码</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="comment">// Promise 的函数体会立刻执行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// then 异步，微任务</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出为：script start、async1 start、async2、promise1、script end、async1 end、promise2、setTimeout</span></span><br></pre></td></tr></table></figure><h3 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h3><blockquote><p>宏任务：setTimeout、setInterval、DOM 事件等<br>微任务：promise、async&#x2F;await</p></blockquote><h3 id="事件循环的执行顺序"><a href="#事件循环的执行顺序" class="headerlink" title="事件循环的执行顺序"></a>事件循环的执行顺序</h3><p>先执行同步代码 -&gt; 微任务 -&gt; DOM 渲染 -&gt; 宏任务</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Bye&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">输出为：Hi、Bye、点击时执行clicked</span><br></pre></td></tr></table></figure><h3 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时算乘法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multi</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(num * num);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 forEach ，是 1s 之后打印出所有结果，即 3 个值是一起被计算出来的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  nums.<span class="title function_">forEach</span>(<span class="keyword">async</span> (x) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">multi</span>(x);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of ，可以让计算挨个串行执行</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="comment">// 在 for...of 循环体的内部，遇到 await 会挨个串行计算</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">multi</span>(x);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test2</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（2-3）</title>
      <link href="/post/e9707aa3.html"/>
      <url>/post/e9707aa3.html</url>
      
        <content type="html"><![CDATA[<h2 id="grid-布局"><a href="#grid-布局" class="headerlink" title="grid 布局"></a>grid 布局</h2><p>grid 布局与 flex 布局相同之处在于：都有分别针对于父元素与子元素的一些属性。<br>grid 布局与 flex 布局不同之处在于：flex 布局是轴线布局，只能指定“子元素”针对轴线的位置，可以看作是一维布局，grid 布局则是将容器划分成“行”和“列”，产生单元格，然后指定“子元素所在”的单元格，可以看作是二维布局。</p><h3 id="常见父元素属性"><a href="#常见父元素属性" class="headerlink" title="常见父元素属性"></a>常见父元素属性</h3><blockquote><p>常见的父元素属性主要有 7 种：</p><ul><li>grid-template-系列：包含 grid-template-columns（设置列数）以及 grid-template-rows（设置行数）</li><li>gap： 设置行或列之间间距</li><li>grid-template-areas： 设置单元格区域，区域由单元格组成</li><li>grid-auto-flow：设置子元素的排放顺序，默认是“先行后列”</li><li>justify-items 与 align-items：设置单元格内容的对齐方向</li><li>justify-content 与 align-content：设置整个内容区域的对齐方向</li><li>grid-auto-columns 与 grid-auto-rows 系列：用于设置多出来的子元素的宽或高</li></ul></blockquote><p>创建两个 50px 高的行和两个 200px 宽的列<br><code>grid-template: 50px 50px / 200px 200px</code></p><ul><li>如果设置的每行（每列）的高度（宽度）相同的话，如上述 <code>grid-template-columns：100px 100px 100px</code>，就可以使用 repeat 函数，用法为：<code>grid-template-columns：repeat(3, 100px)</code></li></ul><p><code>repeat(number, px)</code>: 其中第一个参数表示重复次数，第二个参数表示所要重复的数值；</p><ul><li><p>若单元格的大小是固定的，但是父元素的大小不确定，此时可用 auto-fill 自动填充父元素</p></li><li><p>repeat(auto-fill, 100px) 表示 100px 自动填充，直至父元素填满；</p></li><li><p>如未指定父元素的宽度，则不断拖动浏览器宽度时，每行排列的列数是不断变化的，排不满就挤到下一行；</p></li><li><p>若设置每一部分占父元素的比例为多少，可通过单位 fr 实现。fr 是 fraction（片段）的意思</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 分成<span class="number">3</span>份，每个占一份</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">// 也可写成</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">// 分成<span class="number">3</span>份 第一部分占一份 第二部分占<span class="number">2</span>份 第三部分占三份</span><br><span class="line"><span class="attribute">grid-template</span>-column: <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">3</span>fr;</span><br></pre></td></tr></table></figure><ul><li>若限制子元素最大值与最小值，可使用 minmax 设置<br><code>minmax: &lt;最小值&gt; &lt;最大值&gt;</code><br><code>grid-template-column: 100px minmax(100px, 200px) 100px</code></li><li>设置了 minmax 值后，在拖动浏览器放大时，最大不能超过 200px，缩小时，最小不能少于 100px，即不能再放大缩小；</li></ul><h3 id="网格线"><a href="#网格线" class="headerlink" title="网格线"></a>网格线</h3><pre><code>网格线在页面上看不出来，但是在设置完行和列之后，自动会有网格线生成；若有3行，则会有4个网格线，有4列，则有5条网格线</code></pre><p>网格线也可以命名，用方括号表示，如下 ：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 行方向定义了两行，有三条网格线，分别命名r1 r2 r3</span><br><span class="line"><span class="attribute">grid-template-rows</span>: [r1] <span class="number">100px</span> [r2] <span class="number">100px</span> [r3];</span><br><span class="line">// 列方向定义了三列，有四条网格线，分别命名为c1 c2 c3 c4</span><br><span class="line"><span class="attribute">grid-template-columns</span>: [c1] <span class="number">100px</span> [c2] <span class="number">100px</span> [c3] <span class="number">200px</span> [c4];</span><br></pre></td></tr></table></figure><h3 id="gap-系列"><a href="#gap-系列" class="headerlink" title="gap 系列"></a>gap 系列</h3><p>gap 是指行之间或列之间的间距；gap 是 column-gap（列间距）和 row-gap（行间距）的合并形式。若行距和列距相同，可将 gap 简写为 gap： 10px<br><code>gap : &lt;row-gap&gt; &lt;column-gap&gt;</code></p><p><strong>注意</strong>：以前标准是 grid-column-gap 和 grid-row-gap 和 grid-gap，现在都将 grid 前缀给去掉了～</p><h3 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h3><p>areas 指区域，是由单个或多个单元格组成（数量由子元素属性自定义）<br><code>grid-template-areas: &#39;a b c&#39; &#39;d e f&#39; &#39;g h i&#39;;</code><br>上述代码表示第一行为三个区域 区域名分别为 a b c 第二行和第三行也分别划分了各自的三个区域；行之间用空格表示；</p><p>当然，单元格也可以是同一个区域，如：<br><code>grid-template-areas: &#39;a a a&#39; &#39;d e f&#39; &#39;b b b&#39;;</code><br>第一行全部为 a 区域，第三行全部为 b 区域；（相同命名的单元格属于一个区域）</p><p>若不想给某个单元格命名，可用点.表示<br><code>grid-template-areas: &#39;a . a&#39; &#39;d . f&#39; &#39;b b b&#39;;</code></p><p>如第一行和第二行的第二列单元格并不想命名，就可以用.表示。为书写美观，可写成如下：<br><code>grid-template-areas: &#39;a a a&#39;                       &#39;d e f&#39;                       &#39;b b b&#39;;</code></p><p><em>区域的命名和网格线的命名会影响到网格线，每个区域的起始网格线会自动命名为区域名-start，终止网格线自动命名为区域名-end ～</em></p><h3 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h3><p>父元素设为 grid 布局之后，对应的子元素会按照顺序，自动放置在每一个网格，默认的放置位置是“先行后列”，即先填满第一行，再开始放入第二行；参数有两个： row 和 column</p><h3 id="justify-items-与-align-items"><a href="#justify-items-与-align-items" class="headerlink" title="justify-items 与 align-items"></a>justify-items 与 align-items</h3><p>用于设置单元格内容的水平和垂直的对齐方式；其中 justify-items 用于设置水平对齐方式，align-items 用于表示垂直对齐方式；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">justify-items： start ｜ end ｜ center ｜ stretch（默认start）</span><br><span class="line"><span class="attribute">align-items</span>： start ｜ end ｜ center ｜ stretch（默认start）</span><br></pre></td></tr></table></figure><p><em>place-items 属性是 align-items 属性和 justify-items 属性的合并形式：</em><br><code>place-items: &lt;align-items&gt; &lt;justify-items&gt;;</code></p><h3 id="justify-content-与-align-content"><a href="#justify-content-与-align-content" class="headerlink" title="justify-content 与 align-content"></a>justify-content 与 align-content</h3><p>用于设置<em>整个内容区域</em>的对齐方式，其中 justify-content 用于设置整个内容区域的水平方向，align-content 用于设置整个内容区域的垂直方向；各参数含义与 flex 布局一样；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>： start ｜ end ｜ center ｜ stretch ｜ space-around ｜ space-between ｜ space-evenly（默认是start）</span><br><span class="line">`<span class="attribute">align-content</span>： start ｜ end ｜ center ｜ stretch ｜ space-around ｜ space-between ｜ space-evenly（默认是start）</span><br></pre></td></tr></table></figure><h3 id="grid-auto-rows-与-grid-auto-columns"><a href="#grid-auto-rows-与-grid-auto-columns" class="headerlink" title="grid-auto-rows 与 grid-auto-columns"></a>grid-auto-rows 与 grid-auto-columns</h3><p>用于设置多出来的宽或高，包含 grid-auto-rows（用于设置高）和 grid-auto-columns（用于设置宽）；在排列方式为先行后列时，可以用 grid-auto-rows 限制多出来子元素的高，在排列方式为先列后行时，可以用 grid-auto-columns 限制多出来子元素的宽；</p><h3 id="常见子元素属性"><a href="#常见子元素属性" class="headerlink" title="常见子元素属性"></a>常见子元素属性</h3><blockquote><p>常见子元素属性有如下 3 种：</p><ul><li>grid-column-系列与 grid-row-系列</li><li>grid-area</li><li>justify-self 与 align-self</li></ul></blockquote><h3 id="grid-column-系列与-grid-row-系列"><a href="#grid-column-系列与-grid-row-系列" class="headerlink" title="grid-column-系列与 grid-row-系列"></a>grid-column-系列与 grid-row-系列</h3><p>grid-column-start 和 grid-column-end 用于指定子元素的开始&#x2F;结束于哪条列网格线，确定子元素的具体位置；</p><blockquote><p>也可以用 span 表示跨越几行或几列：</p><ul><li>grid-row-start：span 2 表示从子元素起始行网格线跨越两条网格线距离；</li><li>grid-row-end：span 2 也表示从子元素起始行网格线跨越两条网格线距离；</li><li>grid-column-start:：span 2 表示从子元素起始列网格线跨越两条网格线距离；</li><li>grid-column-end：span 2 也表示从子元素起始列网格线跨越两条网格线距离；</li></ul></blockquote><blockquote><p>上述亦可简写为：</p><ul><li>grid-column: 1 &#x2F; 3 表示从第一条列网格线开始到第三条列网格线</li></ul></blockquote><blockquote><ul><li>grid-row: 2 &#x2F; 3 表示从第二条行网格线开始到第三条行网格线</li></ul></blockquote><h3 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h3><p>用于指定子元素放置在哪个区域内（还记得区域是什么嘛，不记得往上翻翻哦，区域是在父元素中定义好的～）</p><p>如我们定义父元素区域划分为：<br><code>grid-template-areas: &#39;a a a&#39;                      &#39;b c d&#39;;</code></p><p>将某个子元素定义为 a 区域：<br><code>grid-area: a</code></p><p>grid-area 还可以用作 grid-row-start&#x2F;grid-column-start&#x2F;grid-row-end&#x2F;grid-column-end 的合并形式，用于直接指定子元素的具体位置：<br><code>grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;</code></p><h3 id="justify-self-与-column-self-系列"><a href="#justify-self-与-column-self-系列" class="headerlink" title="justify-self 与 column-self 系列"></a>justify-self 与 column-self 系列</h3><p>用于设置单个子元素的单元格内容的位置， justify-self 用于设置单元格内容的水平方向，align-self 用于设置单元格内容的垂直方向；与上面所述 justify-items 和 align-items 属性用法完全一致，参数也一样；</p><p>place-self 属性是 justify-self 和 align-self 的合并形式：<br><code>place-self: &lt;align-self&gt; &lt;justify-self&gt; </code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（2-2）</title>
      <link href="/post/51cc1dc6.html"/>
      <url>/post/51cc1dc6.html</url>
      
        <content type="html"><![CDATA[<h2 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>flex 布局是一种布局模型，经常被称之为 flexbox，使用 flex 布局之后，他会给子元素提供强大空间分配和对齐能力。flex 的优点就是避免不灵活的布局形式，创建更多种布局模式供你选择，解决了子元素的对齐和分布与 响应式等问题。缺点是只能依靠自身的布局模式，稍有变化则无法改变。</p><p>CSS 中提供了以下属性来实现 Flex 布局：</p><table><thead><tr><th align="center">选择器</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">display</td><td align="center">指定 HTML 元素的盒子类型</td></tr><tr><td align="center">flex-direction</td><td align="center">指定弹性盒子中子元素的排列方式</td></tr><tr><td align="center">flex-wrap</td><td align="center">设置当弹性盒子的子元素超出父容器时是否换行</td></tr><tr><td align="center">flex-flow</td><td align="center">flex-direction 和 flex-wrap 两个属性的简写</td></tr><tr><td align="center">justify-content</td><td align="center">设置弹性盒子中元素在主轴（横轴）方向上的对齐方式</td></tr><tr><td align="center">align-items</td><td align="center">设置弹性盒子中元素在侧轴（纵轴）方向上的对齐方式</td></tr><tr><td align="center">align-content</td><td align="center">修改 flex-wrap 属性的行为，类似 align-items，但不是设置子元素对齐，而是设置行对齐</td></tr><tr><td align="center">order</td><td align="center">设置弹性盒子中子元素的排列顺序</td></tr><tr><td align="center">align-self</td><td align="center">在弹性盒子的子元素上使用，用来覆盖容器的 align-items 属性</td></tr><tr><td align="center">flex</td><td align="center">设置弹性盒子中子元素如何分配空间</td></tr><tr><td align="center">flex-grow</td><td align="center">设置弹性盒子的扩展比率</td></tr><tr><td align="center">flex-shrink</td><td align="center">设置弹性盒子的收缩比率</td></tr><tr><td align="center">flex-basis</td><td align="center">设置弹性盒子伸缩基准值</td></tr></tbody></table><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><blockquote><p>flex-direction<br>flex-direction 属性用来决定主轴的方向（即项目的排列方向），属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">row</td><td align="center">默认值，主轴沿水平方向从左到右</td></tr><tr><td align="center">row-reverse</td><td align="center">主轴沿水平方向从右到左</td></tr><tr><td align="center">column</td><td align="center">主轴沿垂直方向从上到下</td></tr><tr><td align="center">column-reverse</td><td align="center">主轴沿垂直方向从下到上</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承此属性的值</td></tr></tbody></table><blockquote><p>flex-wrap<br>flex-wrap 属性用来设置当弹性盒子的子元素（项目）超出父容器时是否换行，属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">nowrap</td><td align="center">默认值，表示项目不会换行</td></tr><tr><td align="center">wrap</td><td align="center">表示项目会在需要时换行</td></tr><tr><td align="center">wrap-reverse</td><td align="center">表示项目会在需要时换行，但会以相反的顺序</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>flex-flow<br>flex-flow 属性是 flex-direction 和 flex-wrap 两个属性的简写，语法格式如下：<br><code>flex-flow: flex-direction flex-wrap;</code></p></blockquote><blockquote><p>justify-content<br>justify-content 属性用于设置弹性盒子中元素在主轴（横轴）方向上的对齐方式，属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">flex-start</td><td align="center">默认值，左对齐</td></tr><tr><td align="center">flex-end</td><td align="center">右对齐</td></tr><tr><td align="center">center</td><td align="center">居中</td></tr><tr><td align="center">space-between</td><td align="center">两端对齐，项目之间的间隔是相等的</td></tr><tr><td align="center">space-around</td><td align="center">每个项目两侧的间隔相等</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>align-items<br>align-items 属性用来设置弹性盒子中元素在侧轴（纵轴）方向上的对齐方式，属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">stretch</td><td align="center">默认值，项目将被拉伸以适合容器</td></tr><tr><td align="center">center</td><td align="center">项目位于容器的中央</td></tr><tr><td align="center">flex-start</td><td align="center">项目位于容器的顶部</td></tr><tr><td align="center">flex-end</td><td align="center">项目位于容器的底部</td></tr><tr><td align="center">baseline</td><td align="center">项目与容器的基线对齐</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>align-content<br>align-content 属性与 justify-content 属性类似，可以在弹性盒子的侧轴还有多余空间时调整容器内项目的对齐方式，属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">stretch</td><td align="center">默认值，将项目拉伸以占据剩余空间</td></tr><tr><td align="center">center</td><td align="center">项目在容器内居中排布</td></tr><tr><td align="center">flex-start</td><td align="center">项目在容器的顶部排列</td></tr><tr><td align="center">flex-end</td><td align="center">项目在容器的底部排列</td></tr><tr><td align="center">space-between</td><td align="center">多行项目均匀分布在容器中，其中第一行分布在容器的顶部，最后一行分布在容器的底部</td></tr><tr><td align="center">space-around</td><td align="center">多行项目均匀分布在容器中，并且每行的间距（包括离容器边缘的间距）都相等</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>order<br>order 属性用来设置项目在容器中出现的顺序，您可以通过具体的数值来定义项目在容器中的位置，属性的语法格式如下：<br><code>order: number;</code><br>其中 number 就是项目在容器中的位置，默认值为 0。</p></blockquote><blockquote><p>align-self<br>align-self 属性允许您为某个项目设置不同于其它项目的对齐方式，该属性可以覆盖 align-items 属性的值。align-self 属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">auto</td><td align="center">默认值，表示元素将继承其父容器的 align-items 属性值，如果没有父容器，则为“stretch”</td></tr><tr><td align="center">stretch</td><td align="center">项目将被拉伸以适合容器</td></tr><tr><td align="center">center</td><td align="center">项目位于容器的中央</td></tr><tr><td align="center">flex-start</td><td align="center">项目位于容器的顶部</td></tr><tr><td align="center">flex-end</td><td align="center">项目位于容器的底部</td></tr><tr><td align="center">baseline</td><td align="center">项目与容器的基线对齐</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>flex<br>flex 属性是 flex-grow、flex-shrink 和 flex-basis 三个属性的简写，语法格式如下：<br><code>flex: flex-grow flex-shrink flex-basis;</code></p><p>参数说明如下：</p><ul><li>flex-grow：（必填参数）一个数字，用来设置项目相对于其他项目的增长量，默认值为 0；</li><li>flex-shrink：（选填参数）一个数字，用来设置项目相对于其他项目的收缩量，默认值为 1；</li><li>flex-basis：（选填参数）项目的长度，合法值为 auto（默认值，表示自动）、inherit（表示从父元素继承该属性的值） 或者以具体的值加 “%”、”px”、”em” 等单位的形式。</li></ul><p>另外，flex 属性还有两个快捷值，分别为 auto（1 1 auto）和 none（0 0 auto）。</p></blockquote><p>另外，除了可以使用 flex 属性外，您也可以使用 flex-grow、flex-shrink、flex-basis 几个属性来分别设置项目的增长量、收缩量以及项目长度，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: auto;</span><br><span class="line">  <span class="comment">/* 等同于 flex:1 1 auto; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（2-1）</title>
      <link href="/post/5c0cb90c.html"/>
      <url>/post/5c0cb90c.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>今天下午经历了第二次面试，面试官是一个小姐姐，看着挺和蔼的，具体问的问题其实也不算难，<br>都是前端开发中常用的东西，但是她可能更想了解原理，而我处于只会用的境界，整体感觉我觉<br>得很不好，不出意外，应该是挂了…</p><h2 id="CSS3-中的动画以及常用的-css3-属性"><a href="#CSS3-中的动画以及常用的-css3-属性" class="headerlink" title="CSS3 中的动画以及常用的 css3 属性"></a>CSS3 中的动画以及常用的 css3 属性</h2><p>我回答的是 scale、transform、rotate 等，然后她又问我动画相关的，我说自己常用的可能就是 animation，然后自定义一些动画，进行引用啥的…</p><h2 id="promise-相关"><a href="#promise-相关" class="headerlink" title="promise 相关"></a>promise 相关</h2><p>刚开始小姐姐问 promise 了解吗，我说了解，主要是用来解决 ajax 回调地狱的问题的，然后她问我 promise 可以实现同步吗，问到这里，我已经不行了，这种概念题可真是让我头疼，之后又问我.then 方法是同步还是异步？.all 可以实现同步吗？为什么？直接想死</p><h2 id="ES6-相关"><a href="#ES6-相关" class="headerlink" title="ES6 相关"></a>ES6 相关</h2><p>先问了我会用 ES6 吗，都用了哪些，我说常用的可能就是解构赋值和箭头函数，然后又问我解构赋值具体咋用，最后问了我结构赋值是深拷贝还是浅拷贝，为什么？我的妈，又是为什么，哎….没了</p><h2 id="关于面试的回顾，知识点总结"><a href="#关于面试的回顾，知识点总结" class="headerlink" title="关于面试的回顾，知识点总结"></a>关于面试的回顾，知识点总结</h2><h2 id="css3-新增有哪些"><a href="#css3-新增有哪些" class="headerlink" title="css3 新增有哪些"></a>css3 新增有哪些</h2><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><table><thead><tr><th>选择器</th><th align="center">例子</th><th>例子描述</th></tr></thead><tbody><tr><td>elem1~elem2</td><td align="center">p~ul</td><td>选择前面有&lt;p&gt;元素的每个&lt;ul&gt;元素</td></tr><tr><td>[attribute^&#x3D;value]</td><td align="center">a[src^&#x3D;”https”]</td><td>选择其 src 属性值以“HTTP 是”开头的每个&lt;a&gt;元素</td></tr><tr><td>[attribute$&#x3D;value]</td><td align="center">a[src$&#x3D;”.pdf”]</td><td>选择其 src 属性以“.pdf”结尾的所有&lt;a&gt;元素</td></tr><tr><td>[attribute*&#x3D;value]</td><td align="center">a[src*&#x3D;”abd”]</td><td>选择其 src 属性中包含“abc”子串的每个&lt;a&gt;元素</td></tr><tr><td>:first-of-type</td><td align="center">p:first-of-type</td><td>选择属于其父元素的首个&lt;p&gt;元素的每个&lt;p&gt;元素</td></tr><tr><td>:last-of-type</td><td align="center">p:last-of-type</td><td>选择属于其父元素的最后&lt;p&gt;元素的每个&lt;p&gt;元素</td></tr><tr><td>:only-of-type</td><td align="center">p:only-of-type</td><td>选择属于其父元素的唯一的&lt;p&gt;元素的每个&lt;p&gt;元素</td></tr><tr><td>:noly-child</td><td align="center">p:only-child</td><td>选择属于其父元素的唯一子元素的每个&lt;p&gt;元素</td></tr><tr><td>:nth-child(n)</td><td align="center">p:nth-child(2)</td><td>选择属于其父元素的第二个子元素的每个&lt;p&gt;元素</td></tr><tr><td>:nth-last-child(n)</td><td align="center">p:nth-last-child(2)</td><td>同上，从最后一个子元素开始计数</td></tr><tr><td>:nth-of-type(n)</td><td align="center">p:nth-of-type(2)</td><td>选择属于其父元素第二个&lt;p&gt;元素的每个&lt;p&gt;元素</td></tr><tr><td>:nth-last-of-type(n)</td><td align="center">p:nth-last-of-type(2)</td><td>同上，但是从最后一个子元素开始计数</td></tr><tr><td>:last-child</td><td align="center">p:last-child</td><td>选择属于其父元素最后一个子元素每个&lt;p&gt;元素</td></tr></tbody></table><h3 id="新样式"><a href="#新样式" class="headerlink" title="新样式"></a>新样式</h3><ul><li><p>边框</p><blockquote><ul><li>border-radius: 创建圆角边框</li><li>box-shadow: 为元素添加阴影</li><li>border-image: 使用图片来绘制边框</li></ul></blockquote></li><li><p>box-shadow</p><blockquote><p>设置元素阴影，设置属性如下：</p><ul><li>水平阴影</li><li>垂直阴影</li><li>模糊距离</li><li>阴影尺寸（影子大小）</li><li>阴影颜色</li><li>内&#x2F;外阴影</li></ul><p>其中水平阴影和垂直阴影是必须设置的</p></blockquote></li></ul><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>新增了几个关于背景的属性，分别是<code>background-clip</code>、<code>background-origin</code>、<code>background-size</code> 和 <code>background-break</code></p><ul><li><p>background-clip</p><blockquote><p>用于确定背景画区，有以下几种可能的属性：</p><ul><li>background-clip: border-box; 背景从 <code>border</code> 开始显示</li><li>background-clip: padding-box; 背景从 <code>padding</code> 开始显示</li><li>background-clip: content-box; 背景从 <code>content</code> 区域开始显示</li><li>background-clip: no-clip; 默认属性，等同于 <code>border-box</code></li></ul></blockquote></li><li><p>background-origin</p><blockquote><p>我们设置背景图片时，图片是会以左上角对齐，但是是以 <code>border</code> 的左上角对齐还是以 <code>padding</code> 的左上角或者 <code>content</code> 的左上角对齐？<code>border-origin</code> 正是用来设置这个的</p><ul><li>background-origin: border-box; 从 <code>border</code> 开始计算 <code>background-position</code></li><li>background-origin: padding-box; 从 <code>padding</code> 开始计算 <code>background-position</code></li><li>background-origin: content-box; 从 <code>content</code> 开始计算 <code>background-position</code></li></ul><p>默认情况是 <code>padding-box</code>，即以 <code>padding</code> 的左上角为原定</p></blockquote></li><li><p>background-size</p><blockquote><p><code>background-size</code> 属性常用来调整背景图片的大小，主要用于设定图片本身。有以下可能的属性：</p><ul><li>background-size: contain; 缩小图片以适合元素（维持像素长宽比）</li><li>background-size: cover; 扩展元素以填补元素（维持像素长宽比）</li><li>background-size: 100px 100px; 缩小图片至指定的大小</li><li>background-size: 50% 100%; 缩小图片至指定的大小，百分比是相对包含元素的尺寸</li></ul></blockquote></li><li><p>background-break</p><blockquote><p>元素可以被分成几个独立的盒子（如使内联元素 span 跨越多行），background-break 属性用来控制背景怎样在这些不同的盒子中显示</p><ul><li>background-break: continous; 默认值。忽略盒之间的距离（也就是像元素没有分成多个盒子，依然是一个整体一样）</li><li>background-break: bounding-box; 把盒之间的距离计算在内</li><li>background-break: each-box; 为每个盒子单独重绘背景</li></ul></blockquote></li></ul><h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><ul><li><p>word-wrap</p><blockquote><p>语法：word-wrap: normal | break-wrod</p><ul><li>normal: 使用浏览器默认的换行</li><li>break-all: 允许在单词内换行</li></ul></blockquote></li><li><p>text-overflow</p><blockquote><p><code>text-overflow</code> 设置或检索当当前行超过指定容器的边界时如何显示，属性有两个值选择：</p><ul><li>clip: 修剪文本</li><li>ellipsis: 显示省略符号来代表被修剪的文本</li></ul></blockquote></li><li><p>text-shadow</p><blockquote><p><code>text-shadow</code>可向文本应用阴影。能够规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色</p></blockquote></li><li><p>text-decoration</p><blockquote><p><code>CSS3</code> 里面开始支持对文字的更深层次的渲染，具体有三个属性可供设置：</p><ul><li>text-fill-color: 设置文字内部填充颜色</li><li>text-stroke-color: 设置文字边界填充颜色</li><li>text-stroke-width: 设置文字边界宽度</li></ul></blockquote></li></ul><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><blockquote><p>css3 新增了新的颜色表示方式 rgba 与 hsla</p><ul><li>rgba 分为两部分，rgb 为颜色值，a 为透明度</li><li>hala 分为四部分，h 为色相，s 为饱和度，l 为亮度，a 为透明度</li></ul></blockquote><h2 id="transition-过渡"><a href="#transition-过渡" class="headerlink" title="transition 过渡"></a>transition 过渡</h2><blockquote><p><code>transition</code> 属性可以被指定为一个或多个 <code>CSS</code> 属性的过渡效果，多个属性之间用逗号进行分隔，必须规定两项内容：</p><ul><li>过渡效果</li><li>持续时间</li></ul></blockquote><p>语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition</span>： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>上面为简写模式，也可以分开写各个属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition-property</span>: width;</span><br><span class="line"><span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line"><span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line"><span class="attribute">transition-delay</span>: <span class="number">2s</span>;</span><br></pre></td></tr></table></figure><h2 id="transform-转换"><a href="#transform-转换" class="headerlink" title="transform 转换"></a>transform 转换</h2><blockquote><p><code>transform</code> 属性允许你旋转，缩放，倾斜或平移给定元素</p><p><code>transform-origin</code>：转换元素的位置（围绕那个点进行转换），默认值为(x,y,z):(50%,50%,0)</p><p>使用方式：</p><ul><li>transform: translate(120px, 50%)：位移</li><li>transform: scale(2, 0.5)：缩放</li><li>transform: rotate(0.5turn)：旋转</li><li>transform: skew(30deg, 20deg)：倾斜</li></ul></blockquote><h2 id="animation-动画"><a href="#animation-动画" class="headerlink" title="animation 动画"></a>animation 动画</h2><blockquote><p>动画这个平常用的也很多，主要是做一个预设的动画。和一些页面交互的动画效果，结果和过渡应该一样，让页面不会那么生硬</p><p><code>animation</code> 也有很多的属性</p><ul><li>animation-name：动画名称</li><li>animation-duration：动画持续时间</li><li>animation-timing-function：动画时间函数</li><li>animation-delay：动画延迟时间</li><li>animation-iteration-count：动画执行次数，可以设置为一个整数，也可以设置为 infinite，意思是无限循环</li><li>animation-direction：动画执行方向</li><li>animation-paly-state：动画播放状态</li><li>animation-fill-mode：动画填充模式</li></ul></blockquote><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><blockquote><p>颜色渐变是指在两个颜色之间平稳的过渡，<code>css3</code> 渐变包括</p></blockquote><ul><li><p>linear-gradient：线性渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(direction, color-stop1, color-stop2, …);</span><br></pre></td></tr></table></figure></li><li><p>radial-gradient：径向渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(<span class="number">0deg</span>, red, green);</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><ul><li><a href="https://blog.csdn.net/u012138854/article/details/127740658">https://blog.csdn.net/u012138854/article/details/127740658</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（1）</title>
      <link href="/post/4eb916e2.html"/>
      <url>/post/4eb916e2.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>由于个人觉得找工作的时候有和没有实习经历是不一样的，所以就特别想在找正式工作之前，经历一个实习，<br>然后就投递了一些简历（我投的时候，是挑着投的，后来有经验的人说，实习嘛，不应该追求工资，所以不要挑，<br>别人要你就行）。然后今天下午收到了一个笔试链接，因为之前投递后，也会有一些链接，让你填写一些类似公<br>务员考试的那种场景题、逻辑题、还有一些工作场景中会有的问题，问你如何解决，结果这一次不是，我点进去<br>一看，只有三个题，30 分钟，我瞬间觉得是正儿八经的笔试题，但是回不去了，开着摄像头呢，没办法，做吧，<br>由于太紧张，第一个提看了七分钟还没有头绪，就想着先做后面的，然后平静下来后，回来在做，结果…，人<br>家规定提交上一个，才来做下一个，但是因为时间关系，没办法，我只能放弃第一个了，后面俩个做的挺顺利的，<br>一共 23 分钟，这时候，我想其实第一个也不难，但是没机会了，哎第一个题就是让你从给定的数组中选出出现<br>次数最多的元素，可能不止一个。看到这个题，我就想如何存储每一个数字的次数，思路对，但是数据结构…，<br>由于平时用的 java，一下就想到了 map，但是 js 有 map 吗？忘了，尴尬，没办法，用数组吧，本来用数组<br>也挺简单，紧张的不行竟然想着用两个存储，对应位置一个记录数字，一个记录次数，线上的 ide，没有提示，<br>好像有的方法也没法用，比如 indexOf，最终无疾而终</p><h2 id="正确的答案"><a href="#正确的答案" class="headerlink" title="正确的答案"></a>正确的答案</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getReaptNums</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    res[arr[i]]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (max &lt; res[i]) max = res[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res[i] == max) ans.<span class="title function_">push</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html相关知识（2）</title>
      <link href="/post/c4d42ff.html"/>
      <url>/post/c4d42ff.html</url>
      
        <content type="html"><![CDATA[<p>HTML 为标题的文章主要记录了自己在 HTML 学习的过程中遇到的知识点</p><h2 id="如何理解-HTML-的语义化"><a href="#如何理解-HTML-的语义化" class="headerlink" title="如何理解 HTML 的语义化"></a>如何理解 HTML 的语义化</h2><blockquote><ul><li>让人更容易读懂代码（增加代码可读性）</li><li>让搜索引擎更容易读懂（SEO-搜索引擎优化）</li></ul></blockquote><p>在此基础上列举一个简单的例子，比如说标题使用 div 和 h1，列表使用 div 和 ul、li 等的对比。</p><h2 id="默认情况下，哪些是块状元素，哪些是内联元素"><a href="#默认情况下，哪些是块状元素，哪些是内联元素" class="headerlink" title="默认情况下，哪些是块状元素，哪些是内联元素"></a>默认情况下，哪些是块状元素，哪些是内联元素</h2><blockquote><p>display：block&#x2F;table div、table、h1、h2、…、ul、ol、p<br>display：inline&#x2F;inline-block span、img、input、button</p></blockquote><h2 id="float-布局：如何实现圣杯布局和双飞翼布局、手写-clearfix"><a href="#float-布局：如何实现圣杯布局和双飞翼布局、手写-clearfix" class="headerlink" title="float 布局：如何实现圣杯布局和双飞翼布局、手写 clearfix"></a>float 布局：如何实现圣杯布局和双飞翼布局、手写 clearfix</h2><blockquote><ul><li>圣杯布局和双飞翼布局的目的：1）、三栏布局，中间一栏最先加载和渲染（内容最重要） 2）、两侧内容固定，中间内容随着宽度自适应 3）、一般用于 PC 网页</li><li>圣杯布局和双飞翼布局的技术总结：1）、使用 float 布局 2）、两侧使用 margin 负值，以便和中间内容横向重叠 3）、防止中间内容被两侧覆盖，一个用 padding、一个用 margin</li></ul></blockquote><h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#header</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-right</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: -<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 手写 clearfix */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 兼容IE低版本 */</span></span></span><br><span class="line"><span class="language-css">        *zoom: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>this is header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>this is center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>this is left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>this is right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>this is footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>双飞翼布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.col</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#main</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#main-wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">190px</span> <span class="number">0</span> <span class="number">190px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">190px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#0000ff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">190px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">190px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main-wrap&quot;</span>&gt;</span>this is main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>this is left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>this is right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex-实现三点骰子"><a href="#flex-实现三点骰子" class="headerlink" title="flex 实现三点骰子"></a>flex 实现三点骰子</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-self</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-self</span>: self-end;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo搭建博客的第一篇文章</title>
      <link href="/post/bbb939dd.html"/>
      <url>/post/bbb939dd.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
