<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/9cc742f5.html"/>
      <url>/post/9cc742f5.html</url>
      
        <content type="html"><![CDATA[<h3 id="如何解决使用-JSON-stringify-时遇到的循环引用问题"><a href="#如何解决使用-JSON-stringify-时遇到的循环引用问题" class="headerlink" title="如何解决使用 JSON.stringify 时遇到的循环引用问题"></a>如何解决使用 JSON.stringify 时遇到的循环引用问题</h3><blockquote><ul><li>自定义序列化函数：我们可以自定义对象的序列化函数，通过特定的逻辑过滤循环引用的情况，然后调用 JSON.stringify() 方法进行序列化。下面是一个示例代码：代码中，我们通过自定义 replacer() 函数来解决循环引用问题。该函数将在序列化每一个属性值时被调用，如果属性值是对象并且不为 null，则判断其是否已被序列化过。如果是，则返回字符串 ‘[Circular]’，否则将其推入缓存数组 cache 中，继续往下序列化</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replacer</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;object&quot;</span> &amp;&amp; value !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache.<span class="title function_">includes</span>(value)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;[Circular]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cache.<span class="title function_">push</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stringifyWithCircular</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj, replacer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line">obj.<span class="property">b</span> = obj;</span><br><span class="line"><span class="keyword">var</span> cache = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">stringifyWithCircular</span>(obj));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种形式</span></span><br><span class="line"><span class="keyword">var</span> cache = [];</span><br><span class="line"><span class="keyword">var</span> json_str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(json_data, <span class="keyword">function</span> (<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;object&quot;</span> &amp;&amp; value !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache.<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cache.<span class="title function_">push</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 释放cache</span></span><br><span class="line">cache = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>使用第三方库 circular-json：除了自定义序列化函数以外，我们还可以使用第三方库 circular-json。circular-json 库提供了一组序列化和反序列化函数，能够正常地处理循环引用对象的序列化和反序列化。下面是一个示例代码</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CircularJSON</span> = <span class="built_in">require</span>(<span class="string">&quot;circular-json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">obj.<span class="property">b</span> = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">CircularJSON</span>.<span class="title function_">stringify</span>(obj));</span><br></pre></td></tr></table></figure><h3 id="如何画一个和屏幕宽高相等的正方形区域"><a href="#如何画一个和屏幕宽高相等的正方形区域" class="headerlink" title="如何画一个和屏幕宽高相等的正方形区域"></a>如何画一个和屏幕宽高相等的正方形区域</h3><blockquote><ul><li>使用 vw</li><li>使用 padding，因为 padding 的百分比是相对于父元素的宽度的</li></ul></blockquote><h3 id="如何跳过图形验证码验证"><a href="#如何跳过图形验证码验证" class="headerlink" title="如何跳过图形验证码验证"></a>如何跳过图形验证码验证</h3><blockquote><p>验证码是什么？</p><p>验证码分两种：</p><ul><li>验证码是一种区分用户是计算机还是人的公共全自动程序（比如登陆的时候要填写的）</li><li>识别身份，比如短信验证码、电话验证码、邮箱验证码</li></ul></blockquote><blockquote><p>验证码有哪几种</p><ul><li>有中文字符，纯数字，点击字符、数学运算，移动方块等等</li></ul></blockquote><blockquote><p>验证码有什么作用</p><ul><li>可以防止恶意破解密码、刷票、论坛灌水，有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试，实际上用验证码是现在很多网站通行的方式，我们利用比较简易的方式实现了这个功能。</li></ul></blockquote><blockquote><p>验证码一定可靠吗</p><ul><li>不一定可靠，验证码如果在书写代码的时候存在逻辑漏洞，就比较容易绕过。即使没有逻辑漏洞，如果验证码的图片混淆比较简单，可以写脚本自动识别（python 有）</li></ul></blockquote><blockquote><p>验证码的常见安全问题</p><ul><li>前端验证验证码，并没有后端验证</li><li>验证码设置了但是并没有效验</li><li>验证码可以重复使用</li><li>空值绕过</li><li>验证码可控制</li><li>验证码有规则</li><li>有万能验证码</li><li>验证码放在 cookie 参数里</li></ul></blockquote><blockquote><p>前端验证码如何绕过</p><ul><li>直接抓包进行，因为后端没有验证</li></ul></blockquote><blockquote><p>验证码的规则一般是什么</p><ul><li>有很多种，不一定，要看代码怎么写，很多时候使用的 rand 函数生成随机数</li></ul></blockquote><blockquote><p>万能验证码一般是什么</p><ul><li>一般是 000000 或者 888888</li></ul></blockquote><blockquote><p>验证码空值绕过是怎么回事</p><ul><li>去除数据包里的验证码参数，发现绕过了传参机制，你不传这个参数，然后就没有进入验证码校验流程</li></ul></blockquote><blockquote><p>验证码可控是什么情况</p><ul><li>验证码可能存在于 url 传参里，url 设置定，验证码可控</li></ul></blockquote><blockquote><p>验证码放在 cookie 参数里要怎么去找</p><ul><li>查看 cookie 参数里有没有相应的值(验证码或相应参数名)</li></ul></blockquote><blockquote><p>验证码有时效性吗</p><ul><li>一般来说会有时效性，常见的是 30 分钟</li></ul></blockquote><blockquote><p>密码找回有哪几种方法</p><ul><li>通过邮箱发送重置链接或数字|字符串验证码</li><li>通过短信发送验证码</li></ul></blockquote><blockquote><p>密码找回一般有什么安全问题</p><ul><li>验证码发送前端返回</li><li>验证码输入无次数限制</li><li>验证码可控</li><li>直接访问修改密码页面发现直接可以改（缺失身份认证）</li><li>越权（自己手机的验证码，把别人密码改掉了）</li><li>密码保护问题出存在缺陷</li></ul></blockquote><blockquote><p>前端返回怎么利用</p><ul><li>查看返回的数据包（可以通过浏览器或者抓包工具）</li></ul></blockquote><blockquote><p>验证码可控有什么危害</p><ul><li>可以发送垃圾邮件，钓鱼网站链接，不良网站链接</li></ul></blockquote><blockquote><p>直接修改密码页面是什么情况</p><ul><li>一般是验证失败后还可以继续访问密码修改页面</li></ul></blockquote><blockquote><p>缺失身份认证是什么情况</p><ul><li>缺少相应的用户 id 和信息验证，可以用自己的手机号绑定他人的账号</li></ul></blockquote><blockquote><p>越权是什么</p><ul><li>通过自己的验证码，改包，去修改别人的密码</li></ul></blockquote><blockquote><p>越权和缺失身份认证的区别</p><ul><li>平行越权需要登录后使用，而缺失身份认证不用</li></ul></blockquote><blockquote><p>密码保护问题有哪些缺陷</p><ul><li>容易被猜测</li><li>答案在 js 里出现</li></ul></blockquote><blockquote><p>靶场的密码找回的用户名是哪个</p><ul><li>用户名是 admin，不是邮箱</li></ul></blockquote><blockquote><p>靶场的密码找回有几位</p><ul><li>4 位，源码和靶场都有提示</li></ul></blockquote><blockquote><p>如何去猜测别人的密码保护问题的答案</p><ul><li>通过蛛丝马迹分析，然后调用可用资源，去社工。</li></ul></blockquote><blockquote><p>验证码在 cookie 里会加密吗</p><ul><li>会，可能会通过 md5 之类的进行加密</li></ul></blockquote><blockquote><p>校验验证码一般有哪些生成规则</p><ul><li>可能对用户的用户名，密码，登陆时间之类的进行生成（这个可能性太多了，不过时间戳是比较常见的，以前遇到过，邮箱找回链接，只需要时间戳和用户名就可以修改密码，那样就能尝试爆破，自己先接一个看看规律）</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面经总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作刷题过程中做错的题</title>
      <link href="/post/ca717658.html"/>
      <url>/post/ca717658.html</url>
      
        <content type="html"><![CDATA[<h3 id="运算器的主要功能"><a href="#运算器的主要功能" class="headerlink" title="运算器的主要功能"></a>运算器的主要功能</h3><pre><code>运算器的主要功能：加、减、乘、除四则运算，与、或、非、异或等逻辑操作，以及移位、比较和传送等操作</code></pre><h3 id="唯一标识一个进程需要"><a href="#唯一标识一个进程需要" class="headerlink" title="唯一标识一个进程需要"></a>唯一标识一个进程需要</h3><pre><code>网络上唯一标识主机上的一个进程需要用一个二元组，即IP地址和端口的组合</code></pre><h3 id="用户界面事件是较高级事件吗"><a href="#用户界面事件是较高级事件吗" class="headerlink" title="用户界面事件是较高级事件吗"></a>用户界面事件是较高级事件吗</h3><pre><code>是</code></pre><h3 id="Javascript-事件"><a href="#Javascript-事件" class="headerlink" title="Javascript 事件"></a>Javascript 事件</h3><blockquote><p>JavaScript 事件分为三个阶段：</p><ul><li>捕获阶段：事件从父元素开始向目标元素传播，从 Window 对象开始传播</li><li>目标阶段：该事件到达目标元素或开始该事件的元素</li><li>冒泡阶段：这时与捕获阶段相反，事件向父元素传播，直到 Window 对象</li></ul></blockquote><p><strong>捕获阶段： 最先调用的是 Window 对象上注册的捕获处理程序，然后调用 Document 对象的捕获处理程序，接着是 <body>元素，沿着 DOM 树一直向下，直到事件目标元素的捕获事件处理程序被调用</strong><br><strong>冒泡阶段： 注册在元素上的事件处理程序被调用后，多数事件都会沿着 DOM 树向上“冒泡”，但到 Document 对象就会停止冒泡，不会传播到 Window 对象</strong></p><h3 id="TCP-x2F-IP-传输层不能提供无连接服务"><a href="#TCP-x2F-IP-传输层不能提供无连接服务" class="headerlink" title="TCP&#x2F;IP 传输层不能提供无连接服务"></a>TCP&#x2F;IP 传输层不能提供无连接服务</h3><pre><code>错</code></pre><h3 id="哪种声明是错误的"><a href="#哪种声明是错误的" class="headerlink" title="哪种声明是错误的"></a>哪种声明是错误的</h3><pre><code>    var a = &#123;&#125; | () | (1, 2) | //  var a = () 是错误的</code></pre><h3 id="关闭浏览器后，可以使用-max-age-延长-cookie-的有效期吗"><a href="#关闭浏览器后，可以使用-max-age-延长-cookie-的有效期吗" class="headerlink" title="关闭浏览器后，可以使用 max-age 延长 cookie 的有效期吗"></a>关闭浏览器后，可以使用 max-age 延长 cookie 的有效期吗</h3><pre><code>    可以</code></pre><h3 id="编译程序的作用"><a href="#编译程序的作用" class="headerlink" title="编译程序的作用"></a>编译程序的作用</h3><pre><code>    编译程序（Compiler，compiling program），也称为编译器，是指把用高级程序设计语言书写的源程序，翻译成等价的机器语言格式目标程序的翻译程序</code></pre><h3 id="input-的-type-属性可取值"><a href="#input-的-type-属性可取值" class="headerlink" title="input 的 type 属性可取值"></a>input 的 type 属性可取值</h3><pre><code>    text、password、file、button、**image**、checkbox、radio、hidden、submit、reset、number、tel、email、time、color、search、url</code></pre><h3 id="类和原型"><a href="#类和原型" class="headerlink" title="类和原型"></a>类和原型</h3><pre><code>    在JavaScript中，类的所有实例对象都从**同一个原型对象上**继承属性。因此，**原型对象是类的唯一标识**</code></pre><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h3><pre><code>    Array.of() 方法会创建一个包含任意数量元素的新数组。它与传统的 Array() 构造函数的区别在于，如果传递的参数是单个数字或字符串，那么 Array() 会将其作为数组的长度来使用，而 Array.of() 总是会将参数作为数组元素来使用</code></pre><h3 id="依据所有数据成员之间逻辑关系的不同，数据结构分为（-）"><a href="#依据所有数据成员之间逻辑关系的不同，数据结构分为（-）" class="headerlink" title="依据所有数据成员之间逻辑关系的不同，数据结构分为（ ）"></a>依据所有数据成员之间逻辑关系的不同，数据结构分为（ ）</h3><pre><code>    线性结构和非线性结构</code></pre><h3 id="如何规避-javascript-多人开发函数重名问题"><a href="#如何规避-javascript-多人开发函数重名问题" class="headerlink" title="如何规避 javascript 多人开发函数重名问题"></a>如何规避 javascript 多人开发函数重名问题</h3><blockquote><ul><li>使用命名空间。在 JavaScript 中，可以使用对象来作为命名空间，将函数包装在对象的属性中，这样就可以避免函数名冲突的问题</li><li>使用闭包。在 JavaScript 中，可以使用闭包来封装函数，这样就可以避免函数名冲突的问题</li><li>使用模块化开发。在 JavaScript 中，可以使用模块化开发的方式来组织代码，这样就可以避免函数名冲突的问题。例如，可以使用 CommonJS 或 ES6 模块规范来开发模块化代码</li><li>使用唯一的前缀。如果无法使用上述方法，可以考虑为所有函数名添加唯一的前缀，这样就可以避免函数名冲突的问题</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> job do error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job do error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/ebc07263.html"/>
      <url>/post/ebc07263.html</url>
      
        <content type="html"><![CDATA[<h2 id="nginx-相关配置"><a href="#nginx-相关配置" class="headerlink" title="nginx 相关配置"></a>nginx 相关配置</h2><h3 id="nginx-使用场景"><a href="#nginx-使用场景" class="headerlink" title="nginx 使用场景"></a>nginx 使用场景</h3><blockquote><p>Nginx 的最重要的几个使用场景：</p><ul><li>静态资源服务，通过本地文件系统提供服务</li><li>反向代理服务，延伸出包括缓存、负载均衡等</li><li>API 服务，OpenResty</li></ul></blockquote><h3 id="nginx-常用命令"><a href="#nginx-常用命令" class="headerlink" title="nginx 常用命令"></a>nginx 常用命令</h3><blockquote><ul><li>nginx -s reload # 向主进程发送信号，重新加载配置文件，热重启</li><li>nginx -s reopen # 重启 Nginx</li><li>nginx -s stop # 快速关闭</li><li>nginx -s quit # 等待工作进程处理完成后关闭</li><li>nginx -T # 查看当前 Nginx 最终的配置</li><li>nginx -t # 检查配置是否有问题</li><li>nginx -v # 查看 nginx 版本号</li><li>start nginx # 启动 nginx</li></ul></blockquote><h3 id="nginx-配置文件概述"><a href="#nginx-配置文件概述" class="headerlink" title="nginx 配置文件概述"></a>nginx 配置文件概述</h3><pre><code>nginx.conf主要由三部分组成： 全局块， events块， http块</code></pre><p><img src="/config/img/other/pre-18-1.png"></p><h3 id="配置文件概览"><a href="#配置文件概览" class="headerlink" title="配置文件概览"></a>配置文件概览</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"># 全局快</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># events块</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># http块</span><br><span class="line">http &#123;</span><br><span class="line">    # http全局块</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">    # server块</span><br><span class="line">    server &#123;</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">            # server全局块</span><br><span class="line">            listen       80;</span><br><span class="line">            server_name  localhost;</span><br><span class="line"></span><br><span class="line">            #charset koi8-r;</span><br><span class="line"></span><br><span class="line">            #access_log  logs/host.access.log  main;</span><br><span class="line">    ----------------------------------------------------------------------------</span><br><span class="line">            # location块</span><br><span class="line">                location / &#123;</span><br><span class="line">                    root   html;</span><br><span class="line">                    index  index.html index.htm;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">                # redirect server error pages to the static page /50x.html</span><br><span class="line">                #</span><br><span class="line">                error_page   500 502 503 504  /50x.html;</span><br><span class="line">                location = /50x.html &#123;</span><br><span class="line">                    root   html;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">                #</span><br><span class="line">                #location ~ \.php$ &#123;</span><br><span class="line">                #    proxy_pass   http://127.0.0.1;</span><br><span class="line">                #&#125;</span><br><span class="line"></span><br><span class="line">                # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">                #</span><br><span class="line">                #location ~ \.php$ &#123;</span><br><span class="line">                #    root           html;</span><br><span class="line">                #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">                #    fastcgi_index  index.php;</span><br><span class="line">                #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">                #    include        fastcgi_params;</span><br><span class="line">                #&#125;</span><br><span class="line"></span><br><span class="line">                # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">                # concurs with nginx&#x27;s one</span><br><span class="line">                #</span><br><span class="line">                #location ~ /\.ht &#123;</span><br><span class="line">                #    deny  all;</span><br><span class="line">                #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 可以配置多个server块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h3><pre><code>就是配置文件从头开始到events块之间的内容，主要设置的是影响nginx服务器整体运行的配置指令，一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等，比如worker_process, 值越大，可以支持的并发处理量也越多，但是还是和服务器的硬件相关</code></pre><h3 id="events-块"><a href="#events-块" class="headerlink" title="events 块"></a>events 块</h3><pre><code>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括每个进程的最大连接数，是否开启对多 work process下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等</code></pre><h3 id="http-块"><a href="#http-块" class="headerlink" title="http 块"></a>http 块</h3><pre><code>包括http全局块，以及多个server块，可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等</code></pre><h4 id="http-全局块"><a href="#http-全局块" class="headerlink" title="http 全局块"></a>http 全局块</h4><pre><code>http 全局块配置的指令包括文件引入、 MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等</code></pre><h4 id="server-块"><a href="#server-块" class="headerlink" title="server 块"></a>server 块</h4><pre><code>配置虚拟主机的相关参数，一个http中可以有多个server，这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机，每个 server 块也分为全局 server 块，以及可以同时包含多个 location 块</code></pre><h5 id="server-全局块"><a href="#server-全局块" class="headerlink" title="server 全局块"></a>server 全局块</h5><pre><code>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 这一行表示这个server块监听的端口是80，只要有请求访问了80端口，此server块就处理请求</span><br><span class="line">listen       80;</span><br><span class="line"># 表示这个server块代表的虚拟主机的名字</span><br><span class="line">server_name  localhost;</span><br></pre></td></tr></table></figure><h5 id="location-块"><a href="#location-块" class="headerlink" title="location 块"></a>location 块</h5><pre><code>配置请求的路由，以及各种页面的处理情况，一个 server 块可以配置多个 location 块.要作用是根据请求地址路径的匹配，匹配成功进行特定的处理,这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 表示如果请求路径是/就是用这个location块进行处理</span><br><span class="line">location / &#123;</span><br><span class="line">  root   html;</span><br><span class="line">  index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例详解"><a href="#案例详解" class="headerlink" title="案例详解"></a>案例详解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">########### 每个指令必须有分号结束 #################</span><br><span class="line"></span><br><span class="line"># user administrator administrators;               # 配置用户或者组，默认为nobody nobody</span><br><span class="line"># worker_processes 2;                              # 允许生成的进程数，默认为1</span><br><span class="line"># pid /nginx/pid/nginx.pid;                        # 指定nginx进程运行文件存放地址</span><br><span class="line">error_log log/error.log debug;                     # 制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;                               # 设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line">    multi_accept on;                               # 设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">    # use epoll;                                   # 事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br><span class="line">    worker_connections  1024;                      # 最大连接数，默认为512</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;                     # 文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application/octet-stream;       # 默认文件类型，默认为text/plain</span><br><span class="line">    # access_log off;                             # 取消服务日志</span><br><span class="line">    log_format myFormat &#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;;   # 自定义格式</span><br><span class="line">    access_log log/access.log myFormat;           # combined为日志格式的默认值</span><br><span class="line">    sendfile on;                                  # 允许sendfile方式传输文件，默认为off，可以在http块，server块，location块</span><br><span class="line">    sendfile_max_chunk 100k;                      # 每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限</span><br><span class="line">    keepalive_timeout 65;                         # 连接超时时间，默认为75s，可以在http，server，location块</span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;</span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;          # 热备</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 https://www.baidu.com;         # 错误页</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120;                   # 单连接请求上限次数</span><br><span class="line">        listen       4545;                        # 监听端口</span><br><span class="line">        server_name  127.0.0.1;                   # 监听地址</span><br><span class="line">        location  ~*^.+$ &#123;                        # 请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">          # root path;                           # 根目录</span><br><span class="line">          # index vv.txt;                        # 设置默认页</span><br><span class="line">          proxy_pass  http://mysvr;              # 请求转向mysvr 定义的服务器列表</span><br><span class="line">          deny 127.0.0.1;                        # 拒绝的ip</span><br><span class="line">          allow 172.18.5.54;                     # 允许的ip</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><ul><li>$remote_addr 与 $http_x_forwarded_for 用以记录客户端的 ip 地址</li><li>$remote_user ：用来记录客户端用户名称</li><li>$time_local ： 用来记录访问时间与时区</li><li>$request ： 用来记录请求的 url 与 http 协议</li><li>$status ： 用来记录请求状态；成功是 200</li><li>$body_bytes_sent ：记录发送给客户端文件主体内容大小</li><li>$http_referer ：用来记录从那个页面链接访问过来的</li><li>$http_user_agent ：记录客户端浏览器的相关信息</li><li>惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能</li><li>每个指令必须有分号结束</li></ul></blockquote><h2 id="常用配置案例"><a href="#常用配置案例" class="headerlink" title="常用配置案例"></a>常用配置案例</h2><h3 id="文件上传大小"><a href="#文件上传大小" class="headerlink" title="文件上传大小"></a>文件上传大小</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  # 设置nginx文件上传大小限制</span><br><span class="line">  client_max_body_size 200M;</span><br><span class="line">  client_body_buffer_size 50M;</span><br><span class="line">  fastcgi_intercept_errors on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http-与-https"><a href="#http-与-https" class="headerlink" title="http 与 https"></a>http 与 https</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># http 端口</span><br><span class="line">server &#123;</span><br><span class="line">  rewrite ^(.*)$ https://$host$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 同时http、https端口</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  listen 443 ssl;</span><br><span class="line">  server_name  localhost;</span><br><span class="line">  if ($scheme = http) &#123;</span><br><span class="line">      return 301 https://$host$request_uri;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># redirect重定向https跳转http问题，报错“400 Bad Request: The plain HTTP request was sent to HTTPS port”</span><br><span class="line"># 解决方法：</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">proxy_pass http://172.17.x.xxx:8081;</span><br><span class="line">proxy_redirect http:// https://;</span><br><span class="line"></span><br><span class="line"># 错误页重定向</span><br><span class="line">server &#123;</span><br><span class="line">    listen 8001 ssl;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    error_page 497 https://$host:8009$uri?$args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 隐藏版本号</span><br><span class="line">http &#123;</span><br><span class="line">  server_tokens off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 负载均衡（upstream）</span><br><span class="line">upstream xxx.com &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.8.11:80;</span><br><span class="line">    server 192.168.8.12:80 down;</span><br><span class="line">    server 192.168.8.13:8009 max_fails=3 fail_timeout=20s;</span><br><span class="line">    server 192.168.8.146:8080;</span><br><span class="line">&#125;</span><br><span class="line"># 注意：当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup</span><br><span class="line"></span><br><span class="line"># upstream是Nginx的HTTP Upstream模块，这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡</span><br><span class="line"># 在上面的设定中，通过upstream指令指定了一个负载均衡器的名称xxx.com，这个名称可以任意指定，在后面需要的地方直接调用即可</span><br></pre></td></tr></table></figure><blockquote><p>实现流程是根据 nginx 的不同执行阶段，来完成 Location http 到 https</p><ul><li>proxy_pass 执行前，先设置了 request head host 为 https 外网访问的域名+端口</li><li>proxy_pass 执行后，tomcat 结果返回 response</li><li>proxy_redirect 修改 response 中的 location 中的协议 http 为 https 外网访问的协议。</li><li><strong>redirect 重定向主要是通过访问 nginx 服务的请求 head 项来决定的，默认是 http 协议，域名是通过读取 host 地址，默认 host 中不包括访问端口</strong></li></ul></blockquote><blockquote><p>Nginx 的负载均衡模块目前支持 4 种调度算法，下面进行分别介绍，其中后两项属于第三方的调度方法</p><ul><li>轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响</li><li>Weight：指定轮询权值，Weight 值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下</li><li>ip_hash：每个请求按访问 IP 的 hash 结果分配，这样来自同一个 IP 的访客固定访问一个后端服务器，有效解决了动态网页存在的 session 共享问题</li><li>fair：比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx 本身是不支持 fair 的，如果需要使用这种调度算法，必须下载 Nginx 的 upstream_fair 模块</li><li>url_hash：按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx 本身是不支持 url_hash 的，如果需要使用这种调度算法，必须安装 Nginx 的 hash 软件包</li></ul></blockquote><blockquote><p>在 HTTP Upstream 模块中，可以通过 server 指令指定后端服务器的 IP 地址和端口，同时还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有：</p><ul><li>down：表示当前的 server 暂时不参与负载均衡</li><li>backup：预留的备份机器。当其他所有的非 backup 机器出现故障或者忙的时候，才会请求 backup 机器，因此这台机器的压力最轻</li><li>max_fails：允许请求失败的次数，默认为 1。当超过最大次数时，返回 proxy_next_upstream 模块定义的错误</li><li>fail_timeout：在经历了 max_fails 次失败后，暂停服务的时间。max_fails 可以和 fail_timeout 一起使用</li></ul></blockquote><h3 id="禁止文件缓存"><a href="#禁止文件缓存" class="headerlink" title="禁止文件缓存"></a>禁止文件缓存</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 开发环境可使用</span><br><span class="line">location ~* \.(js|css|png|jpg|gif)$ &#123;</span><br><span class="line">  add_header Cache-Control no-store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><pre><code>防止文件被其他网站使用</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(gif|jpg|png)$ &#123;</span><br><span class="line">  # 只允许 192.168.0.1 请求资源</span><br><span class="line">  valid_referers none blocked 192.168.0.1;</span><br><span class="line">  if ($invalid_referer) &#123;</span><br><span class="line">      rewrite ^/ http://$host/logo.png;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  # 开启gzip 压缩</span><br><span class="line">  gzip on;</span><br><span class="line">  # 设置gzip所需的http协议最低版本 （HTTP/1.1, HTTP/1.0）</span><br><span class="line">  gzip_http_version 1.1;</span><br><span class="line">  # 设置压缩级别，压缩级别越高压缩时间越长  （1-9）</span><br><span class="line">  gzip_comp_level 4;</span><br><span class="line">  # 设置压缩的最小字节数， 页面Content-Length获取</span><br><span class="line">  gzip_min_length 1000;</span><br><span class="line">  # 设置压缩文件的类型  （text/html)</span><br><span class="line">  gzip_types text/plain application/javascript text/css;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定错误页面"><a href="#指定错误页面" class="headerlink" title="指定错误页面"></a>指定错误页面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 根据状态码，返回对于的错误页面</span><br><span class="line">error_page 500 502 503 504 /50x.html;</span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">  root /source/error_page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">## 配置反向代理的参数</span><br><span class="line">server &#123;</span><br><span class="line">  listen 8080;</span><br><span class="line">  server_name xx_domain</span><br><span class="line">  ## 1. 用户访问 http://xx_domain，则反向代理到 https://github.com</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass  https://github.com;</span><br><span class="line">    proxy_redirect     off;</span><br><span class="line">    proxy_set_header   Host $host;</span><br><span class="line">    # 传递域名</span><br><span class="line">    proxy_set_header   X-Real-IP        $remote_addr;</span><br><span class="line">    # 传递ip</span><br><span class="line">    proxy_set_header   X-Scheme         $scheme;</span><br><span class="line">    # 传递协议</span><br><span class="line">    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 监听端口 HTTPS</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name xxx.com;</span><br><span class="line">    # 配置域名证书</span><br><span class="line">    ssl_certificate C:\WebServer\Certs\certificate.crt;</span><br><span class="line">    ssl_certificate_key C:\WebServer\Certs\private.key;</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols SSLv2 SSLv3 TLSv1;</span><br><span class="line">    ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;ssl_prefer_server_ciphers on;</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">    root /data/www/;</span><br><span class="line">    location ~ .*\.(php|php5)?$ &#123;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">    # 配置地址拦截转发，解决跨域验证问题</span><br><span class="line">    location /oauth/ &#123;</span><br><span class="line">        proxy_pass https://localhost:13580/oauth/;</span><br><span class="line">        proxy_set_header HOST $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面经总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/7b7f6ff2.html"/>
      <url>/post/7b7f6ff2.html</url>
      
        <content type="html"><![CDATA[<h3 id="vue-自定义指令实现按钮权限"><a href="#vue-自定义指令实现按钮权限" class="headerlink" title="vue 自定义指令实现按钮权限"></a>vue 自定义指令实现按钮权限</h3><blockquote><p>自定义指令有五个生命周期（也叫钩子函数），分别是：bind,inserted,update,componentUpdated,unbind</p><ul><li>bind：只调用一次，指令第一次绑定到元素时调用。用这个钩子函数可以定义一个绑定时执行一次的初始化设置。（ bind 时父节点为 null，因为 bind 是在 dom 树绘制前调用）</li><li>inserted：被绑定元素插入父节点时调用（仅保证父节点存在，但不一定已被插入文档中，在 dom 树绘制后调用）</li><li>update：被绑定于元素所在的模板 vNode 更新时调用，但是可能发生在其子 vNode，更新之前。指令的值可能发生了改变，也可能没有。可以通过比较更新前后的绑定值，来忽略不必要的模板更新</li><li>componentUpdated：被绑定元素所在组件的 VNode 及其子 VNode 全部更新后调用</li><li>unbind：只调用一次，指令与元素解绑时调用</li></ul></blockquote><blockquote><p>钩子函数参数说明，自定义指令中传递的常用参数：</p><ul><li><p>el： 指令所绑定的元素，可以用来直接操作 DOM。</p></li><li><p>binding： 一个对象，包含指令的很多信息。如下：</p></li><li><p>name：指令名，不包括 v- 前缀</p></li><li><p>value：指令的绑定值，例如：v-my-directive&#x3D;“1 + 1” 中，绑定值为 2</p></li><li><p>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用</p></li><li><p>expression：字符串形式的指令表达式。例如 v-my-directive&#x3D;“1 + 1” 中，表达式为 “1 + 1”</p></li><li><p>arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”</p></li><li><p>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }</p></li><li><p>vnode：Vue 编译生成的虚拟节点</p></li><li><p>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用</p></li><li><p>除了 el 之外，其它参数都应该是只读的</p></li></ul></blockquote><pre><code>在 el-button 按钮上设置标签数值，利用 vue的指令功能获取按钮实例对象和按钮上绑定的标签数值，与从接口拿到的按钮权限数据进行匹配，如果匹配成功，证明用户拥有该按钮的使用权限，如果发现没有使用权限，则在指令处理函数中编写代码移除该按钮，界面上就看不到该按钮了</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">// 检测是否有权限</span></span><br><span class="line"><span class="comment">// 使用Vue.directive声明自定义指令btn-key</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> permissions = <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;permission&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * inserted：被绑定元素插入父节点时调用</span></span><br><span class="line"><span class="comment">   * el：指令所绑定的元素，可以用来直接操作 DOM</span></span><br><span class="line"><span class="comment">   * binding.value：指令的绑定值，例如：v-directive=&quot;10&quot; 中，绑定值为 10。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> buttonKey = binding.<span class="property">value</span>;</span><br><span class="line">    <span class="comment">// 代表某个元素需要通过权限验证</span></span><br><span class="line">    <span class="keyword">if</span> (buttonKey) &#123;</span><br><span class="line">      <span class="keyword">let</span> key = <span class="title function_">checkKey</span>(buttonKey);</span><br><span class="line">      <span class="comment">// 没有权限</span></span><br><span class="line">      <span class="keyword">if</span> (!key) &#123;</span><br><span class="line">        <span class="comment">// 删除按钮</span></span><br><span class="line">        el.<span class="title function_">remove</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;缺少唯一指令&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测传入的元素key是否可以显示</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkKey</span>(<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取权限数组</span></span><br><span class="line">  <span class="keyword">let</span> permissionData = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;permissionData&quot;</span>)</span><br><span class="line">    ? <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;permissionData&quot;</span>)</span><br><span class="line">    : [];</span><br><span class="line">  <span class="comment">// 如果传入的元素key不在权限数组里，则不可显示</span></span><br><span class="line">  <span class="keyword">let</span> index = permissionData.<span class="title function_">indexOf</span>(key);</span><br><span class="line">  <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;button v-permission=<span class="string">&quot;delete&quot;</span>&gt;删除&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-permission</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="自定义指令的使用场景"><a href="#自定义指令的使用场景" class="headerlink" title="自定义指令的使用场景"></a>自定义指令的使用场景</h3><blockquote><p>使用自定义组件组件可以满足我们日常一些场景，这里给出几个自定义组件的案例：</p><ul><li>防抖</li><li>图片懒加载</li><li>一键 Copy 的功能</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置v-throttle自定义指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;throttle&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">bind</span>: <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 防抖时间</span></span><br><span class="line">    <span class="keyword">let</span> throttleTime = binding.<span class="property">value</span>;</span><br><span class="line">    <span class="comment">// 用户若不设置防抖时间，则默认2s</span></span><br><span class="line">    <span class="keyword">if</span> (!throttleTime) &#123;</span><br><span class="line">      throttleTime = <span class="number">2000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> cbFun;</span><br><span class="line">    el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 第一次执行</span></span><br><span class="line">      <span class="keyword">if</span> (!cbFun) &#123;</span><br><span class="line">        cbFun = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          cbFun = <span class="literal">null</span>;</span><br><span class="line">        &#125;, throttleTime);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        event &amp;&amp; event.<span class="title function_">stopImmediatePropagation</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="literal">true</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 为button标签设置v-throttle自定义指令</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sayHello&quot;</span> <span class="attr">v-throttle</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>设置一个 v-lazy 自定义组件实现图片懒加载</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">LazyLoad</span> = &#123;</span><br><span class="line">  <span class="comment">// install方法</span></span><br><span class="line">  <span class="title function_">install</span>(<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 代替图片的loading图</span></span><br><span class="line">    <span class="keyword">let</span> defaultSrc = options.<span class="property">default</span>;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;lazy&quot;</span>, &#123;</span><br><span class="line">      <span class="title function_">bind</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">        <span class="title class_">LazyLoad</span>.<span class="title function_">init</span>(el, binding.<span class="property">value</span>, defaultSrc);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">inserted</span>(<span class="params">el</span>) &#123;</span><br><span class="line">        <span class="comment">// 兼容处理</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;IntersectionObserver&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">          <span class="title class_">LazyLoad</span>.<span class="title function_">observe</span>(el);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title class_">LazyLoad</span>.<span class="title function_">listenerScroll</span>(el);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="title function_">init</span>(<span class="params">el, val, def</span>) &#123;</span><br><span class="line">    <span class="comment">// data-src 储存真实src</span></span><br><span class="line">    el.<span class="title function_">setAttribute</span>(<span class="string">&quot;data-src&quot;</span>, val);</span><br><span class="line">    <span class="comment">// 设置src为loading图</span></span><br><span class="line">    el.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, def);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 利用IntersectionObserver监听el</span></span><br><span class="line">  <span class="title function_">observe</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> io = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> realSrc = el.<span class="property">dataset</span>.<span class="property">src</span>;</span><br><span class="line">      <span class="keyword">if</span> (entries[<span class="number">0</span>].<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (realSrc) &#123;</span><br><span class="line">          el.<span class="property">src</span> = realSrc;</span><br><span class="line">          el.<span class="title function_">removeAttribute</span>(<span class="string">&quot;data-src&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    io.<span class="title function_">observe</span>(el);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 监听scroll事件</span></span><br><span class="line">  <span class="title function_">listenerScroll</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> handler = <span class="title class_">LazyLoad</span>.<span class="title function_">throttle</span>(<span class="title class_">LazyLoad</span>.<span class="property">load</span>, <span class="number">300</span>);</span><br><span class="line">    <span class="title class_">LazyLoad</span>.<span class="title function_">load</span>(el);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">handler</span>(el);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 加载真实图片</span></span><br><span class="line">  <span class="title function_">load</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> windowHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line">    <span class="keyword">let</span> elTop = el.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>;</span><br><span class="line">    <span class="keyword">let</span> elBtm = el.<span class="title function_">getBoundingClientRect</span>().<span class="property">bottom</span>;</span><br><span class="line">    <span class="keyword">let</span> realSrc = el.<span class="property">dataset</span>.<span class="property">src</span>;</span><br><span class="line">    <span class="keyword">if</span> (elTop - windowHeight &lt; <span class="number">0</span> &amp;&amp; elBtm &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (realSrc) &#123;</span><br><span class="line">        el.<span class="property">src</span> = realSrc;</span><br><span class="line">        el.<span class="title function_">removeAttribute</span>(<span class="string">&quot;data-src&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 节流</span></span><br><span class="line">  <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">let</span> prevTime;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> currTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">      <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="keyword">if</span> (!prevTime) prevTime = currTime;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (currTime - prevTime &gt; delay) &#123;</span><br><span class="line">        prevTime = currTime;</span><br><span class="line">        fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        prevTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">        fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">LazyLoad</span>;</span><br></pre></td></tr></table></figure><pre><code>设置一键Copy的功能</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vCopy = &#123; <span class="comment">//</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    bind 钩子函数，第一次绑定时调用，可以在这里做初始化设置</span></span><br><span class="line"><span class="comment">    el: 作用的 dom 对象</span></span><br><span class="line"><span class="comment">    value: 传给指令的值，也就是我们要 copy 的值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="title function_">bind</span>(<span class="params">el, &#123; value &#125;</span>) &#123;</span><br><span class="line">    el.<span class="property">$value</span> = value; <span class="comment">// 用一个全局属性来存传进来的值，因为这个值在别的钩子函数里还会用到</span></span><br><span class="line">    el.<span class="property">handler</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!el.<span class="property">$value</span>) &#123;</span><br><span class="line">      <span class="comment">// 值为空的时候，给出提示，我这里的提示是用的 ant-design-vue 的提示，你们随意</span></span><br><span class="line">        <span class="title class_">Message</span>.<span class="title function_">warning</span>(<span class="string">&#x27;无复制内容&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 动态创建 textarea 标签</span></span><br><span class="line">      <span class="keyword">const</span> textarea = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;textarea&#x27;</span>);</span><br><span class="line">      <span class="comment">// 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域</span></span><br><span class="line">      textarea.<span class="property">readOnly</span> = <span class="string">&#x27;readonly&#x27;</span>;</span><br><span class="line">      textarea.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">      textarea.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;-9999px&#x27;</span>;</span><br><span class="line">      <span class="comment">// 将要 copy 的值赋给 textarea 标签的 value 属性</span></span><br><span class="line">      textarea.<span class="property">value</span> = el.<span class="property">$value</span>;</span><br><span class="line">      <span class="comment">// 将 textarea 插入到 body 中</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(textarea);</span><br><span class="line">      <span class="comment">// 选中值并复制</span></span><br><span class="line">      textarea.<span class="title function_">select</span>();</span><br><span class="line">      <span class="comment">// textarea.setSelectionRange(0, textarea.value.length);</span></span><br><span class="line">      <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;Copy&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        <span class="title class_">Message</span>.<span class="title function_">success</span>(<span class="string">&#x27;复制成功&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(textarea);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 绑定点击事件，就是所谓的一键 copy 啦</span></span><br><span class="line">    el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, el.<span class="property">handler</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当传进来的值更新的时候触发</span></span><br><span class="line">  <span class="title function_">componentUpdated</span>(<span class="params">el, &#123; value &#125;</span>) &#123;</span><br><span class="line">    el.<span class="property">$value</span> = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 指令与元素解绑的时候，移除事件绑定</span></span><br><span class="line">  <span class="title function_">unbind</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    el.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, el.<span class="property">handler</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> vCopy;</span><br></pre></td></tr></table></figure><h3 id="块内声明函数的用法"><a href="#块内声明函数的用法" class="headerlink" title="块内声明函数的用法"></a>块内声明函数的用法</h3><pre><code>  不要在块内声明一个函数（严格模式会报语法错误）。如果确实需要在块中定义函数，可以使用函数表达式来声明函数。比如`if (x) &#123; var foo = function() &#123;&#125;&#125;`</code></pre><h3 id="wpl-带权路径的计算方式"><a href="#wpl-带权路径的计算方式" class="headerlink" title="wpl(带权路径的计算方式)"></a>wpl(带权路径的计算方式)</h3><pre><code>给出以11、8、6、2、5构造哈夫曼树的带权路径值为：71，哈夫曼树为：          32        /    \       13    19      /  \  /  \     7   6  8  11    / \   2   5           计算：（6 + 8 + 11）* 2 + （2 + 5）* 3 = 71</code></pre><h3 id="大根堆或者小根堆的排序"><a href="#大根堆或者小根堆的排序" class="headerlink" title="大根堆或者小根堆的排序"></a>大根堆或者小根堆的排序</h3><pre><code>将整数数组(7-6-3-5-4-1-2)按照堆排序的方式进行升序排列，请问在第一轮排序结束之后，数组的顺序是 6 - 5 - 3 - 4 - 2 - 1 - 7</code></pre><blockquote><ul><li>升序使用大根堆，降序使用小根堆</li><li>想要进行排列，首先要把原数组变为大根堆或者小根堆的样子，然后再开始排</li><li>堆顶元素交换后，就不能再参与排序了</li></ul></blockquote><h3 id="String-与-new-String-创建的差距"><a href="#String-与-new-String-创建的差距" class="headerlink" title="String 与 new String 创建的差距"></a>String 与 new String 创建的差距</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> csdn1 = <span class="string">&quot;csdn&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> csdn2 = <span class="title class_">String</span>(<span class="string">&quot;csdn&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> csdn3 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;csdn&quot;</span>);</span><br><span class="line"><span class="comment">// 上述第一、第二都是存储在栈中，第三种是存储在堆中</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(csdn1 === csdn2); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(csdn1 === csdn3); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(csdn2 === csdn3); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要是因为csdn1与csdn2是值类型，而csdn3是引用类型</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> csdn1); <span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> csdn2); <span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> csdn3); <span class="comment">//object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本类型的值可以调用对应的length方法，却不能自己定义</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(csdn1.<span class="property">length</span>); <span class="comment">// 4</span></span><br><span class="line">csdn1.<span class="property">say</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(csdn1.<span class="property">say</span>); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(csdn3.<span class="property">lengh</span>); <span class="comment">// 4</span></span><br><span class="line">csdn3.<span class="property">say</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(csdn3.<span class="property">say</span>); <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为这里的csdn1是值类型(原始资料类型) , 而csdn3是引用类型(包装对象),通过new String()创建出来的string的实例对象,所以具有</span></span><br><span class="line">csdn3 <span class="keyword">instanceof</span> <span class="title class_">String</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但csdn1与csdn2是值类型，自然不属于String中的方法</span></span><br><span class="line">csdn1 <span class="keyword">instanceof</span> <span class="title class_">String</span>; <span class="comment">// false</span></span><br><span class="line">csdn2 <span class="keyword">instanceof</span> <span class="title class_">String</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是csdn1，csdn2却拥有String中的属性与方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(csdn1.<span class="property">indexOf</span> === <span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">indexOf</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(csdn2.<span class="property">indexOf</span> === <span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">indexOf</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(csdn3.<span class="property">indexOf</span> === <span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">indexOf</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 值类型(原始资料类型)可访问引用类型(包装对象)中的所有方法与属性，但自身却不具备有</span></span><br><span class="line"><span class="comment">// 这就是为什么csdn1与csdn2(值类型)可访问到length与indexof，是自身是储存于栈中，所以不具备设置属性与方法的特征；而csdn3(引用对象)是存储堆指针，可用于添加属性与方法</span></span><br></pre></td></tr></table></figure><h3 id="进程与资源数"><a href="#进程与资源数" class="headerlink" title="进程与资源数"></a>进程与资源数</h3><pre><code>某系统中有3个并发进程，都需要同类资源4个，试问该系统保证不会发生死锁的最少资源数是 **10** 个过程：如果一个进程有m个资源它就能够结束，不会使自己陷入死锁中。因此最差情况是每个进程有m-1个资源并且需要另外一个资源。如果留下有一个资源可用，那么其中某个进程就能够结束并释放它的所有资源，使其它进程也能够结束。所以避免死锁的条件是：r ≥ p * (m - 1) + 1。带入上述条件公式：r ≥ 3 * (4 - 1) + 1 = 10</code></pre><h3 id="Promise-看输出"><a href="#Promise-看输出" class="headerlink" title="Promise 看输出"></a>Promise 看输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="number">2</span>).<span class="title function_">then</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>)).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 看到这个题目，好多的then，实际上只需要记住一个原则：.then 或.catch 的参数期望是函数，传入非函数则会发生值透传。第一个then和第二个then中传入的都不是函数，一个是数字，一个是对象，因此发生了透传，将resolve(1) 的值直接传到最后一个then里，直接打印出1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面经总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/c785f64.html"/>
      <url>/post/c785f64.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="被提问如何看待-996-如何回答"><a href="#被提问如何看待-996-如何回答" class="headerlink" title="被提问如何看待 996 如何回答"></a>被提问如何看待 996 如何回答</h3><pre><code>你可以先询问面试官，贵公司的加班制度，这样的反问，还可以让你获得主动权，通过公司的回答，你可以了解到公司对加班的态度，然后我们就可以根据公司的态度，来给出我们自己的答案。回答例子：在工作需要或者紧急的情况下，我不反对加班，如果是我的工作效率差导致加班，我会努力提高自己的效率；如果是公司有紧急项目，为了进度和公司发展需要加班，我会毫无怨言，但是我不赞同为了加班而加班，这样做毫无效率可言。同时，我愿意接受加班，是因为我相信，我的付出公司能够给出相信的福利和回报，不接受无畏的加班</code></pre><h3 id="检测数组的几种方式"><a href="#检测数组的几种方式" class="headerlink" title="检测数组的几种方式"></a>检测数组的几种方式</h3><blockquote><ul><li>Array.isArray(arr) 低版本的 IE 不支持</li><li>arr.instanceof(Array) 多环境下会判读不准确</li><li>constructor：arr.constructor &#x3D;&#x3D; Array</li><li>Object.prototype.toString.call(arr)</li></ul></blockquote><h3 id="Https-的优缺点"><a href="#Https-的优缺点" class="headerlink" title="Https 的优缺点"></a>Https 的优缺点</h3><blockquote><p>优点</p><ul><li>HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 http 协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性</li></ul><p>缺点</p><ul><li>相同网络环境下，HTTPS 协议会使页面的加载时间延长近 50%，增加 10%到 20%的耗电。此外，HTTPS 协议还会影响缓存，增加数据开销和功耗。</li><li>HTTPS 协议的安全是有范围的，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。</li><li>最关键的，SSL 证书的信用链体系并不安全。特别是在某些国家可以控制 CA 根证书的情况下，中间人攻击一样可行。</li><li>SSL 的专业证书需要购买，功能越强大的证书费用越高。个人网站、小网站可以选择入门级免费证书。</li><li>SSL 证书通常需要绑定 固定 IP，为服务器增加固定 IP 会增加一定费用;</li><li>HTTPS 连接服务器端资源占用高较高多，相同负载下会增加带宽和服务器投入成本;</li></ul></blockquote><h3 id="vue-中的-key-是如何参与比较的"><a href="#vue-中的-key-是如何参与比较的" class="headerlink" title="vue 中的 key 是如何参与比较的"></a>vue 中的 key 是如何参与比较的</h3><pre><code>key是虚拟DOM对象的标识，当状态中的数据发生变化时，Vue会根据 新数据 生成 新的虚拟DOM</code></pre><blockquote><p>key 的原理及作用</p><ul><li>Key 是对节点进行的一个标识，在 Vue 中，Key 作为 Vue 中对比算法的标识，在数据修改后，可以通过 Key 进行这个唯一标识进行对比虚拟 DOM，从而决定对节点的重新加载以及复用</li><li>Key 是虚拟 DOM 对象的标识，当数据发生变化时，Vue 会根据【新数据】生成【新的虚拟 DOM】, 随后 Vue 进行【新虚拟 DOM】与【旧虚拟 DOM】的差异比较</li></ul></blockquote><blockquote><p>Key 的对比规则<br>旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：</p><ul><li>若虚拟 DOM 中内容没变, 直接使用之前的真实 DOM</li><li>若虚拟 DOM 中内容变了, 则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM</li></ul><p>旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key</p><ul><li>创建新的真实 DOM，随后渲染到到页面。</li></ul></blockquote><pre><code>从源码中可以知道，Vue 判断两个节点是否相同时主要判断两者的 key 和元素类型等，因此如果不设置 key,它的值就是 undefined，则可能永 远认为这是两个相同的节点，只能去做更新操作，这造成了大量的 dom 更新操作，明显是不可取的。当 Vue.js 用v-for正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。在有了key属性之后，Vue会记住元素们的顺序，并根据这个顺序在适当的位置插入/删除元素来完成更新，这种方法比没有key属性时的就地复用策略效率更高。</code></pre><h3 id="尾递归优化"><a href="#尾递归优化" class="headerlink" title="尾递归优化"></a>尾递归优化</h3><pre><code>使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，所以，把循环看成是一种特殊的尾递归函数也是可以的。**尾递归是指，在函数返回的时候，调用自身本身，并且return语句不能包含表达式。**这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算阶乘n! = 1 x 2 x 3 x ... x n ，用函数fact(n) 表示</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">fact</span>(n):</span><br><span class="line">  <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> n * <span class="title function_">fact</span>(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">===&gt; <span class="title function_">fact</span>(<span class="number">5</span>)</span><br><span class="line">===&gt; <span class="number">5</span> * <span class="title function_">fact</span>(<span class="number">4</span>)</span><br><span class="line">===&gt; <span class="number">5</span> * (<span class="number">4</span> * <span class="title function_">fact</span>(<span class="number">3</span>))</span><br><span class="line">===&gt; <span class="number">5</span> * (<span class="number">4</span> * (<span class="number">3</span> * <span class="title function_">fact</span>(<span class="number">2</span>)))</span><br><span class="line">===&gt; <span class="number">5</span> * (<span class="number">4</span> * (<span class="number">3</span> * (<span class="number">2</span> * <span class="title function_">fact</span>(<span class="number">1</span>))))</span><br><span class="line">===&gt; <span class="number">5</span> * (<span class="number">4</span> * (<span class="number">3</span> * (<span class="number">2</span> * <span class="number">1</span>)))</span><br><span class="line">===&gt; <span class="number">5</span> * (<span class="number">4</span> * (<span class="number">3</span> * <span class="number">2</span>))</span><br><span class="line">===&gt; <span class="number">5</span> * (<span class="number">4</span> * <span class="number">6</span>)</span><br><span class="line">===&gt; <span class="number">5</span> * <span class="number">24</span></span><br><span class="line">===&gt; <span class="number">120</span></span><br></pre></td></tr></table></figure><pre><code>上面的fact(n) 函数由于return n * fact(n ‐ 1) 引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def <span class="title function_">fact</span>(n):</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fact_iter</span>(n, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">def <span class="title function_">fact_iter</span>(num, product):</span><br><span class="line">  <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> product</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fact_iter</span>(num - <span class="number">1</span>, num * product)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看到， return fact_iter(num ‐ 1, num * product) 仅返回递归函数本身， num ‐ 1 和num * product 在函数调用前就会被计算，不影响函数调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fact(5) 对应的fact_iter(5, 1) 的调用如下：</span></span><br><span class="line">===&gt; <span class="title function_">fact_iter</span>(<span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">===&gt; <span class="title function_">fact_iter</span>(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">===&gt; <span class="title function_">fact_iter</span>(<span class="number">3</span>, <span class="number">20</span>)</span><br><span class="line">===&gt; <span class="title function_">fact_iter</span>(<span class="number">2</span>, <span class="number">60</span>)</span><br><span class="line">===&gt; <span class="title function_">fact_iter</span>(<span class="number">1</span>, <span class="number">120</span>)</span><br><span class="line">===&gt; <span class="number">120</span></span><br></pre></td></tr></table></figure><pre><code>尾递归调用时，如果做了优化，栈不会增长，因此，无论多少次调用也不会导致栈溢出。尾递归：要求函数其中调用位置与内部变量不需要再被用到，我们可以把这些中间量放到参数列表中，其次要求在最后一步调用自己，我们在像递归一样调用即可</code></pre><h3 id="vue-中遇到的坑"><a href="#vue-中遇到的坑" class="headerlink" title="vue 中遇到的坑"></a>vue 中遇到的坑</h3><blockquote><ul><li>在一个单页面组件中不需要 style，但必须要 script</li><li>即在页面组件中引入一个 FooterMenu 组件, 我们引入时应该引入的一个变量作为标签，而不能再 FooterMenu 上添加引号(引入的组件上面不能添加引号，要不然相当于一个写死的值，如果想修改其中的元素的属性值的话，是会报错的)</li></ul></blockquote><h3 id="js-如何判断用户已经停止输入了数据"><a href="#js-如何判断用户已经停止输入了数据" class="headerlink" title="js 如何判断用户已经停止输入了数据"></a>js 如何判断用户已经停止输入了数据</h3><blockquote><ul><li>使用回车键判断，也就是说我们输入停止时，比如搜索就会敲击回车键，所以通过 keyCode 判断回车键</li><li>使用定时器，因为输入是输入敲击键盘的，我们可以监听 keydown，然后外面维护一个 timer，每次进入进 clearTimeout(timer)，然后重新将 setTimeout 赋值给 timer，比如这个 timer 一秒后执行，假如我们一秒内不输入就可以认为是停止了，回调函数里面的逻辑就会执行</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面经总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/95710ede.html"/>
      <url>/post/95710ede.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="图片懒加载的原理以及实现"><a href="#图片懒加载的原理以及实现" class="headerlink" title="图片懒加载的原理以及实现"></a>图片懒加载的原理以及实现</h3><blockquote><p>图片懒加载的原理方法</p><ul><li>1.初始化时，图片标签的 src 不能是真实的图片地址，也不可以是空地址或者坏地址(会出现图片加载失败的图标)</li><li>2.初始化的时候，可以设置图片的 src 是某一个小型图片。例如一张 1px*1px 的透明图片。由于所有图片都使用这一张图片，只会发送一次请求，不会增加性能负担。将图片的真实路径绑定给一个自定义属性，例如 data-url。注意：页面的 img 元素，如果没有 src 属性，浏览器就不会发出请求去下载图片</li><li>3.定义滚动事件，判断元素进入视口，则将 src 替换为真正的 url 地址。利用 js 提取 data-url 的真实图片地址赋值给 src 属性</li></ul></blockquote><blockquote><p>图片懒加载的实现方法</p><p>图片懒加载的关键在于获取元素的位置，并判断其是否出现在视口。故有以下三种方式</p><ul><li>滚动监听+scrollTop+offsetTop+innerHeight</li><li>滚动监听+getBoundingClientRect()</li><li>intersectionObserve()</li></ul></blockquote><blockquote><p>滚动监听+scrollTop+offsetTop+innerHeight</p><ul><li>scrollTop：指网页元素被滚动条卷去的部分</li><li>offsetTop：元素相对父元素的位置</li><li>innerHeight：当前浏览器窗口的大小。需要注意兼容性问题。</li><li>IE8 及更早版本以前没有提供取得浏览器窗口大小的属性，不过提供了 API：document.documentElement.clientHeight&#x2F;clientWidth：返回元素内容及其内边距所占据的空间大小</li><li>IE6 中，上述属性必须在标准模式才有效，如果是混杂模式，需要通过 document.body.clientWidth 和 document.body.clientHeight 取得相同信息</li><li><strong>三个属性之间的关系如图所示，故当 scrollTop+innerHeight &gt; offsetTop，即图片在视口内，否则图片在可视区域外。</strong></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1pxImg.png&quot;</span> <span class="attr">data-url</span>=<span class="string">&quot;img/1.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1pxImg.png&quot;</span> <span class="attr">data-url</span>=<span class="string">&quot;img/2.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1pxImg.png&quot;</span> <span class="attr">data-url</span>=<span class="string">&quot;img/3.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1pxImg.png&quot;</span> <span class="attr">data-url</span>=<span class="string">&quot;img/4.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1pxImg.png&quot;</span> <span class="attr">data-url</span>=<span class="string">&quot;img/5.jpg&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> imgs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">scrollFn</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 监听滚动事件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onscroll</span> = scrollFn;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">scrollFn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> clietH =</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">window</span>.<span class="property">innerHeight</span> ||</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> ||</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> scrollTop =</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> ||</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">window</span>.<span class="property">pageYOffset</span> ||</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(clietH, scrollTop);</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Array</span>.<span class="title function_">from</span>(imgs).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> eleTop = item.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// console.log(eleTop)</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> count = scrollTop + clietH - eleTop;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 可设置为&gt;100 查看懒加载效果</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//从data-url中取出真实的图片地址赋值给scr</span></span></span><br><span class="line"><span class="language-javascript">            item.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, item.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-url&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用的是getBoundingClientRect --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1pxImg.png&quot;</span> <span class="attr">data-url</span>=<span class="string">&quot;img/1.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1pxImg.png&quot;</span> <span class="attr">data-url</span>=<span class="string">&quot;img/2.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1pxImg.png&quot;</span> <span class="attr">data-url</span>=<span class="string">&quot;img/3.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1pxImg.png&quot;</span> <span class="attr">data-url</span>=<span class="string">&quot;img/4.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1pxImg.png&quot;</span> <span class="attr">data-url</span>=<span class="string">&quot;img/5.jpg&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> imgs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">scrollFn</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 监听滚动事件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onscroll</span> = scrollFn;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">scrollFn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> clietH =</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">window</span>.<span class="property">innerHeight</span> ||</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> ||</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Array</span>.<span class="title function_">from</span>(imgs).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> ele = item.<span class="title function_">getBoundingClientRect</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(clietH, ele.<span class="property">top</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 可以设置为ele.top+200 查看懒加载效果</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (ele.<span class="property">top</span> &gt; <span class="number">0</span> &amp;&amp; ele.<span class="property">top</span> &lt; clietH) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//从data-url中取出真实的图片地址赋值给scr</span></span></span><br><span class="line"><span class="language-javascript">            item.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, item.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-url&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="刷新-token"><a href="#刷新-token" class="headerlink" title="刷新 token"></a>刷新 token</h3><pre><code>通常，对于一些需要记录用户行为的系统，在进行网络请求的时候都会要求传递一下登录的token。不过，为了接口数据的安全，服务器的token一般不会设置太长，根据需要一般是1-7天的样子，token过期后就需要重新登录。不过，频繁的登录会造成体验不好的问题，因此，需要体验好的话，就需要定时去刷新token，并替换之前的token。</code></pre><blockquote><p>要做到 token 的无感刷新，主要有 3 种方案：</p><ul><li>后端返回过期时间，前端每次请求就判断 token 的过期时间，如果快到过期时间，就去调用刷新 token 接口。缺点：需要后端额外提供一个 token 过期时间的字段；使用了本地时间判断，若本地时间被篡改，特别是本地时间比服务器时间慢时，拦截会失败</li><li>写个定时器，然后定时刷新 token 接口。缺点：浪费资源，消耗性能,不建议采用</li><li>在请求响应拦截器中拦截，判断 token 返回过期后，调用刷新 token 接口</li></ul></blockquote><pre><code>综合上面的三个方法，最好的是第三个，因为它不需要占用额外的资源。接下来，我们看一下使用axios进行网络请求，然后响应service.interceptors.response的拦截</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在请求响应拦截器中拦截，判断 token 返回过期后，调用刷新 token 接口</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">409</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">refreshToken</span>(&#123;</span><br><span class="line">        <span class="attr">refreshToken</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;refreshToken&quot;</span>),</span><br><span class="line">        <span class="attr">token</span>: <span class="title function_">getToken</span>(),</span><br><span class="line">      &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; token &#125; = res.<span class="property">data</span>;</span><br><span class="line">          <span class="title function_">setToken</span>(token);</span><br><span class="line">          response.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">removeToken</span>();</span><br><span class="line">          router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response &amp;&amp; response.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Message</span>.<span class="title function_">error</span>(error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="如何防止多次刷新-token"><a href="#如何防止多次刷新-token" class="headerlink" title="如何防止多次刷新 token"></a>如何防止多次刷新 token</h3><pre><code>为了防止多次刷新token，可以通过一个变量isRefreshing 去控制是否在刷新token的状态</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">409</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!isRefreshing) &#123;</span><br><span class="line">        isRefreshing = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">refreshToken</span>(&#123;</span><br><span class="line">          <span class="attr">refreshToken</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;refreshToken&quot;</span>),</span><br><span class="line">          <span class="attr">token</span>: <span class="title function_">getToken</span>(),</span><br><span class="line">        &#125;)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; token &#125; = res.<span class="property">data</span>;</span><br><span class="line">            <span class="title function_">setToken</span>(token);</span><br><span class="line">            response.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">removeToken</span>();</span><br><span class="line">            router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            isRefreshing = <span class="literal">false</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response &amp;&amp; response.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Message</span>.<span class="title function_">error</span>(error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="同时发起两个或者两个以上的请求时，怎么刷新-token"><a href="#同时发起两个或者两个以上的请求时，怎么刷新-token" class="headerlink" title="同时发起两个或者两个以上的请求时，怎么刷新 token"></a>同时发起两个或者两个以上的请求时，怎么刷新 token</h3><pre><code>当第二个过期的请求进来，token 正在刷新，我们先将这个请求存到一个数组队列中，想办法让这个请求处于等待中，一直等到刷新 token 后再逐个重试清空请求队列。那么如何做到让这个请求处于等待中呢？为了解决这个问题，我们得借助 Promise。将请求存进队列中后，同时返回一个 Promise，让这个 Promise 一直处于 Pending 状态（即不调用 resolve），此时这个请求就会一直等啊等，只要我们不执行 resolve，这个请求就会一直在等待。当刷新请求的接口返回来后，我们再调用 resolve，逐个重试</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="comment">// 是否正在刷新的标记</span></span><br><span class="line"><span class="keyword">let</span> isRefreshing = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//重试队列</span></span><br><span class="line"><span class="keyword">let</span> requests = [];</span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//约定code 409 token 过期</span></span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">409</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!isRefreshing) &#123;</span><br><span class="line">        isRefreshing = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//调用刷新token的接口</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">refreshToken</span>(&#123;</span><br><span class="line">          <span class="attr">refreshToken</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;refreshToken&quot;</span>),</span><br><span class="line">          <span class="attr">token</span>: <span class="title function_">getToken</span>(),</span><br><span class="line">        &#125;)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; token &#125; = res.<span class="property">data</span>;</span><br><span class="line">            <span class="comment">// 替换token</span></span><br><span class="line">            <span class="title function_">setToken</span>(token);</span><br><span class="line">            response.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">            <span class="comment">// token 刷新后将数组的方法重新执行</span></span><br><span class="line">            requests.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(token));</span><br><span class="line">            requests = []; <span class="comment">// 重新请求完清空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">service</span>(response.<span class="property">config</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//跳到登录页</span></span><br><span class="line">            <span class="title function_">removeToken</span>();</span><br><span class="line">            router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            isRefreshing = <span class="literal">false</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 返回未执行 resolve 的 Promise</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 用函数形式将 resolve 存入，等待刷新后再执行</span></span><br><span class="line">          requests.<span class="title function_">push</span>(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">            response.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="title function_">service</span>(response.<span class="property">config</span>));</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response &amp;&amp; response.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Message</span>.<span class="title function_">error</span>(error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="如何防范-xss-和-csrf"><a href="#如何防范-xss-和-csrf" class="headerlink" title="如何防范 xss 和 csrf"></a>如何防范 xss 和 csrf</h3><blockquote><p>XSS（跨站脚本攻击）</p><ul><li>XSS 攻击是通过注入恶意脚本到网页中，当其他用户浏览这个网页时，这些脚本会被执行，从而实现攻击者的目的，如窃取用户信息</li></ul><p>防范 XSS 攻击</p><ul><li>转义用户输入：所有用户输入都应被视为不可信的。在渲染用户输入之前，你应该对其进行 HTML 转义，以确保任何可能的 HTML 标签都不会被浏览器解析</li><li>使用 Content Security Policy（CSP）：CSP 可以限制浏览器只加载指定来源的资源，这样就能有效地防止攻击者执行恶意脚本</li><li>使用 HTTP-only cookies：这样的 cookies 不能被 JavaScript 读取，因此攻击者即使成功注入脚本，也无法窃取用户的 session 信息</li></ul></blockquote><blockquote><p>CSRF（跨站请求伪造）</p><ul><li>CSRF 攻击是攻击者欺骗用户浏览器，以用户的身份发送请求到另一个网站。由于浏览器会自动发送 cookie，因此如果用户处于登录状态，这个请求将会以用户的身份执行</li></ul><p>防范 CSRF 攻击</p><ul><li>使用 CSRF token：在表单提交时，服务器生成一个随机的 CSRF token，并将这个 token 插入到表单中。当用户提交表单时，服务器会验证这个 token，如果 token 不匹配，服务器就拒绝请求</li><li>使用 SameSite Cookie 属性：这个属性可以让你指定 cookie 只能在同一站点的请求中发送，这样就能有效地防止 CSRF 攻击</li><li>验证 Referer 头：通过检查 HTTP Referer 头，可以确定请求是否来自于合法的源</li></ul></blockquote><h3 id="xss-和-csrf-的区别"><a href="#xss-和-csrf-的区别" class="headerlink" title="xss 和 csrf 的区别"></a>xss 和 csrf 的区别</h3><blockquote><p>CSRF 与 XSS 区别有以下两点：</p><ul><li>通常来说 CSRF 是由 XSS 实现的，CSRF 时常也被称为 XSRF（CSRF 实现的方式还可以是直接通过命令行发起请求等）</li><li>本质上讲，XSS 是代码注入问题，CSRF 是 HTTP 问题。 XSS 是内容没有过滤导致浏览器将攻击者的输入当代码执行，CSRF 则是浏览器在发送 HTTP 请求时候进行。</li></ul></blockquote><h3 id="koa2-洋葱模型"><a href="#koa2-洋葱模型" class="headerlink" title="koa2 洋葱模型"></a>koa2 洋葱模型</h3><pre><code>Koa2的洋葱模型是一种中间件执行流程的设计模式，它允许开发者在请求的处理过程中，按照特定的顺序依次执行一系列中间件函数</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个中间件函数</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个中间件 - 开始&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个中间件 - 结束&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个中间件函数</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二个中间件 - 开始&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二个中间件 - 结束&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三个中间件函数</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第三个中间件 - 开始&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第三个中间件 - 结束&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在每个中间件函数中，我们首先输出一个开始的日志，然后调用next()函数，表示执行下一个中间件函数。当next()函数被调用时，控制权会传递到下一个中间件函数。在下一个中间件函数执行完毕后，控制权会再次回到当前中间件函数，执行剩余的代码。最后，我们输出一个结束的日志</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is running on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出如下</span></span><br><span class="line"><span class="comment">// 第一个中间件 - 开始</span></span><br><span class="line"><span class="comment">// 第二个中间件 - 开始</span></span><br><span class="line"><span class="comment">// 第三个中间件 - 开始</span></span><br><span class="line"><span class="comment">// 第三个中间件 - 结束</span></span><br><span class="line"><span class="comment">// 第二个中间件 - 结束</span></span><br><span class="line"><span class="comment">// 第一个中间件 - 结束</span></span><br></pre></td></tr></table></figure><pre><code>可以看到，中间件函数的执行顺序是从外到内，然后再从内到外。这就是洋葱模型的特点。Koa2实现洋葱模型的关键在于next()函数的调用和await关键字的使用。next()函数的调用将控制权传递给下一个中间件函数，而await关键字确保下一个中间件函数执行完毕后再继续执行当前中间件函数的剩余代码。**总结一下，Koa2的洋葱模型是一种中间件执行流程的设计模式，通过next()函数和await关键字的配合，实现了中间件函数的顺序执行和控制权的传递。这种模型可以帮助开发者更好地组织和管理中间件，提高代码的可读性和可维护性**</code></pre>]]></content>
      
      
      <categories>
          
          <category> 面经总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/e2763e48.html"/>
      <url>/post/e2763e48.html</url>
      
        <content type="html"><![CDATA[<h2 id="概念题"><a href="#概念题" class="headerlink" title="概念题"></a>概念题</h2><h3 id="js-实现动画与-css-实现动画相比的优缺点"><a href="#js-实现动画与-css-实现动画相比的优缺点" class="headerlink" title="js 实现动画与 css 实现动画相比的优缺点"></a>js 实现动画与 css 实现动画相比的优缺点</h3><blockquote><p>JS 动画：</p><ul><li>缺点：1.JS 在浏览器的主线程中运行，而主线程还有其他的 js 脚本，样式布局，绘制任务等，对其干扰可能导致线程出现阻塞，从而造成丢帧的情况。</li><li>2.JS 动画代码复杂度高于 CSS3 动画。</li><li>优点：1.JS 动画控制能力很强，可以在动画播放过程中对动画进行控制，使其开始或停止。</li><li>2.动画效果比 CSS3 动画丰富，有些动画只有 JS 动画才能实现，比如曲线运动，冲击闪烁等。</li><li>3.CSS3 有兼容性问题，而 JS 大多时候没有兼容性问题。</li></ul><p>CSS3 动画：</p><ul><li>缺点：1.运行过程较弱，无法附加绑定回调函数，CSS3 动画只能暂停，不能在动画中寻找一个特定的事件点，不能在半路反转动画，不能变换事件尺度，不能在特定的位置添加回调函数或是绑定回放事件，无进度报告。</li><li>2.代码冗长。想用 CSS3 实现稍微复杂一点的动画，最后 CSS 代码都会变得特别笨重。</li><li>优点：1.浏览器可以对动画进行优化。</li></ul></blockquote><h3 id="浏览器跨标签页通信的-8-种常见的方式"><a href="#浏览器跨标签页通信的-8-种常见的方式" class="headerlink" title="浏览器跨标签页通信的 8 种常见的方式"></a>浏览器跨标签页通信的 8 种常见的方式</h3><blockquote><p>浏览器跨标签页通信主要用于以下几种需求：</p><ul><li>1：数据共享：当多个标签页需要访问和共享相同的数据时，跨标签页通信可以用于在这些标签页之间传递数据，确保它们保持同步</li><li>2：状态同步：在一些应用中，可能会有多个标签页用于展示相同的应用状态或会话状态。通过跨标签页通信，可以实现状态的同步，使得在一个标签页中的操作能够即时反映到其他标签页上</li><li>3：消息通知：跨标签页通信可以用于实现在一个标签页中发送消息，然后其他标签页接收并展示这些消息的功能</li><li>4：共享资源：在某些场景下，可能需要在多个标签页之间共享某些资源，如网络连接、音频&#x2F;视频播放器等</li><li>5：多窗口管理：对于一些具有多个窗口的应用，跨标签页通信可以用于实现窗口之间的联动和数据同步</li></ul></blockquote><blockquote><p>浏览器跨标签页通信可以通过以下几种常见方式实现：</p><ul><li>LocalStorage 或 SessionStorage：使用 Web 存储机制（LocalStorage 或 SessionStorage）可以在不同标签页之间共享数据。一个标签页可以将数据存储在 LocalStorage 或 SessionStorage 中，其他标签页可以监听存储事件来获取更新的数据</li><li>Broadcast Channel API：Broadcast Channel API 允许不同标签页之间通过共享的通道进行消息广播和接收。一个标签页可以通过通道发送消息，其他订阅了相同通道的标签页可以接收到这些消息</li><li>SharedWorker：SharedWorker 是一种在多个标签页之间共享的后台线程。标签页可以通过 SharedWorker 进行通信，发送消息和接收消息。这种方式需要使用 JavaScript 的 Worker API</li><li>Service Worker：Service Worker 是一种独立于网页的脚本，可以在后台运行，提供离线缓存和消息传递等功能。标签页可以通过 Service Worker 进行通信，发送消息和接收消息</li><li>Window.postMessage()：Window.postMessage() 方法允许在不同的窗口或标签页之间安全地传递消息。通过调用 postMessage() 方法并指定目标窗口的 origin，可以将消息发送到其他标签页，并通过监听 message 事件来接收消息</li><li>使用 Cookies：可以将需要共享的数据存储在 Cookies 中，并在不同的标签页之间读取和更新这些 Cookies。当一个标签页更新数据时，将数据写入到 Cookies 中，其他标签页可以通过监听 Cookies 变化事件或定时读取 Cookies 来获取最新的数据</li><li>使用 IndexedDB：IndexedDB 是浏览器提供的一个客户端数据库，可以在不同的标签页之间存储和读取数据。一个标签页可以将数据写入 IndexedDB，其他标签页可以监听 IndexedDB 的变化事件或定时从 IndexedDB 中读取数据来实现数据的共享和状态的同步</li><li>使用服务器端存储：将需要共享的数据存储在服务器端，标签页之间通过与服务器进行通信来获取和更新数据。可以使用 AJAX、WebSocket 或其他网络通信技术来实现与服务器的数据交互</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第一种方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 在一个标签页中写入数据到 LocalStorage 或 SessionStorage</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;sharedData&quot;</span>, <span class="string">&quot;Hello from Tab 1&quot;</span>);</span><br><span class="line"><span class="comment">// 或者 sessionStorage.setItem(&#x27;sharedData&#x27;, &#x27;Hello from Tab 1&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他标签页中监听存储事件，并获取更新的数据</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;storage&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">key</span> === <span class="string">&quot;sharedData&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newData = event.<span class="property">newValue</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received updated data:&quot;</span>, newData);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在另一个标签页中更新数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;sharedData&quot;</span>, <span class="string">&quot;Hello from Tab 2&quot;</span>);</span><br><span class="line"><span class="comment">// 或者 sessionStorage.setItem(&#x27;sharedData&#x27;, &#x27;Hello from Tab 2&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二种方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 在发送消息的标签页中</span></span><br><span class="line"><span class="comment">// 创建一个广播通道</span></span><br><span class="line"><span class="keyword">const</span> channel = <span class="keyword">new</span> <span class="title class_">BroadcastChannel</span>(<span class="string">&quot;myChannel&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">channel.<span class="title function_">postMessage</span>(<span class="string">&quot;Hello from Tab 1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在接收消息的标签页中</span></span><br><span class="line"><span class="comment">// 创建一个广播通道</span></span><br><span class="line"><span class="keyword">const</span> channel = <span class="keyword">new</span> <span class="title class_">BroadcastChannel</span>(<span class="string">&quot;myChannel&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听消息事件</span></span><br><span class="line">channel.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> message = event.<span class="property">data</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received message:&quot;</span>, message);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第三种方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 在发送消息的标签页中</span></span><br><span class="line"><span class="comment">// 创建一个 SharedWorker</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">SharedWorker</span>(<span class="string">&quot;worker.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">worker.<span class="property">port</span>.<span class="title function_">postMessage</span>(<span class="string">&quot;Hello from Tab 1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在接收消息的标签页中</span></span><br><span class="line"><span class="comment">// 监听连接事件</span></span><br><span class="line">self.<span class="property">onconnect</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> port = event.<span class="property">ports</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听消息事件</span></span><br><span class="line">  port.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> message = event.<span class="property">data</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received message:&quot;</span>, message);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送消息</span></span><br><span class="line">  port.<span class="title function_">postMessage</span>(<span class="string">&quot;Hello from Worker&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第五种方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 在发送消息的标签页中</span></span><br><span class="line"><span class="comment">// 监听消息事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// 确保消息来自预期的源</span></span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">origin</span> !== <span class="string">&quot;http://example.com&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> message = event.<span class="property">data</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received message:&quot;</span>, message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息到其他标签页</span></span><br><span class="line"><span class="keyword">const</span> targetWindow = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;http://example.com/otherpage&quot;</span>, <span class="string">&quot;_blank&quot;</span>);</span><br><span class="line">targetWindow.<span class="title function_">postMessage</span>(<span class="string">&quot;Hello from Tab 1&quot;</span>, <span class="string">&quot;http://example.com&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在接收消息的标签页中</span></span><br><span class="line"><span class="comment">// 监听消息事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// 确保消息来自预期的源</span></span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">origin</span> !== <span class="string">&quot;http://example.com&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> message = event.<span class="property">data</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received message:&quot;</span>, message);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 回复消息</span></span><br><span class="line">  event.<span class="property">source</span>.<span class="title function_">postMessage</span>(<span class="string">&quot;Hello from Other Tab&quot;</span>, event.<span class="property">origin</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第六种方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 在发送消息的标签页中</span></span><br><span class="line"><span class="comment">// 设置 Cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;sharedData=Hello from Tab 1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在接收消息的标签页中</span></span><br><span class="line"><span class="comment">// 获取 Cookie 值</span></span><br><span class="line"><span class="keyword">const</span> cookies = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line"><span class="keyword">const</span> cookieArr = cookies.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sharedData = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cookieArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> cookie = cookieArr[i].<span class="title function_">trim</span>();</span><br><span class="line">  <span class="keyword">if</span> (cookie.<span class="title function_">startsWith</span>(<span class="string">&quot;sharedData=&quot;</span>)) &#123;</span><br><span class="line">    sharedData = cookie.<span class="title function_">substring</span>(<span class="string">&quot;sharedData=&quot;</span>.<span class="property">length</span>, cookie.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received message:&quot;</span>, sharedData);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第七种方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 打开或创建IndexedDB数据库</span></span><br><span class="line"><span class="keyword">const</span> request = indexedDB.<span class="title function_">open</span>(<span class="string">&quot;myDatabase&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功打开数据库</span></span><br><span class="line">request.<span class="property">onsuccess</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> db = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个对象存储空间（类似表）</span></span><br><span class="line">  <span class="keyword">const</span> objectStore = db.<span class="title function_">createObjectStore</span>(<span class="string">&quot;messages&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">keyPath</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line">    <span class="attr">autoIncrement</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加一条消息到对象存储空间</span></span><br><span class="line">  <span class="keyword">const</span> message = &#123; <span class="attr">text</span>: <span class="string">&quot;Hello, World!&quot;</span> &#125;;</span><br><span class="line">  <span class="keyword">const</span> addRequest = objectStore.<span class="title function_">add</span>(message);</span><br><span class="line"></span><br><span class="line">  addRequest.<span class="property">onsuccess</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;消息已添加到IndexedDB&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  addRequest.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;添加消息到IndexedDB时发生错误&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从对象存储空间获取所有消息</span></span><br><span class="line">  <span class="keyword">const</span> getAllRequest = objectStore.<span class="title function_">getAll</span>();</span><br><span class="line"></span><br><span class="line">  getAllRequest.<span class="property">onsuccess</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> messages = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;所有消息:&quot;</span>, messages);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  getAllRequest.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;获取消息时发生错误&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开或创建数据库时发生错误</span></span><br><span class="line">request.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;打开/创建数据库时发生错误&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库版本变更</span></span><br><span class="line">request.<span class="property">onupgradeneeded</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> db = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个对象存储空间</span></span><br><span class="line">  <span class="keyword">const</span> objectStore = db.<span class="title function_">createObjectStore</span>(<span class="string">&quot;messages&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">keyPath</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line">    <span class="attr">autoIncrement</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据库版本已更新&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="v-if、v-show、visibility-的重排重绘"><a href="#v-if、v-show、visibility-的重排重绘" class="headerlink" title="v-if、v-show、visibility 的重排重绘"></a>v-if、v-show、visibility 的重排重绘</h3><blockquote><ul><li>1.v-show：隐藏时，就是在某个 DOM 节点的样式上，加上 display:none，把他隐藏之后，他不会在页面中占据位置，其余的节点会走到这个节点上去。但是打开 f12 是可以找到它的，无法操作 DOM 节点，会引起重排重绘</li><li>2.v-if：隐藏时，添加 v-if 之后，打开 f12，不可以找到这个 DOM 元素，直接被抹除的，他也不会在页面中占据位置。无法操作 DOM 节点，会重新把整个页面再次加载</li><li>3.visibility：hidden：这是 css 的属性，当你使用他隐藏某个节点时，他也可以在 f12 中，找到这个节点，但是他会在页面中占据位置，他的位置会变成空白，其余节点不能取代他的位置，可以操作 DOM 节点，只会进行重绘</li></ul></blockquote><h3 id="不使用第三个变量交换两个变量的值"><a href="#不使用第三个变量交换两个变量的值" class="headerlink" title="不使用第三个变量交换两个变量的值"></a>不使用第三个变量交换两个变量的值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>,</span><br><span class="line">  b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br></pre></td></tr></table></figure><h3 id="vue-和-react-的区别"><a href="#vue-和-react-的区别" class="headerlink" title="vue 和 react 的区别"></a>vue 和 react 的区别</h3><blockquote><p>共同点</p><ul><li>数据驱动视图</li><li>组件化</li><li>都使用了 Virtual DOM + Diff 算法</li></ul></blockquote><blockquote><p>不同点</p><p>核心思想不同</p><ul><li>Vue 早期开发就尤雨溪大佬，所以定位就是尽可能的降低前端开发的门槛，让更多的人能够更快地上手开发。这就有了 vue 的主要特点：灵活易用的渐进式框架，进行数据拦截&#x2F;代理，它对侦测数据的变化更敏感、更精确</li><li>React 从一开始的定位就是提出 UI 开发的新思路。背靠大公司 Facebook 的 React，从开始起就不缺关注和用户，而且 React 想要做的是用更好的方式去颠覆前端开发方式。所以 React 推崇函数式编程（纯组件），数据不可变以及单向数据流,当然需要双向的地方也可以手动实现， 比如借助 onChange 和 setState 来实现</li></ul><p>响应式原理不同</p><ul><li>Vue 依赖收集，自动优化，数据可变。Vue 递归监听 data 的所有属性,直接修改。当数据改变时，自动找到引用组件重新渲染。</li><li>react React 基于状态机，手动优化，数据不可变，需要 setState 驱动新的 state 替换老的 state。当数据改变时，以组件为根目录，默认全部重新渲染, 所以 React 中会需要 shouldComponentUpdate 这个生命周期函数方法来进行控制</li></ul><p>组件写法差异</p><ul><li>React 推荐的做法是 JSX + inline style, 也就是把 HTML 和 CSS 全都写进 JavaScript 中,即 all in js;</li><li>Vue 推荐的做法是 template 的单文件组件格式(简单易懂，从传统前端转过来易于理解),即 html,css,JS 写在同一个文件(vue 也支持 JSX 写法)，这个差异一定程度上也是由于二者核心思想不同而导致的</li></ul><p>diff 算法</p><ul><li>vue 对比节点。当节点元素相同，但是 classname 不同，认为是不同类型的元素，删除重建，而 react 认为是同类型节点，只是修改节点属性。vue 的列表对比，采用的是两端到中间比对的方式，而 react 采用的是从左到右依次对比的方式。当一个集合只是把最后一个节点移到了第一个，react 会把前面的节点依次移动，而 vue 只会把最后一个节点移到第一个。总体上，vue 的方式比较高效</li></ul><p>渲染过程</p><ul><li>Vue 可以更快地计算出 Virtual DOM 的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树</li><li>React 在应用的状态被改变时，全部子组件都会重新渲染。通过 shouldComponentUpdate 这个生命周期方法可以进行控制，但 Vue 将此视为默认的优化。如果应用中交互复杂，需要处理大量的 UI 变化，那么使用 Virtual DOM 是一个好主意。如果更新元素并不频繁，那么 Virtual DOM 并不一定适用，性能很可能还不如直接操控 DOM</li></ul><p>vuex 和 redux：</p><ul><li>从表面上来说，store 注入和使用方式有一些区别。在 Vuex 中，$store被直接注入到了组件实例中，因此可以比较灵活的使用：使用dispatch、commit提交更新，通过mapState或者直接通过this.$store 来读取数据。在 Redux 中，我们每一个组件都需要显示的用 connect 把需要的 props 和 dispatch 连接起来。另外，Vuex 更加灵活一些，组件中既可以 dispatch action，也可以 commit updates，而 Redux 中只能进行 dispatch，不能直接调用 reducer 进行修改</li><li>从实现原理上来说，最大的区别是两点：Redux 使用的是不可变数据，而 Vuex 的数据是可变的，因此，Redux 每次都是用新 state 替换旧 state，而 Vuex 是直接修改。Redux 在检测数据变化的时候，是通过 diff 的方式比较差异的，而 Vuex 其实和 Vue 的原理一样，是通过 getter&#x2F;setter 来比较的，这两点的区别，也是因为 React 和 Vue 的设计理念不同。React 更偏向于构建稳定大型的应用，非常的科班化。相比之下，Vue 更偏向于简单迅速的解决问题，更灵活，不那么严格遵循条条框框。因此也会给人一种大型项目用 React，小型项目用 Vue 的感觉</li></ul><p>框架</p><ul><li>Vue 本质是 MVVM 框架，由 MVC 发展而来</li><li>React 是前端组件化框架，由后端组件化发展而来</li></ul></blockquote><blockquote><p>Redux 和 Vuex 有什么区别，它们的共同思想</p><p>1）区别</p><ul><li>Vuex 改进了 Redux 中的 Action 和 Reducer 函数，以 mutations 变化函数取代 Reducer，无需 switch，只需在对应的 mutation 函数里改变 state 值即可</li><li>Vuex 由于 Vue 自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的 State 即可</li><li>Vuex 数据流的顺序是 ∶View 调用 store.commit 提交对应的请求到 Store 中对应的 mutation 函数-&gt;store 改变（vue 检测到数据变化自动渲染）</li><li>vuex 弱化 dispatch，通过 commit 进行 store 状态的一次更变</li><li>取消了 action 概念，不必传入特定的 action 形式进行指定变更；</li><li>弱化 reducer，基于 commit 参数直接对数据进行转变，使得框架更加简易;</li><li>Redux 使用的是不可变数据，而 Vuex 的数据是可变的。Redux 每次都是用新的 state 替换旧的 state，而 Vuex 是直接修改</li><li>Redux 在检测数据变化的时候，是通过 diff 的方式比较差异的，而 Vuex 其实和 Vue 的原理一样，是通过 getter&#x2F;setter 来比较的</li></ul><p>2）共同思想</p><ul><li>单—的数据源</li><li>变化可以预测</li></ul><p>Vuex 有哪几种属性？</p><ul><li>state &#x3D;&gt; 基本数据(数据源存放地)</li><li>getters &#x3D;&gt; 从基本数据派生出来的数据</li><li>mutations &#x3D;&gt; 提交更改数据的方法，同步</li><li>actions &#x3D;&gt; 像一个装饰器，包裹 mutations，使之可以异步。</li><li>modules &#x3D;&gt; 模块化 Vuex</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面经总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作刷题过程中做错的题</title>
      <link href="/post/ca052ad5.html"/>
      <url>/post/ca052ad5.html</url>
      
        <content type="html"><![CDATA[<h2 id="错题"><a href="#错题" class="headerlink" title="错题"></a>错题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Funclass</span> &#123;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  func1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">var</span> tempCount = <span class="variable language_">this</span>.<span class="property">count</span>;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tempCount == <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bad&quot;</span>, <span class="variable language_">this</span>.<span class="property">count</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Funclass</span>();</span><br><span class="line"><span class="keyword">const</span> func1 = obj.<span class="title function_">func1</span>();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">func1</span>();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">func1</span>();</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">func1</span>();</span><br><span class="line"><span class="title function_">func1</span>();</span><br><span class="line"><span class="comment">// bad4 bad4 bad4 good</span></span><br><span class="line"><span class="comment">// 因为只有最后一次的是对的，因为tempCount是全局的，而this.count相当于局部的，一个会被</span></span><br><span class="line"><span class="comment">// 修改，一个不会</span></span><br></pre></td></tr></table></figure><blockquote><p>在 webpack 中，use 数组中的 loader 的执行顺序是从后往前执行，即从右往左执行</p><ul><li>babel-loader：将 ES6+ 的代码转换为 ES5 的代码，使其能够在旧版浏览器中运行</li><li>css-loader：用于加载 CSS 文件，并且支持模块化、压缩、转换等功能</li><li>file-loader：用于加载文件资源，如图片、字体等，并将其输出到指定的目录中</li><li>url-loader：与 file-loader 类似，但可以将小于指定大小的文件转换为 base64 编码，减少 HTTP 请求的数量</li><li>style-loader：将 CSS 代码注入到 HTML 文件中的 style 标签中，使其能够生效</li><li>sass-loader：用于将 Sass&#x2F;Scss 语法转换为 CSS 语法，并交给 css-loader 处理</li><li>less-loader：用于将 Less 语法转换为 CSS 语法，并交给 css-loader 处理</li><li>postcss-loader：用于对 CSS 代码进行后处理，如添加浏览器前缀、压缩代码等</li><li>eslint-loader：用于在打包过程中对 JavaScript 代码进行代码质量检查，如语法错误、代码风格等</li><li>ts-loader：用于将 TypeScript 代码转换为 JavaScript 代码，并交给 babel-loader 处理</li></ul></blockquote><p><strong>CSRF 无法获取用户的信息，只能是冒用，所以无法获取 cookie</strong></p><blockquote><p>每个特定的域名下，cookie 字段个数是有限的</p><ul><li>IE6 或更低版本中最多有 20 个 cookie</li><li>IE7 和之后的版本中最多可以有 50 个 cookie</li><li>Firefox 中最多有 50 个 cookie</li><li>chrome 和 Safari 没有做硬性限制</li><li>当 cookie 字段个数超出浏览器的限制时，IE 和 Opera 会清理最后面的 cookie;Firefox 会随机清理 cookie</li></ul></blockquote><pre><code>关闭浏览器清空cookie是指在关闭浏览器窗口后**自动清空**浏览器中保存的所有cookie信息</code></pre><blockquote><p>触摸事件，有 touchstart touchmove touchend touchcancel 四种之分</p><ul><li>touchstart：手指触摸到屏幕会触发</li><li>touchmove：当手指在屏幕上移动时，会触发</li><li>touchend：当手指离开屏幕时，会触发</li><li>touchcancel：可由系统进行的触发，比如手指触摸屏幕的时候，突然 alert 了一下，或者系统中其他打断了 touch 的行为，则可以触发该事件</li></ul></blockquote><blockquote><p>触碰类事件</p><ul><li>tap: 手指碰一下屏幕会触发</li><li>longTap: 手指长按屏幕会触发</li><li>singleTap:手指碰一下屏幕会触发</li><li>doubleTap:手指双击屏幕会触发</li></ul></blockquote><blockquote><p>滑动事件，有 swipeswipeLeftswipeRightswipeUpswipeDown 五种之分</p><ul><li>swipe：手指在屏幕上滑动时会触发</li><li>swipeLeft：手指在屏幕上向左滑动时会触发</li><li>swipeRight：手指在屏幕上向右滑动时会触发</li><li>swipeUp：手指在屏幕上向上滑动时会触发</li><li>swipeDown：手指在屏幕上向下滑动时会触发</li></ul></blockquote><pre><code>206状态码表示请求成功，但是服务器只返回资源的一部分，这可以用于断点续传或者多媒体数据的串行传输</code></pre><h3 id="父子元素的相对绝对后的-left、right-偏移"><a href="#父子元素的相对绝对后的-left、right-偏移" class="headerlink" title="父子元素的相对绝对后的 left、right 偏移"></a>父子元素的相对绝对后的 left、right 偏移</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 偏移为多少 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 答案：子元素左移100px --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="操作后的数组长度"><a href="#操作后的数组长度" class="headerlink" title="操作后的数组长度"></a>操作后的数组长度</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line">a.<span class="title function_">push</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// [1, 2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第一个元素</span></span><br><span class="line">a.<span class="title function_">shift</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// [2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有a = a。concat，所以a是不会变的</span></span><br><span class="line">a.<span class="title function_">concat</span>([<span class="number">5</span>, <span class="number">6</span>]);</span><br><span class="line"><span class="comment">// [2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从0开始，删除一个元素，又添加了一个2，所以还是只有2</span></span><br><span class="line">a.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// [2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><h3 id="计算一个-mac-地址最多能够连接多少台主机"><a href="#计算一个-mac-地址最多能够连接多少台主机" class="headerlink" title="计算一个 mac 地址最多能够连接多少台主机"></a>计算一个 mac 地址最多能够连接多少台主机</h3><pre><code>先把掩码转换为二进制（windows系统内置计算器就可以）：255.255.255.248 =&gt; 11111111.111111111.11111111.11111000看到后面那三个0了没，那就是主机位，意思就是这个子网包含2³=8个地址。一个子网还需要一个地址作为网络号，一个地址广播用。</code></pre><h3 id="Math-函数的计算题"><a href="#Math-函数的计算题" class="headerlink" title="Math 函数的计算题"></a>Math 函数的计算题</h3><pre><code>Math.ceil是保留相对较大的值，Math.round是保留整数，四舍五入（不区分正负），Math.floor是保留一个相对较小的值（区分正负）</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">0.6</span>) + <span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">0.6</span>) - <span class="title class_">Math</span>.<span class="title function_">floor</span>(-<span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h3 id="错题-1"><a href="#错题-1" class="headerlink" title="错题"></a>错题</h3><blockquote><ul><li>typeof Date.now() 的值是：’number’，因为返回的是时间戳</li><li>AngularJS 中服务的正确写法：ng-service</li><li><strong>let 声明的变量不会挂载到 window 上</strong></li><li>关于 W3C 制定的 JavaScript 标准事件模型，以下正确的顺序以及描述是：先事件捕获从 windows &gt; document 往下级直到 特定的事件节点，然后进行事件处理，再事件冒泡，从特定节点往上级，这个完整的过程</li><li>RequireJS 遵循 AMD 规范，而 Sea.js 遵循 CMD 规范</li><li>alert(3&#x3D;&#x3D;true) &#x2F;&#x2F; false，主要看是不是或者能不能转换程 number</li><li>&amp;&amp; 运算，如果前面值为 true,则结果为后面的值。如果前面值为 false,则值为前值。比如 1 &amp;&amp; 2 输出是 2</li><li><strong>symbol 对象不能用于数据运算，包括+、-、*、&#x2F;等</strong></li><li>Angular 中若需给子 scope 发送消息，需使用哪个方法：$broadcast()</li><li><strong>闭包也有链式作用域</strong></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">x</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">x</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 1、undefined、2</span></span><br><span class="line"><span class="comment">// 需要明确的是delete方法只有在删除对象成员这种引用才有意义，或者说只能删除一种引用即对象成员，其余情况并没有太大的意义，基本都是返回一个布尔值true表示没有错误</span></span><br></pre></td></tr></table></figure><h3 id="js-的保留字"><a href="#js-的保留字" class="headerlink" title="js 的保留字"></a>js 的保留字</h3><pre><code>break、delete、function、return、typeof、case、do、if、switch、var、catch、else、in、this、void、continue、false、instanceof、throw、while、debugger、finally、new、true、const、with、default、for、null和try。还有一些保留字在未来JavaScript版本使用的，它们主要有：class、enum、export、extends、import和super**array不是保留字**</code></pre><h3 id="传参问题"><a href="#传参问题" class="headerlink" title="传参问题"></a>传参问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  a = a + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">test</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="comment">// 10 变量a为number类型，属于基本数据类型，基本数据类型在传参时，通过拷贝值进行传递。因此，在函数内部修改形参时，不会对实参产生影响，故输出a的值为10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="attr">bbb</span>: <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;position1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> i++;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">break</span> bbb;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;position2&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="comment">// i 是101，传参和不传参的理解是不一样的</span></span><br></pre></td></tr></table></figure><h3 id="typeof-问题"><a href="#typeof-问题" class="headerlink" title="typeof 问题"></a>typeof 问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">23</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typeof</span> <span class="title function_">g</span>();</span><br><span class="line"><span class="comment">// 如果是typeof f，结果是function 如果是typeof f()，结果是number 如果是typeof g,结果是undefined. 如果是typeof g(),结果是ReferenceError，g is not defined</span></span><br></pre></td></tr></table></figure><h3 id="Promise-中的语句是同步的，then-是异步的"><a href="#Promise-中的语句是同步的，then-是异步的" class="headerlink" title="Promise 中的语句是同步的，then 是异步的"></a>Promise 中的语句是同步的，then 是异步的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4&quot;</span>);</span><br><span class="line"><span class="comment">// 1 2 4 3</span></span><br></pre></td></tr></table></figure><h3 id="下面哪种方式不能用作进程间通信"><a href="#下面哪种方式不能用作进程间通信" class="headerlink" title="下面哪种方式不能用作进程间通信"></a>下面哪种方式不能用作进程间通信</h3><blockquote><ul><li>进程池(这个不行)</li><li>管道</li><li>socket</li><li>共享内存</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> job do error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job do error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作刷题过程中做错的题</title>
      <link href="/post/bd021a43.html"/>
      <url>/post/bd021a43.html</url>
      
        <content type="html"><![CDATA[<h2 id="笔试题"><a href="#笔试题" class="headerlink" title="笔试题"></a>笔试题</h2><h3 id="给出四个坐标，使用-svg-画四边形"><a href="#给出四个坐标，使用-svg-画四边形" class="headerlink" title="给出四个坐标，使用 svg 画四边形"></a>给出四个坐标，使用 svg 画四边形</h3><pre><code>坐标 (220,10) (300,210) (170,250) (123,234)</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">polygon</span></span></span><br><span class="line"><span class="tag">    <span class="attr">points</span>=<span class="string">&quot;220,10 300,210 170,250 123,234&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;fill:lime;stroke:purple;stroke-width:1&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>说说你对作用域链的理解</p><ul><li>1、作用域链的作用是保证执行环境里有权访问的变量和函数是<strong>有序的</strong>，作用域链的变量<strong>只能向上</strong>访问，变量访问到 <strong>window</strong> 对象即被终止，作用域链向下访问变量是不被允许的</li><li>2、简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期</li><li>3、通俗来说，一般情况下，变量取值到 创建 这个变量 的函数的作用域中取值。 但是如果在当前作用域中没有查到值，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链</li></ul></blockquote><p><strong>export 导出的变量和方法是可以被修改的，export default 不可以，即便是导出的对象，然后修改对象的值，也不影响原来的，因为 export default 导出的是值</strong></p><blockquote><ul><li><p>Expires 与 max-age 同时出现的话，max-age 优先级更高</p></li><li><p>json <strong>不能</strong>存储无理数</p></li><li><p>to:路由将要跳转的路径信息，信息是包含在对像里边的</p></li><li><p>from:路径跳转前的路径信息，也是一个对象的形式</p></li><li><p>next:路由的控制参数，常用的有 next(true)和 next(false)</p></li></ul></blockquote><pre><code>vue自定义指令的构造函数有bind、inserted、update，**没有destory**</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局的指令式命令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;fbind2&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">// 当指令与元素成功绑定时调用</span></span><br><span class="line">  <span class="title function_">bind</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">    element.<span class="property">value</span> = binding.<span class="property">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//指令所在元素时被插入页面时调用</span></span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">    element.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//指令所在的模版被重新解析时被调用</span></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">    element.<span class="property">value</span> = binding.<span class="property">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a = a++ + ++a - a-- - --a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><blockquote><p>XSS 的危害</p><ul><li>1.网络钓鱼，包括盗取各类用户账号</li><li>2.窃取用户 cookies 资料，从而获取用户隐私信息，或利用用户身份进一步对网站执行操作</li><li>3.劫持用户（浏览器）会话，从而执行任意操作，例如进行非法转账、强制发表日志、发送电子邮件等</li><li>4.强制弹出广告页面、刷流量等</li><li>5.网页挂马</li><li>6.进行恶意操作，例如任意篡改页面信息、删除文章等</li><li>7.进行大量的客户端攻击，如 DDoS 攻击</li><li>8.结合其他漏洞，如 CSRF 漏洞，实施进一步作恶</li><li>9.传播跨站脚本蠕虫等</li></ul></blockquote><blockquote><p>keep-alive 有三个属性</p><ul><li>1.include ：记录的是哪些组件可以被缓存</li><li>2.exclude: 记录了哪些组件不能被缓存</li><li>3.max: 记录的是可以缓存组件的最大数量</li></ul></blockquote><p><strong>keep-alive 没有 length 属性</strong></p><blockquote><p>Axios 是一个基于 Promise 的现代 HTTP 客户端，通常用于浏览器和 Node.js 环境中，它具有以下特点：</p><ul><li>简单易用：Axios 提供了一个简洁而直观的 API，易于学习和使用。它支持链式调用，使得可以轻松地进行多个 HTTP 请求</li><li>跨浏览器兼容性：Axios 在各种浏览器中都可以良好运行，包括现代浏览器和旧版本浏览器</li><li>支持异步操作：Axios 基于 Promise 实现，可以处理异步操作，包括处理异步请求和响应</li><li>自动转换数据：Axios 可以自动将响应数据转换为不同的数据格式，例如 JSON、XML、HTML 等，以方便处理</li><li>拦截器：Axios 允许你定义请求和响应的拦截器，可以在请求发送前和响应返回后对数据进行预处理或转换</li><li>请求取消：Axios 支持取消请求，这对于用户在请求未完成时离开页面或取消不再需要的请求非常有用</li><li>并发请求：Axios 可以同时处理多个并发请求，而不需要手动处理 Promise.all()</li><li>错误处理：Axios 提供了一种方便的方式来处理 HTTP 请求中的错误，包括网络错误、超时和非成功的 HTTP 响应状态码</li><li>CSRF 保护：Axios 支持在请求中包含 CSRF 令牌，以提高应用程序的安全性</li><li>服务器端渲染（SSR）：Axios 可以轻松地集成到服务器端渲染的应用程序中，以进行服务器端数据获取。</li></ul></blockquote><pre><code>默认情况下，watchEffect只会监听对象或数组的根属性或元素的变化，而不会递归监听嵌套属性或元素的变化。如果需要深度监听对象或数组的变化，可以使用deep选项**watchEffect 也需要指定 deep 来进行深度监听**</code></pre><blockquote><p>interface 和 tyoe 的区别</p><ul><li>在声明对象时, interface 可以多次声明：interface 可以重复的对某个接口来定义属性和方法； 而 type 定义的是别名，别名是不能重复的</li><li>interface 支持继承的，type 不支持</li><li>interface 可以被类实现</li><li>interface 可以实现声明合并，type 不行</li><li>type 可以使用联合类型或者交叉类型，interface 不行</li><li>interface 只能用于描述对象类型或者函数，而 type 可以描述任意类型</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> job do error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job do error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/7c12abeb.html"/>
      <url>/post/7c12abeb.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>node 中的事件循环的顺序：</p><p>外部输入数据–&gt;轮询阶段(poll)–&gt;检查阶段(check)–&gt;关闭事件回调阶段(close callback)–&gt;定时器检测阶段(timer)–&gt;I&#x2F;O 事件回调阶段(I&#x2F;O callbacks)–&gt;闲置阶段(idle, prepare)–&gt;轮询阶段（按照该顺序反复运行）…</p><ul><li><p>timers 阶段：这个阶段执行 timer（setTimeout、setInterval）的回调</p></li><li><p>I&#x2F;O callbacks 阶段：处理一些上一轮循环中的少数未执行的 I&#x2F;O 回调</p></li><li><p>idle, prepare 阶段：仅 node 内部使用</p></li><li><p>poll 阶段：获取新的 I&#x2F;O 事件, 适当的条件下 node 将阻塞在这里</p></li><li><p>check 阶段：执行 setImmediate() 的回调</p></li><li><p>close callbacks 阶段：执行 socket 的 close 事件回调</p></li><li><p>process.nextTick 这个函数其实是独立于 Event Loop 之外的，它有一个自己的队列，当每个阶段完成后，如果存在 nextTick 队列，就会清空队列中的所有回调函数，并且优先于其他 microtask 执行</p></li><li><p><strong>Node.js 中，microtask 会在事件循环的各个阶段之间执行，也就是一个阶段执行完毕，就会去执行 microtask 队列的任务</strong></p></li></ul></blockquote><blockquote><p>css 百分号是相对什么计算的</p><ul><li>border-width 属性不能使用百分号作为属性值</li></ul><p>可以使用百分号的属性</p><ul><li>line-height 的百分号值是相对于当前元素的 font-size 值计算的，如当前元素 font-size: 12px;，那么 line-height: 100%;表示 line-height 的值是 12px。line-height 属性常用来使文本垂直居中</li><li>vertical-align 的百分号是相对于当前元素的 line-height 值计算的。当 vertical-align 的值是数值时，表示相对于基线上下位移，正值向上，负值向下。vertical-align 常用于使设置了这个属性的元素相对于父元素的对齐方式。vertical-align 属性只能设置于 inline、inline-block 元素才能起作用。vertical-align 的默认值是 baseline</li><li>font-size 的百分号是相对于父元素的 font-size 计算的</li><li>text-indent 是相对于当前元素的包含块计算的</li></ul></blockquote><blockquote><p>https 公钥私钥加密</p><ul><li>客户端和服务器先使用非对称加密，客户端发起请求，服务器将公钥返回给客户端，客户端在拿到服务端的公钥后，通过公钥对 key 进行加密后发送给服务器，服务器再使用它的私钥进行解密后得到 key。这个 key 只有服务器才能拿到。随后客户端和服务端建立连接进行通信，为了提高通信效率，使用对称加密进行，密钥就是之前拿到的 key。<strong>HTTPS 正好综合了这两种加密算法的优点，不仅保证了通信安全，还保证了数据传输效率</strong></li></ul></blockquote><blockquote><p>webpack 的 loader 和 plugin 的区别</p><ul><li>作用不同：Loader 直译为“加载器”：webpack 将一切文件视为模块，但是 webpack 原生只能解析 js&#x2F;json 文件，如果想将其他文件打包的话，就要用到 loader。所以 Loader 的作用是让 webpack 拥有了加载和解析非 JavaScript 文件的能力。Plugin 直译为”插件”。Plugin 可以扩展 webpack 的功能，让 webpack 具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</li><li>用法不同：Loader 在 module.rules 中配置，作为模块的解析规则而存在，类型为数组，每一项都是一个 Object，里面描述了对于什么类型的文件（test），使用什么加载(loader)和使用的参数（options）Plugin 在 plugins 中单独配置，类型为数组，每一项是一个 plugin 的实例，参数都通过构造函数传入</li></ul></blockquote><blockquote><p>Vue 数据更新页面却没有更新的几种情况以及解决方法</p><ul><li>1、Vue 无法检测实例被创建时不存在于 data 中的变量。原因：由于 Vue 会在初始化实例时对 data 中的数据执行 getter&#x2F;setter 转化，所以 变量必须在 data 对象上存在才能让 Vue 将它转换为响应式的。</li><li>2、vue 也不能检测到 data 中对象的动态添加和删除</li><li>3、变量为数组时。不能通过索引直接修改或者赋值，也不能修改数组的长度</li><li>4、异步获取接口数据，DOM 数据不发现变化。原因：Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(funcation, 0) 代替</li><li>5、循环嵌套层级太深，视图不更新。当嵌套太深时，页面也可能不更新，此时可以让页面强制刷新。this.$forceUpdate()迫使vue实例重新（rander）渲染虚拟DOM，注意并不是重新加载组件。结合vue的生命周期，调用$forceUpdate 后只会触发 beforeUpdate 和 updated 这两个钩子函数，不会触发其他的钩子函数。它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件</li><li>6、路由参数变化时，页面不更新(数据不更新)</li><li>7、变量通过赋值来定义的。在 Vue 中有两种类型的变量：响应式变量和非响应式变量。从后端获取的变量通常是响应式变量，也就是说它们会被 Vue 监测到变化并同步到页面上，如果你修改了这些响应式变量，页面会随之改变。而通过赋值来定义的变量通常是非响应式变量，如果你修改了这些非响应式变量，Vue 并不会监测到它们的变化，所以页面不会改变。如果你需要使一个非响应式变量变成响应式变量，可以使用 Vue.set 方法或者数组的变异方法（例如 push、splice 等）例 1：Vue.set(对象,添加的 key,属性值”)，例 2：this.$set(对象,添加的key’,属性值)，强制更新数据：this.$forceUpdate()</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种情况</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// `message` 不是响应式的页面不会发生变化</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决办法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种情况</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">obj</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;&#123;&#123; obj.message &#125;&#125;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 不是响应式的</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">obj</span>.<span class="property">message</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">// 不是响应式的</span></span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">obj</span>.<span class="property">id</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决办法</span></span><br><span class="line"><span class="comment">// 动态添加 - Vue.set</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">obj</span>, <span class="string">&quot;id&quot;</span>, <span class="number">002</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态添加 - this.$set</span></span><br><span class="line"><span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">obj</span>, <span class="string">&quot;id&quot;</span>, <span class="number">002</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态添加多个</span></span><br><span class="line"><span class="comment">// 代替 Object.assign(this.obj, &#123; a: 1, b: 2 &#125;)</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">obj</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">obj</span>, &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态移除 - Vue.delete</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">delete</span>(<span class="variable language_">this</span>.<span class="property">obj</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态移除 - this.$delete</span></span><br><span class="line"><span class="variable language_">this</span>.$delete(<span class="variable language_">this</span>.<span class="property">obj</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种情况</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[<span class="number">1</span>] = <span class="string">&quot;x&quot;</span>; <span class="comment">// 不是响应性的</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[<span class="number">3</span>] = <span class="string">&quot;d&quot;</span>; <span class="comment">// 不是响应性的</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> = <span class="number">2</span>; <span class="comment">// 不是响应性的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决办法</span></span><br><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">items</span>, <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// this.$set</span></span><br><span class="line"><span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">items</span>, <span class="number">4</span>, <span class="string">&#x27;d)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// Array.prototype.splice</span></span><br><span class="line"><span class="string">this.items.splice(indexOfItem, 4, &#x27;</span>d<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">//修改长度</span></span><br><span class="line"><span class="string">this.items.splice(3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 第四种情况</span></span><br><span class="line"><span class="string">&lt;div id=&quot;example&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">  el: &#x27;</span>#example<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  data: &#123;</span></span><br><span class="line"><span class="string">    message: &#x27;</span><span class="number">123</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">vm.message = &#x27;</span><span class="keyword">new</span> message<span class="string">&#x27; // 更改数据</span></span><br><span class="line"><span class="string">vm.$el.textContent === &#x27;</span><span class="keyword">new</span> message<span class="string">&#x27; // false</span></span><br><span class="line"><span class="string">vm.$el.style.color = &#x27;</span>red<span class="string">&#x27; // 页面没有变化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 解决办法</span></span><br><span class="line"><span class="string">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">  el: &#x27;</span>#example<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  data: &#123;</span></span><br><span class="line"><span class="string">    message: &#x27;</span><span class="number">123</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">vm.message = &#x27;</span><span class="keyword">new</span> message<span class="string">&#x27; // 更改数据</span></span><br><span class="line"><span class="string">//使用 Vue.nextTick(callback) callback 将在 DOM 更新完成后被调用</span></span><br><span class="line"><span class="string">Vue.nextTick(function () &#123;</span></span><br><span class="line"><span class="string">  vm.$el.textContent === &#x27;</span><span class="keyword">new</span> message<span class="string">&#x27; // true</span></span><br><span class="line"><span class="string">  vm.$el.style.color = &#x27;</span>red<span class="string">&#x27; // 文字颜色变成红色</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 第五种情况</span></span><br><span class="line"><span class="string">this.$forceUpdate()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 第六种情况</span></span><br><span class="line"><span class="string">&lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;router-link to=&quot;/home/foo&quot;&gt;To Foo&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;router-link to=&quot;/home/baz&quot;&gt;To Baz&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;router-link to=&quot;/home/bar&quot;&gt;To Bar&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">const Home = &#123;</span></span><br><span class="line"><span class="string">  template: `&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;`,</span></span><br><span class="line"><span class="string">  data() &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      message: this.$route.params.name</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const router = new VueRouter(&#123;</span></span><br><span class="line"><span class="string">  mode:&#x27;</span>history<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    routes: [</span></span><br><span class="line"><span class="string">    &#123;path: &#x27;</span>/home<span class="string">&#x27;, component: Home &#125;,</span></span><br><span class="line"><span class="string">    &#123;path: &#x27;</span>/home/:name<span class="string">&#x27;, component: Home &#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">new Vue(&#123;</span></span><br><span class="line"><span class="string">  el: &#x27;</span>#app<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  router</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 上段代码中，我们在路由构建选项 routes 中配置了一个动态路由 &#x27;</span>/home/:name<span class="string">&#x27;，它们共用一个路由组件 Home，这代表他们复用 RouterView。当进行路由切换时，页面只会渲染第一次路由匹配到的参数，之后再进行路由切换时，message 是没有变化的</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 解决方法：1.通过 watch 监听 $route 的变化</span></span><br><span class="line"><span class="string"> const Home = &#123;</span></span><br><span class="line"><span class="string">  template: `&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;`,</span></span><br><span class="line"><span class="string">  data() &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      message: this.$route.params.name</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  watch:&#123;</span></span><br><span class="line"><span class="string"> &#x27;</span>$route<span class="string">&#x27;:function()&#123;</span></span><br><span class="line"><span class="string">this.message = this.$route.params.name</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">new Vue(&#123;</span></span><br><span class="line"><span class="string">  el: &#x27;</span>#app<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  router</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 解决办法2.给&lt;router-view&gt; 绑定key属性，这样 Vue 就会认为这是不同的 &lt;router-view&gt;。弊端：如果从 /home 跳转到 /user 等其他路由下，我们是不用担心组件更新问题的，所以这个时候 key 属性是多余的</span></span><br><span class="line"><span class="string"> &lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;router-view :key=&quot;key&quot;&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>深拷贝的应用场景</p><ul><li>数据持久化：当需要将数据存储到本地存储或发送到服务器时，使用深拷贝可以确保数据的独立性，避免对原始数据的意外修改</li><li>数据变换和处理：在对复杂数据进行处理、变换或计算时，使用深拷贝可以创建一个独立的数据副本，以免干扰原始数据</li><li>缓存管理：当需要对数据进行缓存时，使用深拷贝可以创建一个缓存副本，以避免对原始数据的访问和操作</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面经总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作刷题过程中做错的题</title>
      <link href="/post/2dbd07d2.html"/>
      <url>/post/2dbd07d2.html</url>
      
        <content type="html"><![CDATA[<h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><blockquote><ul><li>正则表达式匹配一个边界的是：\b</li><li>vue 中 watch 支持异步、computed 不支持异步</li><li>Watcher 就是依赖，指哪些地方使用了数据，<strong>一个组件实例、计算属性(computed)、watch 都是 watcher 的实例</strong></li></ul></blockquote><blockquote><p>关于 java 中抽象类与接口</p><ul><li>抽象类有构造方法，接口没有</li><li>抽象类也是类，类是单继承的，接口可以实现多个</li><li>接口定义的变量必须用 public static final 修饰，抽象类没有要求</li><li>抽象类可以有静态方法，接口不可以有静态方法</li><li>抽象类不一定需要有抽象方法（抽象类中可以有抽象方法和普通方法）</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;x&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&quot;y&quot;</span>,</span><br><span class="line">  <span class="attr">print</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">print2</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> p = obj.<span class="property">print</span>;</span><br><span class="line"><span class="keyword">let</span> p2 = obj.<span class="property">print2</span>;</span><br><span class="line">obj.<span class="title function_">print</span>();</span><br><span class="line">obj.<span class="title function_">print2</span>();</span><br><span class="line"><span class="title function_">p</span>();</span><br><span class="line"><span class="title function_">p2</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  y</span></span><br><span class="line"><span class="comment">  x</span></span><br><span class="line"><span class="comment">  x</span></span><br><span class="line"><span class="comment">  x</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>select 语句默认是升序</strong></p><blockquote><p>style 标签放在 body 上方的原因是</p><ul><li>h5 文档是从上而下进行加载并解析的，假如你把 style 标签放置在 body 标签中，或者放到 html 结束标签之后，当文档加载解析到了 style 标签的时候，发现他给页面的某些标签设置了样式，于是浏览器只好给每个元素重新计算样式，再加载出来，在这个过程中，时间明显的浪费了，这也就导致页面的加载速度变慢</li><li>还有就是 IE 浏览器可能会出现 FOUC 的现象（即样式失效导致的页面闪烁问题），但 IE 已经退出市场了</li><li>写在 body 标签后：由于浏览器以逐行方式对 html 文档进行解析；当解析到写在尾部的样式表（外联或写在 style 标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染； 在 windows 的 IE 下可能会出现 FOUC 现象（即样式失效导致的页面闪烁问题）</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rgb转为16进制</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rgbTohex</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> strColor = str.<span class="title function_">substring</span>(<span class="number">4</span>, str.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> arr = strColor.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    res += <span class="built_in">parseInt</span>(item).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rgbS = <span class="string">&quot;rgb(255  ,    255, 255)&quot;</span>;</span><br><span class="line"><span class="title function_">rgbTohex</span>(rgbS);</span><br></pre></td></tr></table></figure><blockquote><p>flex 中 flex 缩放计算 以及 flex 特殊值的总结</p><ul><li>flex-grow:该属性来设置，当父元素的宽度大于所有子元素的宽度的和时（即父元素会有剩余空间），子元素如何分配父元素的剩余空间。 flex-grow 的默认值为 0，意思是该元素不索取父元素的剩余空间，如果值大于 0，表示索取。值越大，索取的越厉害。 举个例子: 父元素宽 400px，有两子元素：A 和 B。A 宽为 100px，B 宽为 200px。 则空余空间为 400-（100+200）&#x3D; 100px。 如果 A，B 都不索取剩余空间，则有 100px 的空余空间。 如果 A 索取剩余空间:设置 flex-grow 为 1，B 不索取。则最终 A 的大小为 自身宽度（100px）+ 剩余空间的宽度（100px）&#x3D; 200px 如果 A，B 都设索取剩余空间，A 设置 flex-grow 为 1，B 设置 flex-grow 为 2。则最终 A 的大小为 自身宽度（100px）+ A 获得的剩余空间的宽度（100px (1&#x2F;(1+2))）,最终 B 的大小为 自身宽度（200px）+ B 获得的剩余空间的宽度（100px (2&#x2F;(1+2))）</li><li>flex-shink:该属性来设置，当父元素的宽度小于所有子元素的宽度的和时（即子元素会超出父元素），子元素如何缩小自己的宽度的。 flex-shrink 的默认值为 1，当父元素的宽度小于所有子元素的宽度的和时，子元素的宽度会减小。值越大，减小的越厉害。如果值为 0，表示不减小。 举个例子: 父元素宽 400px，有两子元素：A 和 B。A 宽为 200px，B 宽为 300px。 则 A，B 总共超出父元素的宽度为(200+300)- 400 &#x3D; 100px。 如果 A，B 都不减小宽度，即都设置 flex-shrink 为 0，则会有 100px 的宽度超出父元素。 如果 A 不减小宽度:设置 flex-shrink 为 0，B 减小。则最终 B 的大小为 自身宽度(300px)- 总共超出父元素的宽度(100px)&#x3D; 200px 如果 A，B 都减小宽度，A 设置 flex-shirk 为 3，B 设置 flex-shirk 为 2。则最终 A 的大小为 自身宽度(200px)- A 减小的宽度(100px _ (200px _ 3&#x2F;(200 _ 3 + 300 _ 2))) &#x3D; 150px,最终 B 的大小为 自身宽度(300px)- B 减小的宽度(100px _ (300px _ 2&#x2F;(200 _ 3 + 300 _ 2))) &#x3D; 250px</li></ul></blockquote><blockquote><ul><li>sass 和 scss 是一样的，同一种东西</li><li>sass 可以继承和扩展</li></ul></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .a;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="regexp">/^[a-z]+$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">test</span>(<span class="literal">null</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">test</span>());</span><br><span class="line"><span class="comment">// true true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;&#125;.<span class="property">length</span>);</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>Google Chrom 内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink 内核</li><li>IE 浏览器内核：Trident 内核，也是俗称的 IE 内核</li><li>Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核</li><li>Safari 浏览器内核：Webkit 内核</li><li>Opera 浏览器内核：最初是自己的 Presto 内核，后来是 Webkit，现在是 Blink 内核</li></ul></blockquote><blockquote><ul><li><p>scoped 的原理</p></li><li><p>1、为组件实例生成一个唯一标识，给组件中的每个标签对应的 dom 元素添加一个标签属性，data-v-xxxx</p></li><li><p>2、给 <style scope> 中的每个选择器的最后一个选择器添加一个属性选择器，原选择器[data-v-xxxx]。如：原选择器.container #id div ，则更改后选择器为.container #id div[data-v-xxxxx]</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 转义前的vue代码 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;example&quot;&gt;hello world&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.example &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 转义后 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;example&quot; data-v-49729759&gt;hello world&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.example[data-v-49729759] &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>为什么需要穿透 scoped？</p><ul><li>引用了第三方组件后，需要在组件中局部修改第三方组件的样式，而又不想去除 scoped 属性造成组件之间的样式污染。此时只能通过特殊的方式，穿透 scoped</li></ul><p>样式穿透的写法有三种：&gt;&gt;&gt;、&#x2F;deep&#x2F;、::v-deep</p><ul><li>如果项目中使用的是 css 原生样式，那么可以直接使用&gt;&gt;&gt;穿透修改</li><li>项目中用到了预处理器 scss 、sass、less 操作符 &gt;&gt;&gt; 可能会因为无法编译而报错 。可以使用 &#x2F;deep&#x2F; <strong>注意：vue-cli3 以上版本不可以</strong></li></ul><p>样式穿透原理</p><ul><li>scoped 后选择器最后默认会加上当前组件的一个标识，比如[data-v-49729759]，用了样式穿透后，在 deep 之后的选择器最后就不会加上标识。</li></ul></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt;&gt;&gt; <span class="selector-class">.cla</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> /deep/ <span class="selector-class">.cla</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> ::v-deep .cla &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> job do error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job do error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作刷题过程中做错的题</title>
      <link href="/post/5aba3744.html"/>
      <url>/post/5aba3744.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-相关知识的错题"><a href="#HTML-相关知识的错题" class="headerlink" title="HTML 相关知识的错题"></a>HTML 相关知识的错题</h2><blockquote><p>下面有关 CSS 中 link 和 @import 的区别，描述错误（ D ）</p><ul><li>A. link 属于 XHTML 标签，而 @import 完全是 CSS 提供的一种方式</li><li>B. 当一个页面被加载的时候，link 引用的 CSS 会同时被加载，而 @import 引用的 CSS 会等到页面全部被下载完再被加载</li><li>C. link 在支持 CSS 的浏览器上都支持而 @import 只在 5.0 以上的版本有效</li><li>D. 当使用 JavaScript 控制 DOM 去改变样式的时候，只能使用 @import 方式</li></ul><p>解答：关于 link 与@import 的区别:</p><ul><li>区别 1：link 是 XHTML 标签，除了加载 CSS 外，还可以定义 RSS 等其他事务；@import 属于 CSS 范畴，只能加载 CSS</li><li>区别 2：link 引用 CSS 时，在页面载入时同时加载；@import 需要页面网页完全载入以后加载</li><li>区别 3：link 是 XHTML 标签，无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持</li><li>区别 4：link 支持使用 Javascript 控制 DOM 去改变样式；而@import 不支持</li></ul></blockquote><blockquote><ul><li>css 属性 position 可以设置的值包括：fixed、relative、absolute、<strong>inherit</strong></li><li>实现翻书的效果，可以使用 css3 里面的什么方法：rotateY：定义沿 Y 轴的 3D 旋转，可实现翻书的效果</li><li>百分比单位始终根据父元素相应值来计算是错误的：比如：transform: translate(50%,50%)对自身、position: fixed 元素（如宽高等）的百分比是相对于视口的</li><li>em 标签是不会加粗字体的，它只是表示强调内容，但是显示的还是斜体，不加粗</li></ul></blockquote><blockquote><p>HTML5 新增</p><ul><li>新增的表单元素：output、datalist、keygen</li><li>新增的表单类型(type&#x3D;”xxx”):color 设色器、date 日期选择器、datetime(utc 时间)、datetime-local(无时区)、email(包含 email 的输入域)、month（月份）、number（数值）、range(范围)、search（搜索）、tel(电话号码)、url、week</li><li>新增的表单属性：autocomplete（自动补全）、autofocus（自动聚焦）、required(是否必选)、height（高度）、width（宽度）、multiple（多文件上传）、max（最大值）、min、step、list、pattern（模式匹配&#x2F;正则）、placeholder（默认值）、novalidate(提交表单时不校验 email&#x2F;tel 这些需要校验的表单类型)、form（表单元素可以在 form 之外，但是可以指定属于哪个 form，会一起发送）、formaction（请求地址）、formmethod（form 元素的请求方法,get&#x2F;post 这些）、formenctype、formnovalidate</li></ul></blockquote><blockquote><p>关于 a 元素</p><ul><li>元素可以没有 href 属性，此时为超链接的一个占位符，则 A 错误</li><li>target 属性可选有：_blank、_self、framename 等值</li><li>rel 属性有多个值时，使用空格 “ “ 分隔</li><li>href 属性的可选有：绝对路径（href &#x3D; “<a href="https://www.baidu.com")、相对路径(href/">https://www.baidu.com&quot;）、相对路径（href</a> &#x3D; “index.html”）、锚（href &#x3D; “#top”）</li></ul></blockquote><blockquote><p>微信公众号相关的 H5 页面测试时，下列哪项说法是错误的？( B )</p><ul><li>A. H5 页面在第一次打开时，需要测试公众号授权</li><li>B. 手机设置里定位未被打开时，H5 页面的定位将要手动选择</li><li>C. 公众号未授权进行定位时，H5 页面的定位将要手动选择</li><li>D. H5 页面需要测试页面是否能被浏览器正常打开</li></ul><p>手机定位未打开，H5 和微信公众号没有权限，手动选择也不行</p></blockquote><blockquote><ul><li><p> 元素的父元素不能是 <a> 元素</li><li><button> 是行内块元素，可以嵌套行内元素。但是，不推荐嵌套 <a> 元素</li><li><dl>、<dt>、<dd> 、<h>这些 标题标签 不推荐嵌套块级元素</li><li>产生粗体字的 HTML 标签是<b>，没有<bold>标签</li><li>在 HTML5 中，哪个方法用于获得用户的当前位置？：getCurrentPosition()</li><li><progress> 标签不填写 max 和 value 会自动滑动</li><li><audio> 与 </audio> 之间插入的内容是再不支持 audio 的时候显示的</li><li><video> 标签中 controls 属性决定是否向用户显示控件</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据 HTML 规范，以下代码中，外层容器 .outer 的宽高分别是： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  span是display:inline 设置宽高是不起作用的，宽高是由自身的撑起的，div是display:block，宽高若有设置就是设置的，没有设置，取默认值。高为自身撑起的，宽为100%</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>head 中如果有<strong>多个 link 标签是同时加载的，script 标签才会加载完一个再加载另一个</strong></li><li>HTML input 元素种类：email、url、number、range、Date pickers(date, month, week, time, datetime, datetime-local)、search、color</li><li>HTML5 支持 HTML4 中的所有表单控件</li><li><input>元素的 type 属性的取值可以是：button、checkbox、file、hidden、image、password、radio、reset、submit、text</li><li>Video&#x2F;Audio 中会触发的方法有：load() play() pause()，会出发的事件有：play() playing() pause() seeked() seeking() abort()</li></ul></blockquote><blockquote><p>以下哪些 HTML 元素可以获得焦点？( A B D )</p><ul><li><p>A. <div contenteditable="true">我可以</div></p></li><li><p>B. <p tabindex="1">我可以</p></p></li><li><p>C. <a id="yes">我可以</a></p></li><li><p>D. <input type="text" value="我可以" /></p></li><li><ol><li>contenteditable：true|false 规定元素文本是否可编辑；</li></ol></li><li><ol start="2"><li>tabindex：0 | -1 | x；</li></ol></li><li><ol start="3"><li>0：tab 键可获取焦点；-1：tab 键不可获取焦点；x：x&gt;0，x 越小获取焦点优先级越高；</li></ol></li></ul></blockquote><blockquote><p>下列说法错误的是 ( A )</p><ul><li><p>设置 display:none 后的元素只会导致浏览器的重排而不会重绘</p></li><li><p>设置 visibility:hidde 后的元素只会导致浏览器重绘而不会重排</p></li><li><p>设置元素 opacity:0 之后，也可以触发点击事件</p></li><li><p>visibility:hidden 的元素无法触发其点击事件</p></li><li><p>display：none 指的是元素完全不陈列出来，不占据空间，涉及到了 DOM 结构，故产生 reflow 与 repaint</p></li><li><p>visibility：hidden 指的是元素不可见但存在，保留空间，不影响结构，故只产生 repaint，但不可触发绑定事件</p></li><li><p>opacity&#x3D;0：指的是元素不可见但存在，保留空间，不影响结构，并且，如果该元素已经绑定一些事件，如 click 事件，那么点击该区域，也能触发点击事件的</p></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如何获取下面表单select域的选择部分的文本，其中obj=document.getElemById(&quot;obj&quot;) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span> <span class="attr">size</span>=<span class="string">&quot;1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;”obj”&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;c&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  选取文本</span></span><br><span class="line"><span class="comment">  obj.options[obj.selectedIndex].text；</span></span><br><span class="line"><span class="comment">  obj.options[obj.selectedIndex].value</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>属于 html5 新增规范的有（ C D E）</p><ul><li>A. cookie</li><li>B. websql</li><li>C. sessionStorage</li><li>D. localStorage</li><li>E. WebSocket</li></ul><p>websql 并不是 HTML5 规范的一部分，而是一个独立的规范，可以用来做一些离线应用</p></blockquote><p><strong>标准盒子模型 ＝ margin + border + padding + width （width &#x3D; content ）IE 盒子模型 ＝ margin + width（width &#x3D; border + padding + content ）</strong></p><blockquote><p>关于 web 表单登录中用到的图形验证码的实现,以下做法不正确的有: ( A B D )</p><ul><li>A. 返回给浏览器的 html 代码中包含图形验证码和文本字符串,登录前客户端判断输入内容和页面中保存的内容是否一致</li><li>B. 服务器端在返回的图片和 cookie 中同时包含图形验证码,登录前客户端判断输入内容和 cookie 保存的内容是否一致</li><li>C. 服务器端生成验证码后一方面通过图片将验证码返回给客户端,同时在服务器端保存文本的验证码,由服务器端验证输入内容是否正确</li><li>D. 浏览器通过识别图形验证码中的内容和用户输入的内容判断是否一致</li></ul><p>出于安全性，不能在客户端进行验证</p></blockquote><blockquote><p>下面哪些语句执行结果为 true</p><ul><li>A. ‘foo’ &#x3D;&#x3D; new function(){ return String(‘foo’); };</li><li>B. ‘foo’ &#x3D;&#x3D; new function(){ return new String(‘foo’); };</li><li>C. [] &#x3D;&#x3D; 0</li><li>D. ![]</li><li>E. !0</li></ul><p>String()作为普通函数使用时，将值转为字符串，不是对象，默认返回是一个空对象，原型为匿名函数的 prototype</p></blockquote><blockquote><p>下列表达式中，返回值为 true 的是（ A D ）</p><ul><li>A. Object.is(NaN,NaN)</li><li>B. Object.is(+0,-0)</li><li>C. NaN &#x3D;&#x3D;&#x3D; NaN</li><li>D. +0 &#x3D;&#x3D;&#x3D; -0</li></ul><p>Object.is()与&#x3D;&#x3D;&#x3D;都是判断两个数是否严格相等。它们的区别主要在 NaN 自身和+0 与-0 的判断。对于 NaN 自身的判断，Object.is(NaN,NaN)的返回结果为 true，而 NaN&#x3D;&#x3D;&#x3D;NaN 的返回结果为 false；对于+0、-0 的判断，Object.is(+0,-0)的返回结果为 false，而+0&#x3D;&#x3D;&#x3D;-0 的返回结果为 true</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.c</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.c</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span>b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span>&gt;</span>c<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- wrap 这个 div 的高度是：150px --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/config/img/other/job-error-6.png"></p><blockquote><ul><li>range 定义带有 slider 控件的数字字段。没有 slider</li><li>CSS 盒子模型中<strong>（padding）</strong>是透明的，并且这部分可以显示背景</li><li>a :link、a:hover、a:visited、a:active 中，定义 CSS 时候的顺序不同，也会直接导致链接显示的效果不同。为了保证每个效果都能正确的触发，定义时的顺序应该为：link、visited、hover、active</li><li>canvas、label 都属于行内元素</li><li>input 元素中，tel 类型属性定义了输入电话号码的控件，没有 telephone</li><li>window.onerror 方法默认情况下无法获取跨域脚本的报错详情（如果想通过 onerror 函数收集不同域的 js 错误，我们需要做两件事：1、相关的 js 文件上加上 Access-Control-Allow-Origin:*的 response header；2、引用相关的 js 文件时加上 crossorigin 属性）</li><li>canvas 中使用 drawImage 贴图会受跨域限制</li><li>week 类型用于定义周和年控件（无时区）(把最小单位作为底层就是，日月年选日，月年选月，周年选周)</li></ul></blockquote><blockquote><p>以下哪些方法可以优化滚动性能:（ A B C D ）</p><ul><li>A. 在滚动中对滚动函数进行节流处理</li><li>B. 滚动中减少导致重绘的操作</li><li>C. 滚动中减少导致重排的操作</li><li>D. 对滚动事件进行防抖处理</li></ul></blockquote><blockquote><p>CSS 百分比参照问题</p><ul><li>参照父元素宽度的元素：padding margin width text-indent</li><li>参照父元素高度的元素：height</li><li>参照父元素属性:font-size line-height</li><li>特殊：相对定位的时候，top(bottom) left(right)参照的是父元素的内容区域的高度与宽度，而绝对定位的时候参照的是最近的定位元素包含 padding 的高度与宽度</li></ul></blockquote><blockquote><p>html5 的跨文档消息传输说法错误的是：( B )</p><ul><li>A. 可以实现同域内的 web 页面之间可以互相通信</li><li>B. 缺点是不能实现跨域通信</li><li>C. 可以相互传递字符串和对象</li><li>D. 使用这个功能，需要获取到网页所在窗口对象的实例</li></ul><p>h5 提供了网页文档之间发送信息和互相接收的功能。使用这个功能，只要获得网页窗口所在对象的实例，即可以同域（端口号+域）可以相互通信，跨域也可以相互通信</p></blockquote><blockquote><ul><li>当表单中包含文件上传控件时，需要将 enctype 设置为<strong>multipart&#x2F;form-data</strong></li><li>application&#x2F;x-www-form-urlencoded 在发送前编码所有字符（默认）</li><li>text&#x2F;plain 空格转换为 “+” 加号，但不对特殊字符编码</li><li>HTML5 <strong>能</strong>向后兼容旧浏览器</li><li>一个页面不可以同时存在多个可见的 main 元素</li><li>p 标签中不能包含某些标签，比如<li>标签等</li><li>track 元素是 audio 和 video 的子元素，为多媒体文件添加辅助文本信息，eg:字幕、屏幕阅读器说明和主题等</li><li>HTTP 协议的内容协商消息头包括( )。 i．内容协商消息头 ii．缓存控制消息头</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> job do error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job do error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作刷题过程中做错的题</title>
      <link href="/post/c3b366fe.html"/>
      <url>/post/c3b366fe.html</url>
      
        <content type="html"><![CDATA[<h3 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h3><blockquote><ul><li>textarea 的属性不包括: width (这个属性指的是写在标签内的意思)</li><li>如果一个 HTML 文档内含有阿拉伯文,则应该? 答案：使用 utf-8 编码</li><li>如何获取 ajax 请求的响应状态码？答案：使用 readyState 属性和 status 属性来获取 AJAX 通信的状态码，并根据不同的状态码来执行相应的操作</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;example.com/api/data&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> statusCode = xhr.<span class="property">status</span>;</span><br><span class="line">    <span class="comment">// 输出状态码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(statusCode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><blockquote><ul><li>上网的时候，访问某个网页却突然出现了某个运营商的网页（如联通、电信）。出现此问题可能的原因是? 答案： DNS 劫持</li></ul><p>readonly 和 disable 的区别</p><ul><li>共同点：如果设为 true，则 form 属性将不能被编辑，⽂本框不能输⼊⽂字</li></ul><p>区别：</p><ul><li>样式不同：readonly 只是使⽂本框不能输⼊，外观没有变化。disabled 会使⽂本框变灰。</li><li>有效范围不同：readonly 只针对 input(text &#x2F; password)和 textarea 之类可以输⼊⽂本的输⼊项有效。disabled 对于所有的表单元素都有效</li><li>是否能获取⿏标焦点：readonly 设为 true，⽤户不能编辑，但⿏标仍然可以聚焦。disabled 设为 true，输⼊项不能获取焦点，⽤户的所有操作（⿏标点击、键盘输⼊等）对该输⼊项都⽆效</li><li>是否回传数据：表单元素使⽤了 readonly 后，会将该值传递出去，即通过 request.getParameter(“name”)可以得到⽂本框内的内容。表单元素使⽤了 disabled 后，当我们将表单以 POST 或 GET 的⽅式提交的话，这个元素的值不会被传递出去，即通过 request.getParameter(“name”)得不到⽂本框中的内容（如果有的话）</li><li>设置了 readonly 和 disabled 的表单元素，用户无法再界面上改变它的值。但通过 JavaScript 是可以改变其值的，同样背景色，字体颜色等也可以通过 JavaScript 来改变</li></ul></blockquote><blockquote><ul><li>不是存储结构的是（）A.二叉树 B.双向链表 C.哈希表 D.循环队列 答案：A</li><li>伪元素选择器通过选择元素的某个部分，对元素的特定部分单独设置样式。伪元素是某个元素的子元素，是逻辑上存在的虚拟元素，但是实际<strong>并不存在于 DOM 树中</strong></li></ul></blockquote><p><strong>::first-line 向文本的首行添加样式，只能应用于块级元素。是有这个伪元素选择器的</strong></p><blockquote><ul><li><strong>加盐后使用哈希可以抵御彩虹表攻击</strong>：彩虹表在生成的过程中，针对的是特定的函数 H，H 如果发生了改变，则已有的彩虹表数据就完全无法使用。生成彩虹表需要先预先选定一些口令，再一步步生成。然而如果加盐的话，会导致之前生成的那些口令都没有用了。（正确的口令需要有加了盐的格式），因此可以抵御彩虹表攻击。</li></ul></blockquote><blockquote><ul><li>永久重定向 301，临时重定向 302</li></ul></blockquote><blockquote><p>当你在使用 React 构建应用程序时，React Hooks 是一种非常强大的功能，它可以使你更容易地处理组件状态和生命周期。它们允许你将逻辑与 React 组件分离，从而使代码更清晰、更可维护。React Hooks 是 React16.8 版本中引入的，可以让你在函数组件中使用状态和其他 React 功能。在此之前，React 组件必须是类组件才能使用这些功能。</p><ul><li>useState：useState 是 React Hooks 中最常用的一个。它可以用于在函数组件中添加状态。这个状态可以在组件的整个生命周期中跟踪，并且每当状态更新时，组件将重新呈现</li><li>useEffect 是另一个常用的 React Hook。它可以让你在函数组件中处理副作用。副作用是指对组件外部状态的修改，如数据获取、订阅事件等。我们使用 useEffect 来设置文档标题，以显示用户单击按钮的次数。useEffect 接受两个参数：一个副作用函数和一个依赖数组。当依赖数组中的任何值发生变化时，副作用函数将被调用</li><li>useContext 可以让你在函数组件中访问 React 上下文。上下文是 React 组件树中共享的数据。我们使用 useContext 来访问主题上下文。使用 useContext 需要创建一个上下文对象，然后将其传递给组件树中的其他组件</li><li>useReducer: 用于处理具有复杂状态逻辑的组件，类似于 Redux 中的 reducer</li><li>useCallback: 用于在函数组件中缓存回调函数，避免不必要的重新渲染</li><li>useMemo: 用于在函数组件中缓存值，避免不必要的计算</li><li>useRef: 用于在函数组件中保存可变的引用，例如保存定时器 ID</li><li>useImperativeHandle: 允许自定义组件公开其内部方法</li><li>useLayoutEffect: 类似于 useEffect，但在 DOM 更新之前同步执行副作用函数</li><li>useDebugValue: 用于在 React 开发者工具中显示自定义 Hook 的标签</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useReducer是另一种让函数组件保存状态的方式，他的使用方式和rudux的reducer是及其相似的，状态都被保存在一个特殊的地方，组件要是想更改状态就要调用dispatch方法去触发一个action，这个action会被reducer函数接收到，在useReducer内部要判断action的类型是什么，再去选择对他进行怎样的处理，然后再以返回值的方式更新这个状态</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, dispatch] = <span class="title function_">useReducer</span>(reducer, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// useReducer接收两个参数第一个参数就是reducer函数，我们创建reducer函数去进行对数据的处理，第二个参数为状态的初始值；useReducer这个函数的返回值返回一个数组，数组里面有两个值一个是存储的状态，第二个是触发action的dispatch方法。自己创建的reducer函数接受两个值，一个是存储的状态另外一个就是触发的action</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useContext这个钩子函数的作用是在跨组件层级获取数据时简化代码</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> contContent = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">contContent.Provider</span> <span class="attr">value</span>=<span class="string">&#123;100&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Foo</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">contContent.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">useContext</span>(contContent);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"><span class="comment">// 使用createContext创建一个实例。在外层组件中使用实例的Provider组件包裹底层组件，在组件内部传值。在底层组件中，使用useContext传入生成的createContext实例获取到上层组件传入的值</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useEffect()让函数型组件拥有处理副作用的能力。类似生命周期函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">useEffect执行时机：可以把useEffect看做componentDidMount、componentDidupdate和componentWillUnmount这三个函数的组合</span></span><br><span class="line"><span class="comment">useEffect（() =&gt; &#123;&#125;）  =&gt;  componentDidMount, componentDidupdate</span></span><br><span class="line"><span class="comment">useEffect(() =&gt; &#123;&#125;, [])   =&gt;   componentDidMount</span></span><br><span class="line"><span class="comment">useEffect(()=&gt; () =&gt; &#123;&#125;)   =&gt;   componentWillUnMount</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 组件挂在完成之后进行  组件数据更新之后进行</span></span><br><span class="line">  <span class="comment">// useEffect(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;123&#x27;)</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组件挂载完成之后进行一次，之后都不再进行</span></span><br><span class="line">  <span class="comment">// useEffect(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;456&#x27;)</span></span><br><span class="line">  <span class="comment">// &#125;, [])</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组件再被卸载之前进行</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件被卸载了&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// useEffect的使用方法。实例：为window对象添加滚动事件。这个事件要在组件挂载之前绑定</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">onScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发生滚动了&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 组件挂载完成之后进行一次，之后都不再进行</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, onScroll);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// useEffect结合异步函数：useEffect中的参数函数不能是异步函数，因为useEffect函数要返回清理资源的函数，如果是异步函数就变成返回Promise，如果想进行异步操作，里面就要变成自执行函数，在自执行函数内部使用异步函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [person, setPerson] = <span class="title function_">useState</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span> &#125;);</span><br><span class="line">  <span class="comment">// 组件挂载完成之后进行一次，之后都不再进行</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(&#123; <span class="attr">msg</span>: <span class="string">&quot;hello&quot;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;只有数字滨化&quot;</span>);</span><br><span class="line">  &#125;, [count]);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">getData</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;)();</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setPerson(&#123; name: &quot;lisi&quot; &#125;)&#125;&gt;setPerson<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// useMemo()：useMemo的行为类似Vue中的计算属性，可以检测某个值得变化，根据变化值计算新值。useMemo会缓存计算结果。如果检测值没有发生变化，即使组件重新渲染，也不会重新计算。此行为可以有助于避免在每个渲染上进行昂贵的计算。性能优化，如果本组件中的数据没有发生变化，阻止组件更新。类似类组件中的PureComponent和shouldComponentUpdate</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> count * <span class="number">2</span>;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;result&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Foo</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Foo</span> = <span class="title function_">memo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Foo组件被重新渲染了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// useCallBack()：性能优化，缓存函数，使组件重新渲染时得到相同的函数实例。他的使用场景是，当子组件通知父组件的时候，子组件内部状态没有发生改变但是还是进行了重新渲染，memo虽然解决子组件内部状态没有变阻止子组件重新渲染问题，但是当父组件状态改变，组件发生了重新渲染，重新渲染过后每一次生成的改变状态的函数的实例都变了，导致传递给子组件的方法中的实例变了，当传入的函数实例改变，子组件就会认为组件内部的状态发生了改变，他就会导致重新渲染。解决这个问题的方法就是让传给子组件的函数实例都是同一个这里就要用到useCallBack()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> resetCount = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> <span class="title function_">setCount</span>(<span class="number">0</span>), [setCount])</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> count * <span class="number">2</span></span><br><span class="line">  &#125;, [count])</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;result&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Foo</span> <span class="attr">resetCount</span>=<span class="string">&#123;resetCount&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Foo</span> = <span class="title function_">memo</span>(</span><br><span class="line">  <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Foo组件被重新渲染了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.resetCount&#125;</span>&gt;</span>resetCount<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// useRef：他的作用是获取dom元素对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> box = <span class="title function_">useRef</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;box&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(box)&#125;&gt;获取div<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 他的另外一个作用是保存数据（跨组件周期）：即使组件重新渲染，保存的数据仍然还在。保存的数据被更改不会触发组件重新渲染，他和useState是不一样的useState保存的是状态数据，状态发生改变后会触发组件重新渲染，而useRef存储的数据不是状态数据，即使数据发生变化也不会触发组件进行重新渲染</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例定时器开关：一开始在元素挂载之后开启定时器，点击按钮关闭定时器，若定时器的实例定义在最外层默认为空比如let timer = null，当数据改变，组件重新渲染，这样timer又变为空了，会导致无法关闭。所以要使用useRef让保存的数据即使组件重新渲染也不让他的值改变</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> timeId = <span class="title function_">useRef</span>()</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    timeId.<span class="property">current</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;<span class="title function_">setCount</span>(count + <span class="number">1</span>)&#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">stopCount</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timeId.<span class="property">current</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>= <span class="string">&#123;stopCount&#125;</span>&gt;</span>清楚定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> job do error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job do error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作刷题过程中做错的题</title>
      <link href="/post/27da499c.html"/>
      <url>/post/27da499c.html</url>
      
        <content type="html"><![CDATA[<h2 id="非编程题"><a href="#非编程题" class="headerlink" title="非编程题"></a>非编程题</h2><h3 id="GUI-渲染引擎和-V8-引擎是互斥的吗"><a href="#GUI-渲染引擎和-V8-引擎是互斥的吗" class="headerlink" title="GUI 渲染引擎和 V8 引擎是互斥的吗"></a>GUI 渲染引擎和 V8 引擎是互斥的吗</h3><pre><code>答案：**互斥**GUI渲染线程与JS引擎线程是互斥的，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行</code></pre><h3 id="以下代码输出结果"><a href="#以下代码输出结果" class="headerlink" title="以下代码输出结果"></a>以下代码输出结果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title class_">Promise</span>.<span class="title function_">all</span>([]))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title class_">Promise</span>.<span class="title function_">all</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title class_">Promise</span>.<span class="title function_">race</span>([]))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;6&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案：1、3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.all 会立即返回 resolved 状态，因而会立马输出，而 Promise.race()传入空数组不做任何操作，则一直处于 pending 状态，不会走到 then ，所以永远不会输出</span></span><br></pre></td></tr></table></figure><h3 id="二分查找，不少于五次，能找到的节点数为多少"><a href="#二分查找，不少于五次，能找到的节点数为多少" class="headerlink" title="二分查找，不少于五次，能找到的节点数为多少"></a>二分查找，不少于五次，能找到的节点数为多少</h3><pre><code>当时题目给的范围是[45....80]，举个例子，[1....30]，第一次查找是15，下一次查找可以分为大于或者小于所以是8或者23，然后再下一次，对于8和23又可以分为大于或者小于，所以8的下一次是4或者12，23的下一次是19或者27，也就是每一次的查找结果可以画为二叉树，如果节点数量足够，就是一颗满二叉树，主要取决于范围的大小，查找次数的计算次数处于：1 - [logn] + 1，底数是2，n是节点数，然后就是计算二叉树节点数量，满二叉树就是2的n减1，不满的话，就要看看少了多少，在计算</code></pre><h3 id="看代码，写输出"><a href="#看代码，写输出" class="headerlink" title="看代码，写输出"></a>看代码，写输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">for</span>: <span class="number">117</span>,</span><br><span class="line">  <span class="number">0</span>: <span class="number">935</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">for</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&quot;0&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案：117 935，都能输出</span></span><br></pre></td></tr></table></figure><h3 id="看代码，写输出-1"><a href="#看代码，写输出-1" class="headerlink" title="看代码，写输出"></a>看代码，写输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [, ,];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">0</span>] === arr2[<span class="number">0</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">hasOwnProperty</span>(<span class="number">0</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">hasOwnProperty</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案：2、2、true、true、false</span></span><br></pre></td></tr></table></figure><h3 id="含有-n-个顶点和-e-条边的有向图的邻接矩阵中-零元素的个数是"><a href="#含有-n-个顶点和-e-条边的有向图的邻接矩阵中-零元素的个数是" class="headerlink" title="含有 n 个顶点和 e 条边的有向图的邻接矩阵中,零元素的个数是"></a>含有 n 个顶点和 e 条边的有向图的邻接矩阵中,零元素的个数是</h3><pre><code>答案：n的平方-e，因为n个顶点，矩阵大小为n的平方，又e条边，但是有向的，所以剩下的都是0，所以n*n-e</code></pre><h3 id="代码相关的-console"><a href="#代码相关的-console" class="headerlink" title="代码相关的 console"></a>代码相关的 console</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// [&quot;a&quot;, null]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="literal">undefined</span>, <span class="title class_">Symbol</span>(b)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReferenceError: b is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr));</span><br></pre></td></tr></table></figure><h3 id="weakMap-相关"><a href="#weakMap-相关" class="headerlink" title="weakMap 相关"></a>weakMap 相关</h3><blockquote><ul><li>WeakMap 中的“weak”（弱），描述的是 JavaScript 垃圾回收程序对待“弱映射”中键的方式</li><li><strong>弱映射中的键只能是 Object 或者继承自 Object 的类型（null 除外），尝试使用非对象设置键会抛出 TypeError。值的类型没有限制</strong></li><li>WeakMap 中“weak”表示弱映射的键是“弱弱地拿着”的。意思就是，这些键不属于正式的引用，不会阻止垃圾回收。但要注意的是，弱映射中值的引用可不是“弱弱地拿着”的。只要键存在，键&#x2F;值对就会存在于映射中，并被当作对值的引用，因此就不会被当作垃圾回</li><li>WeakMap 与 Map 在 Api 上的区别主要是有两个，一个是没有遍历操作（没有 key(),values()和 entries()方法），也没有 size 属性，因为没有方法列出所有的键名，某个键名是否存在是不可以被知道的，和垃圾回收机制是否运行相关。二是无法清空，即它不支持 clear 方法。因此，WeakMap 只有四个方法可以使用：get(),set(),has(),delete();</li></ul></blockquote><blockquote><p>用途</p><ul><li>WeakMap 最常见的用途就是把 DOM 节点作为键</li><li>WeakMap 的另一用途是缓存计算结果</li><li>WeakMap 还可以用来部署私有属性</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码中，myElement 是一个 DOM 节点，每当发生了 click 事件就会更新一下状态，我们将这个状态作为键值放在了WeakMap 里面，对应的键名就是myElement,一旦这个Dom节点删除，这个状态就会消失，不存在内存泄漏的问题</span></span><br><span class="line"><span class="keyword">let</span> myElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;logo&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> myWeakmap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"></span><br><span class="line">myWeakmap.<span class="title function_">set</span>(myElement, &#123; <span class="attr">timesClicked</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">myElement.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> logoData = myWeakmap.<span class="title function_">get</span>(myElement);</span><br><span class="line">    logoData.<span class="property">timesClicked</span>++;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进一步来讲，可以将事件处理程序存放到 WeakMap 里面来，如下：</span></span><br><span class="line"><span class="keyword">const</span> listener = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"></span><br><span class="line">listener.<span class="title function_">set</span>(element1, handler1);</span><br><span class="line">listener.<span class="title function_">set</span>(element2, handler2);</span><br><span class="line"></span><br><span class="line">element1.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, listener.<span class="title function_">get</span>(element1), <span class="literal">false</span>);</span><br><span class="line">element2.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, listener.<span class="title function_">get</span>(element2), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存计算结果</span></span><br><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countKeys</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断弱引用里面是否有obj</span></span><br><span class="line">  <span class="keyword">if</span> (cache.<span class="title function_">has</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> [cache.<span class="title function_">get</span>(obj), <span class="string">&quot;cached&quot;</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span>;</span><br><span class="line">    cache.<span class="title function_">set</span>(obj, count);</span><br><span class="line">    <span class="keyword">return</span> [count, <span class="string">&quot;computed&quot;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;kakuqo&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="comment">// [ 2, &#x27;computed&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countKeys</span>(obj));</span><br><span class="line"><span class="comment">// [ 2, &#x27;cached&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countKeys</span>(obj));</span><br><span class="line"></span><br><span class="line">obj = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署私有属性</span></span><br><span class="line"><span class="keyword">const</span> _counter = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> _action = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Countdown</span> &#123;</span><br><span class="line">  <span class="comment">// 传递两个参数</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">counter, action</span>) &#123;</span><br><span class="line">    _action.<span class="title function_">set</span>(<span class="variable language_">this</span>, action);</span><br><span class="line">    _counter.<span class="title function_">set</span>(<span class="variable language_">this</span>, counter);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">dec</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> counter = _counter.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (counter &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    counter--;</span><br><span class="line">    _counter.<span class="title function_">set</span>(<span class="variable language_">this</span>, counter);</span><br><span class="line">    <span class="keyword">if</span> (counter === <span class="number">0</span>) &#123;</span><br><span class="line">      _action.<span class="title function_">get</span>(<span class="variable language_">this</span>)();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">Countdown</span>(<span class="number">2</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DONE&quot;</span>));</span><br><span class="line">c.<span class="title function_">dec</span>();</span><br><span class="line"><span class="comment">// DONE</span></span><br><span class="line">c.<span class="title function_">dec</span>();</span><br></pre></td></tr></table></figure><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><blockquote><ul><li>super 继承，在 constructor 中调用 super，子类没有定义 constructor 方法，super 方法会被默认添加。子类的构造函数中，只有调用 super 之后，才可以使用 this 关键字，否则会报错（因为：ES5 的继承的实质是先创造子类的实例对象 this，然后再将父类的方法添加到 this 上面（Parent.apply(this)）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到 this 上面（所以必须先调用 super 方法），然后再用子类的构造函数修改 this。）</li><li>super 方法：作为函数时，super()只能用在子类的构造函数之中</li><li>super 作为对象时，在普通方法中，指向父类的原型对象，在静态方法中，指向父类</li></ul></blockquote><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><pre><code>Symbol可以作为键</code></pre><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><pre><code>题目：已知一棵完全二叉树第6层有6个叶子节点，该二叉树最多有个节点？最少有多少个节点？给出简单分析过程。节点最多的情况：该完全二叉树共有7层。1~6层为满二叉树，第6层有6个叶子节点，其余26个是第7层的根节点。总结点数为：1+2+4+8+16+32+26x2=115个。节点最少的情况：该完全二叉树共有6层。1~5层为满二叉树，第6层只有6个叶子节点。总结点数为：1+2+4+8+16+6=37个。**题目说的是叶子节点，不是节点**</code></pre><h3 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h3><blockquote><ul><li>‘a’ - ‘z’：97 - 122 ASCII 码</li><li>‘A’ - ‘Z’：65 - 90 ASCII 码</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> job do error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job do error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html 相关知识（5）</title>
      <link href="/post/ba26f2b9.html"/>
      <url>/post/ba26f2b9.html</url>
      
        <content type="html"><![CDATA[<h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><h3 id="编写一个-todolist"><a href="#编写一个-todolist" class="headerlink" title="编写一个 todolist"></a>编写一个 todolist</h3><pre><code>编写一个todolist，可以添加、删除item，并且实现模糊查询</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TODOList<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#ff5550</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#back</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">3px</span> <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#back</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#list_back</span> <span class="selector-class">.single</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#list_back</span> <span class="selector-class">.single</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#list_back</span> <span class="selector-class">.single</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>todos<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;back&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;addInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list_back&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> oAddInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;addInput&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> oList_back = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;list_back&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> all = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;single&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      oAddInput.<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (event.<span class="property">keyCode</span> == <span class="string">&quot;13&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> oSpan = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> oP = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          oDiv.<span class="title function_">appendChild</span>(oP);</span></span><br><span class="line"><span class="language-javascript">          oDiv.<span class="title function_">appendChild</span>(oSpan);</span></span><br><span class="line"><span class="language-javascript">          oP.<span class="property">innerHTML</span> = oAddInput.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">          oSpan.<span class="property">innerHTML</span> = <span class="string">&quot;&amp;times;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          oDiv.<span class="property">className</span> = <span class="string">&quot;single&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          oList_back.<span class="title function_">appendChild</span>(oDiv);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 清空输入框</span></span></span><br><span class="line"><span class="language-javascript">          oAddInput.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          oSpan.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 绑定删除方法</span></span></span><br><span class="line"><span class="language-javascript">            oList_back.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">parentNode</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 模糊查询</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">select</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 监听键盘抬起事件（所有键盘按钮）</span></span></span><br><span class="line"><span class="language-javascript">        oAddInput.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> str = e.<span class="property">target</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 匹配到的文字变红色，准备工作</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(&quot;</span> + str + <span class="string">&quot;)&quot;</span>, <span class="string">&quot;g&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; all.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> one = all[i].<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 换--&gt;红色，用innerText防止用innerHTML将标签也读取出来出错</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> newStr = one.<span class="property">innerText</span>.<span class="title function_">replace</span>(</span></span><br><span class="line"><span class="language-javascript">              reg,</span></span><br><span class="line"><span class="language-javascript">              <span class="string">&quot;&lt;font color=red&gt;$1&lt;/font&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            );</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 也选用innerHTML</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (one.<span class="property">innerText</span>.<span class="title function_">indexOf</span>(str) == -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 匹配不到的掩藏</span></span></span><br><span class="line"><span class="language-javascript">              all[i].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 匹配到的变红</span></span></span><br><span class="line"><span class="language-javascript">              one.<span class="property">innerHTML</span> = newStr;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (str == <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; all.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 输入框空时全部显示</span></span></span><br><span class="line"><span class="language-javascript">              all[i].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 函数解析完就运行</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">select</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写一个图片上传的弹窗组件"><a href="#编写一个图片上传的弹窗组件" class="headerlink" title="编写一个图片上传的弹窗组件"></a>编写一个图片上传的弹窗组件</h3><blockquote><p>请按要求书写一个图片上传的弹窗组件，弹窗的样式要求如下：</p><ul><li>宽： 668px, 高： 608px, 圆角 5px， 边框 1px solid #ccc</li><li>弹窗垂直居中， 左右居中</li><li>标题栏高 ：50px , 右边的 x 不能使用图片，请使用 css3 画出, 标题文字颜色：红色</li><li>列表元素的高：110px ， 宽:110px， 边框 1px solid #ccc</li><li>中间“添加”按钮的图片地址：<a href="https://p1.pstatp.com/large/3ecd0004b6bdeff4c48d">https://p1.pstatp.com/large/3ecd0004b6bdeff4c48d</a></li></ul><p>功能要求</p><ul><li>点击“添加”按钮弹出文件选择框， 选择图片（要求只能选择 png、jpeg、jpg 三种图片）</li><li>选择图片后列表增加一张图片缩略图展示（此时图片未上传到服务器）</li><li>点击上传按钮将当前选择的图片上传到图片服务器（只要求上传当前选择的一张图片，如能实现多个同时上传更佳），上传的图片的接口地址: <a href="https://mp.toutiao.com/profile_v2/">https://mp.toutiao.com/profile_v2/</a></li><li>接口说明：接口只接收并且处理二进制文件。</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作刷题过程中做错的题</title>
      <link href="/post/2ad0c3cb.html"/>
      <url>/post/2ad0c3cb.html</url>
      
        <content type="html"><![CDATA[<h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h3 id="字节（题目：编程题-2）"><a href="#字节（题目：编程题-2）" class="headerlink" title="字节（题目：编程题 2）"></a>字节（题目：编程题 2）</h3><pre><code>有n个房间，现在i号房间里的人需要被重新分配，分配的规则是这样的：先让i号房间里的人全都出来，接下来按照 i+1, i+2, i+3, ... 的顺序依此往这些房间里放一个人，n号房间的的下一个房间是1号房间，直到所有的人都被重新分配。现在告诉你分配完后每个房间的人数以及最后一个人被分配的房间号x，你需要求出分配前每个房间的人数。数据保证一定有解，若有多解输出任意一个解。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  首先分析题目可知，i号房间的人数在分配完成后必然是最少的，先统计出最少的人数min（这说明循环了几轮），  让每个房间减去min以减少循环次数，从最后一个分配的房间循环往前推，记录次数count，在循环过程中第一个是0的房间就是i号房间，其人数为min*n + count；p.s要注意房间人数要用long int型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span> ,k = <span class="number">0</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = a.nextInt();</span><br><span class="line">        k = a.nextInt();</span><br><span class="line">        <span class="type">long</span> [] p = <span class="keyword">new</span> <span class="title class_">long</span> [n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">            p[i] = a.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">min</span> <span class="operator">=</span> p[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i] &lt; min)</span><br><span class="line">                min = p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">            p[i] = p[i] -min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p[k-<span class="number">1</span>] != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p[k - <span class="number">1</span>]--;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span>(k - <span class="number">1</span> == <span class="number">0</span>)</span><br><span class="line">                k = n;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                k--;</span><br><span class="line">        &#125;</span><br><span class="line">        p[k-<span class="number">1</span>] = count + min * n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">            System.out.print(p[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let oldArr = [5, 2, 4, 7, 8, 6]</span></span><br><span class="line"><span class="comment">// let newArr = [6, 2, 0, 8, 9, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> oldArr = [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = [<span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_">dsth</span>(newArr, <span class="number">1</span>, newArr.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dsth</span>(<span class="params">arr, x, n</span>) &#123;</span><br><span class="line">  <span class="comment">// arr代表数组 x代表最后一个元素的位置</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// -1是为了从数组的下标开始</span></span><br><span class="line">  <span class="keyword">let</span> i = x - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">    arr[i] = arr[i] - <span class="number">1</span>;</span><br><span class="line">    sum++;</span><br><span class="line">    i--;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      i = n - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  arr[i] = sum;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第i个房间的人数为&quot;</span>, sum);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原来的数组为&quot;</span>, arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> job do error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job do error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作刷题过程中做错的题</title>
      <link href="/post/5dd7f35d.html"/>
      <url>/post/5dd7f35d.html</url>
      
        <content type="html"><![CDATA[<h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h3 id="字节（题目：头条校招）"><a href="#字节（题目：头条校招）" class="headerlink" title="字节（题目：头条校招）"></a>字节（题目：头条校招）</h3><pre><code>头条的2017校招开始了！为了这次校招，我们组织了一个规模宏大的出题团队，每个出题人都出了一些有趣的题目，而我们现在想把这些题目组合成若干场考试出来，在选题之前，我们对题目进行了盲审，并定出了每道题的难度系统。一场考试包含3道开放性题目，假设他们的难度从小到大分别为a,b,c，我们希望这3道题能满足下列条件：a&lt;=b&lt;=c，b-a&lt;=10，c-b&lt;=10所有出题人一共出了n道开放性题目。现在我们想把这n道题分布到若干场考试中（1场或多场，每道题都必须使用且只能用一次），然而由于上述条件的限制，可能有一些考试没法凑够3道题，因此出题人就需要多出一些适当难度的题目来让每场考试都达到要求，然而我们出题已经出得很累了，你能计算出我们最少还需要再出几道题吗？</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    sort(a, a + n);</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">1</span>]-a[<span class="number">0</span>] &gt; <span class="number">20</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, add = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; n - <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[l+<span class="number">1</span>]-a[l] &lt;= <span class="number">10</span> &amp;&amp; a[l+<span class="number">2</span>] - a[l+<span class="number">1</span>] &lt;= <span class="number">10</span>) l += <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[l+<span class="number">1</span>] - a[l] &gt; <span class="number">20</span>) &#123;add += <span class="number">2</span>; l += <span class="number">1</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[l+<span class="number">1</span>]-a[l] &lt;= <span class="number">20</span> &amp;&amp; a[l+<span class="number">1</span>]-a[l] &gt; <span class="number">10</span>) &#123;add++;l+=<span class="number">2</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[l+<span class="number">1</span>]-a[l] &lt;= <span class="number">10</span> &amp;&amp; a[l+<span class="number">2</span>]-a[l+<span class="number">1</span>] &gt; <span class="number">10</span>) &#123;add++;l+=<span class="number">2</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(l == n - <span class="number">1</span>) add += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(l == n - <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[l+<span class="number">1</span>]-a[l] &gt; <span class="number">20</span>) add += <span class="number">4</span>;</span><br><span class="line">                <span class="keyword">else</span> add += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, add);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节（题目：异或）"><a href="#字节（题目：异或）" class="headerlink" title="字节（题目：异或）"></a>字节（题目：异或）</h3><pre><code>给定整数m以及n各数字A1,A2,..An，将数列A中所有元素两两异或，共能得到n(n-1)/2个结果，请求出这些结果中大于m的有多少个。</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单逻辑，直接使用异或符号，但是会超时，能过80%</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> m, n, i, j, count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> a[n];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ((a[i] ^ a[j]) &gt; m)</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节（题目：字典序）"><a href="#字节（题目：字典序）" class="headerlink" title="字节（题目：字典序）"></a>字节（题目：字典序）</h3><pre><code>给定整数n和m, 将1到n的这n个整数按字典序排列之后, 求其中的第m个数。对于n=11, m=4, 按字典序排列依次为1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 因此第4个数是2.对于n=200, m=25, 按字典序排列依次为因此第25个数是120…</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  题目的本质就是在字典树中先序遍历地查找第m的位置</span></span><br><span class="line"><span class="comment">  所以第一步是弄清楚树的结构 </span></span><br><span class="line"><span class="comment">  树的第一层默认有9个节点 分别是 1 - 9</span></span><br><span class="line"><span class="comment">  同时默认每个节点默认有10个孩子，孩子节点也存在10个孩子</span></span><br><span class="line"><span class="comment">  以此类推</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  所以大概解析思路就是, 通过不断遍历来缩小范围</span></span><br><span class="line"><span class="comment">  例如 我们需要找第5个点, 之前就得遍历4个点</span></span><br><span class="line"><span class="comment">  这就是这里的stillNeedToVisit</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mOfn</span>(<span class="params">n, m</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> stillNeedToVisit = m - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> curStart = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (stillNeedToVisit !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 默认从 1 开始 2 结束</span></span><br><span class="line">    <span class="keyword">let</span> start = curStart;</span><br><span class="line">    <span class="keyword">let</span> end = curStart + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个loop用来遍历以start节点开始往下一直到n所有节点</span></span><br><span class="line">    <span class="keyword">while</span> (start &lt;= n) &#123;</span><br><span class="line">      <span class="comment">// 到字典树底部有可能出现当前叶子值大于n的情况</span></span><br><span class="line">      <span class="comment">// 例如 1-11 的字典树第二层中的12 13 14...</span></span><br><span class="line">      count += <span class="title class_">Math</span>.<span class="title function_">min</span>(n + <span class="number">1</span>, end) - start;</span><br><span class="line">      start *= <span class="number">10</span>;</span><br><span class="line">      end *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count &lt;= stillNeedToVisit) &#123;</span><br><span class="line">      <span class="comment">// 说明刚才遍历的这棵树上的节点达不到m, 我们还得往右走</span></span><br><span class="line">      stillNeedToVisit -= count;</span><br><span class="line">      curStart++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 说明我们要找的第m的点就在这个树上</span></span><br><span class="line">      <span class="comment">// 那我们深入一层继续找</span></span><br><span class="line">      stillNeedToVisit--; <span class="comment">// 排除掉curStart 当前所在的节点</span></span><br><span class="line">      curStart *= <span class="number">10</span>; <span class="comment">// curStart 被移动到了最左孩子</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> curStart;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mOfn</span>(<span class="number">11</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><h3 id="字节（题目：找出函数的最宽尖峰）"><a href="#字节（题目：找出函数的最宽尖峰）" class="headerlink" title="字节（题目：找出函数的最宽尖峰）"></a>字节（题目：找出函数的最宽尖峰）</h3><pre><code>按数组的形式给出函数f(x)的取值，即数组A的A[0]元素为f(0)的取值，数组的取值都为整数，函数在每个点都是严格单调递增或者严格递减（即A[i-1] != A[i] != A[i+1]），要求找出最宽的先上升后下降的区间（这个区间内函数的值必须先上升到一个点然后下降，区间的上升段和下降段长度必须都大于0）。1. 如果找到符合条件的最大区间输出数组对应的左右下标（保证只有一个最大区间）2. 找不到那么输出-1 -1</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入样例</span></span><br><span class="line"><span class="comment">  10</span></span><br><span class="line"><span class="comment">  1 3 1 2 5 4 3 1 9 10</span></span><br><span class="line"><span class="comment">  输出样例</span></span><br><span class="line"><span class="comment">  2 7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 没有输入输出的处理，简单写了函数，x数组就是输入值</span></span><br><span class="line"><span class="comment">// 函数思想：预处理左右各做一遍最长上升子串, 然后维护一个最大和即可</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> n = x.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">let</span> l = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x[i] - x[i - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 维护的是到目前为止，连续递增的次数</span></span><br><span class="line">      l[i] = l[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> r = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="comment">// 右边本来是维护递减，因为从后往前遍历，所以也相当于递增</span></span><br><span class="line">    <span class="keyword">if</span> (x[i] &gt; x[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      r[i] = r[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> mx = <span class="number">0</span>,</span><br><span class="line">    ll = -<span class="number">1</span>,</span><br><span class="line">    rr = -<span class="number">1</span>;</span><br><span class="line">  <span class="comment">// mx就是区间长度</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l[i] &gt; <span class="number">0</span> &amp;&amp; r[i] &gt; <span class="number">0</span> &amp;&amp; l[i] + r[i] &gt; mx) &#123;</span><br><span class="line">      mx = l[i] + r[i];</span><br><span class="line">      ll = i - l[i];</span><br><span class="line">      rr = i + r[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [ll, rr];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">main</span>(x));</span><br></pre></td></tr></table></figure><h3 id="字节（题目：Paragraph）"><a href="#字节（题目：Paragraph）" class="headerlink" title="字节（题目：Paragraph）"></a>字节（题目：Paragraph）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 思路：将N个句子依照空格分开，然后将单词使用set存储（因为题目中说每个单词只能使用一次），然后使用list存储所有的set。然后对于每个查询，先用set存储单词，我们遍历list中的每一个set，使用max存储匹配最多的，maxIndex存储匹配最多的对应的哪个句子的下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        sc.nextLine();</span><br><span class="line">        String[] sentences = <span class="keyword">new</span> <span class="title class_">String</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            sentences[i] = sc.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;HashSet&lt;String&gt;&gt; sentenceList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            String[] temp = sentences[i].toLowerCase().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String s : temp) &#123;</span><br><span class="line">                set.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            sentenceList.add(set);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            String[] temp = sc.nextLine().toLowerCase().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String s : temp) &#123;</span><br><span class="line">                set.add(s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                HashSet&lt;String&gt; tarSentence = sentenceList.get(j);</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tarSentence.contains(s)) &#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (count &gt; max) &#123;</span><br><span class="line">                    max = count;</span><br><span class="line">                    maxIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sentences[maxIndex]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节（题目：绘制括号序列）"><a href="#字节（题目：绘制括号序列）" class="headerlink" title="字节（题目：绘制括号序列）"></a>字节（题目：绘制括号序列）</h3><pre><code>垂直绘制一个中括号的序列 并用中括号的大小表示层次关系绘制 [[[]]][] 这个括号序列如图：+-----+|+---+| |+-+|  | |  | | |+-+||+---+|+-----++-----+|     ||     |+-----+绘图遵守以下原则：各个括号之间没有空格 只有在左右括号在最里层配对时 中间才会有一条空行里层的括号必定小于外层的括号同一层次的括号大小相同（比如上述的样例 最下面的括号和上面的大括号相同大小）</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> n = str.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span>,</span><br><span class="line">    maxL = <span class="number">0</span>,</span><br><span class="line">    level = <span class="keyword">new</span> <span class="title class_">Array</span>(n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str[i] == <span class="string">&quot;[&quot;</span>) &#123;</span><br><span class="line">      l++;</span><br><span class="line">      level[i] = l;</span><br><span class="line">      <span class="keyword">if</span> (l &gt; maxL) maxL = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (str[i] == <span class="string">&quot;]&quot;</span>) &#123;</span><br><span class="line">      level[i] = l;</span><br><span class="line">      l--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 因为同一层级的级别是一样的，即使里面没有子元素，所以反向减，</span></span><br><span class="line">  <span class="comment">// 可以得到准确的级别（包括同一层级的有子元素和没有子元素的）</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) level[i] = maxL - level[i];</span><br><span class="line"></span><br><span class="line">  --maxL;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str[i] == <span class="string">&quot;[&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 对于最外面的</span></span><br><span class="line">      <span class="keyword">if</span> (level[i] == maxL || level[i] == level[i - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; (<span class="number">2</span> * maxL - <span class="number">2</span> * level[i]) / <span class="number">2</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        str += <span class="string">&quot;+&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span> * level[i] + <span class="number">1</span>; ++k) str += <span class="string">&quot;-&quot;</span>;</span><br><span class="line">        str += <span class="string">&quot;+&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; (<span class="number">2</span> * maxL - <span class="number">2</span> * level[i]) / <span class="number">2</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对于除了最外面和最里面那层的中间层</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; (<span class="number">2</span> * maxL - <span class="number">2</span> * level[i] - <span class="number">2</span>) / <span class="number">2</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        str += <span class="string">&quot;|+&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * level[i] + <span class="number">1</span>; ++j) str += <span class="string">&quot;-&quot;</span>;</span><br><span class="line">        str += <span class="string">&quot;+|&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; (<span class="number">2</span> * maxL - <span class="number">2</span> * level[i] - <span class="number">2</span>) / <span class="number">2</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对于最里面的那一个</span></span><br><span class="line">      <span class="keyword">if</span> (level[i] == level[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; (<span class="number">2</span> * maxL - <span class="number">2</span> * level[i]) / <span class="number">2</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        str += <span class="string">&quot;|&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * level[i] + <span class="number">1</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        str += <span class="string">&quot;|&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; (<span class="number">2</span> * maxL - <span class="number">2</span> * level[i]) / <span class="number">2</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * maxL + <span class="number">3</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&quot;]&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 对于最里面那一个</span></span><br><span class="line">      <span class="keyword">if</span> (level[i] == level[i - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; (<span class="number">2</span> * maxL - <span class="number">2</span> * level[i]) / <span class="number">2</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        str += <span class="string">&quot;|&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * level[i] + <span class="number">1</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        str += <span class="string">&quot;|&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; (<span class="number">2</span> * maxL - <span class="number">2</span> * level[i]) / <span class="number">2</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对于最外面那个</span></span><br><span class="line">      <span class="keyword">if</span> (level[i] == maxL || level[i] == level[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; (<span class="number">2</span> * maxL - <span class="number">2</span> * level[i]) / <span class="number">2</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        str += <span class="string">&quot;+&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span> * level[i] + <span class="number">1</span>; ++k) str += <span class="string">&quot;-&quot;</span>;</span><br><span class="line">        str += <span class="string">&quot;+&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; (<span class="number">2</span> * maxL - <span class="number">2</span> * level[i]) / <span class="number">2</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对于除了最里面和最外面的中间层</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; (<span class="number">2</span> * maxL - <span class="number">2</span> * level[i] - <span class="number">2</span>) / <span class="number">2</span>; ++j) str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        str += <span class="string">&quot;|+&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * level[i] + <span class="number">1</span>; ++j) str += <span class="string">&quot;-&quot;</span>;</span><br><span class="line">        str += <span class="string">&quot;+|&quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x = <span class="string">&quot;[[[]]][]&quot;</span>;</span><br><span class="line"><span class="title function_">main</span>(x);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> job do error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job do error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/b159b7d.html"/>
      <url>/post/b159b7d.html</url>
      
        <content type="html"><![CDATA[<h3 id="单帧渲染时间和内存是如何计算"><a href="#单帧渲染时间和内存是如何计算" class="headerlink" title="单帧渲染时间和内存是如何计算"></a>单帧渲染时间和内存是如何计算</h3><blockquote><p>单帧渲染的时间和内存使用量是前端性能评估的重要指标，通常涉及到多个因素，包括硬件性能，软件配置，图像资源大小等等。下面是一些基本的计算方法和考虑因素：</p><ul><li>单帧渲染时间（Time to Render a Frame）：单帧渲染时间指的是浏览器将一帧图像绘制到屏幕上的时间。它可以通过测量两次连续帧渲染之间的时间差来计算。例如，在动画中，如果每秒需要渲染 30 帧，那么每帧的渲染时间就是 1&#x2F;30 秒，大约为 33 毫秒。如果发现单帧渲染时间过长，那么可能会影响用户体验，因为动画或者交互的反应会变得不流畅</li><li>内存使用（Memory Usage）：内存使用量指的是浏览器在渲染单帧图像时占用的内存大小。这包括了浏览器为图像、脚本、样式表、字体等资源分配的内存，也包括为渲染引擎、DOM、CSSOM 等分配的内存。一般来说，如果内存使用量过高，可能会导致浏览器崩溃或者响应变慢</li><li>计算这些指标的方法通常是通过使用开发者工具来获取。在 Chrome 浏览器中，可以通过“性能”工具（Performance Tool）来记录和分析单帧渲染时间和内存使用量。通过在记录过程中暂停并截取快照，可以查看每帧的渲染时间和内存使用情况。</li><li>此外，还可以使用特定的性能测试工具（如 Benchmark.js）或者服务（如 WebPageTest）来有计划地、自动化地测试和比较不同方案或不同配置下的单帧渲染时间和内存使用量</li><li>但需要注意的是，单帧渲染时间和内存使用量并不是孤立存在的指标。它们会受到很多因素的影响，包括硬件性能（如 CPU、GPU、内存大小等）、浏览器实现、网络状况、页面复杂度、图像资源等等。因此，在优化这些指标时，需要综合考虑各种因素，采用适当的优化策略，如减少资源加载时间、优化页面结构和布局、使用合适的图像格式和压缩比例等等</li></ul></blockquote><h3 id="权限模型是怎么设计的，前端如何限制"><a href="#权限模型是怎么设计的，前端如何限制" class="headerlink" title="权限模型是怎么设计的，前端如何限制"></a>权限模型是怎么设计的，前端如何限制</h3><blockquote><p>前端权限模型的设计主要是为了保护用户的数据和功能安全，确保只有经过授权的用户才能访问特定的资源或执行特定的操作。以下是一些常见的前端权限模型设计方法：</p><ul><li>基于角色的权限管理（RBAC）：将权限分配给角色，再将角色分配给用户。根据用户的角色来控制其可以访问的资源和执行的操作</li><li>基于用户的权限管理（UAC）：将权限直接分配给用户。每个用户都有自己可以访问的资源和可以执行的操作</li><li>基于属性的权限管理（ABAC）：根据用户的属性（例如部门、职位、地域等）来控制其可以访问的资源和执行的操作</li></ul></blockquote><blockquote><p>在前端限制方面，可以采用以下方法：</p><ul><li>根据用户角色或权限标识进行限制：在前端页面上根据用户角色或权限标识判断用户可以访问的资源和操作，对于未授权的资源或操作，可以采用隐藏或禁用等方式进行限制</li><li>根据 URL 进行限制：对于一些敏感操作或资源，可以通过对 URL 进行控制，只允许特定用户或特定角色的用户访问</li><li>使用 Token 等认证机制：在用户登录时，后端生成一个 Token，将其存储在 Cookie 或 LocalStorage 中，前端每次请求时都需要携带该 Token，后端校验 Token 是否有效，以判断用户是否经过授权</li><li>前端验证与后端验证相结合：前端验证可以快速过滤掉非法请求，减少后端验证的压力；后端验证可以确保即使前端被绕过，后端仍然可以阻止非法请求的执行</li><li>使用框架或库提供的安全模块：许多前端框架或库都提供了安全模块或插件，可以帮助开发者快速实现权限控制等功能</li></ul></blockquote><pre><code>具体的一个方案：在路由 router.js 里面声明，从后端读取用户-角色-权限信息，通过 meta 标签来标示和记录。比如 meta: &#123; roles: [ &#39;R002&#39;, &#39;R003&#39;] &#125;，表示该页面只有管理员或超级管理员角色才有资格进入。读取 Vuex 的路由表信息，根据 Vuex 中可访问的路由，渲染侧边栏菜单组件（**RBAC**）</code></pre><p><img src="https://p3.itc.cn/q_70/images03/20221221/8f9c47fc82f24712a73737f2335a5023.png"></p><h3 id="jwt-的优缺点"><a href="#jwt-的优缺点" class="headerlink" title="jwt 的优缺点"></a>jwt 的优缺点</h3><blockquote><p>无状态：JWT 自身包含了身份验证所需要的所有信息，因此，我们的服务器不需要存储 Session 信息。这显然增加了系统的可用性和伸缩性，大大减轻了服务端的压力。也正是由于 JWT 的无状态，也导致了它最大的缺点：<strong>不可控！</strong></p><ul><li>比如：我们想要在 JWT 有效期内废弃一个 JWT 或者更改它的权限的话，并不会立即生效，通常需要等到有效期过后才可以。再比如说，当用户 Logout 的话，JWT 也还有效</li></ul><p>有效避免了 CSRF 攻击</p><ul><li>举个简单的例子：小壮登录了某网上银行，他来到了网上银行的帖子区，看到一个帖子下面有一个链接写着“科学理财，年盈利率过万”，小壮好奇的点开了这个链接，结果发现自己的账户少了 10000 元。这是这么回事呢？原来黑客在链接中藏了一个请求，这个请求直接利用小壮的身份给银行发送了一个转账请求，也就是通过你的 Cookie 向银行发出请求<code>&lt;a src=&quot;http://www.mybank.com/Transfer?bankId=11&amp;money=10000&quot;&gt;科学理财，年盈利率过万&lt;/a&gt;</code></li><li>CSRF 攻击需要依赖 Cookie ，Session 认证中 Cookie 中的 SessionID 是由浏览器发送到服务端的，只要发出请求，Cookie 就会被携带。借助这个特性，即使黑客无法获取你的 SessionID，只要让你误点攻击链接，就可以达到攻击效果。另外，并不是必须点击链接才可以达到攻击效果，很多时候，只要你打开了某个页面，CSRF 攻击就会发生<code>&lt;img src=&quot;http://www.mybank.com/Transfer?bankId=11&amp;money=10000&quot; /&gt;</code></li><li>一般情况下我们使用 JWT 的话，在我们登录成功获得 JWT 之后，一般会选择存放在 localStorage 中。前端的每一个请求后续都会附带上这个 JWT，整个过程压根不会涉及到 Cookie。因此，即使你点击了非法链接发送了请求到服务端，这个非法请求也是不会携带 JWT 的，所以这个请求将是非法的。<strong>总结来说就一句话：使用 JWT 进行身份验证不需要依赖 Cookie ，因此可以避免 CSRF 攻击</strong></li><li>不过，这样也会存在 XSS 攻击的风险。为了避免 XSS 攻击，你可以选择将 JWT 存储在标记为 httpOnly 的 Cookie 中。但是，这样又导致了你必须自己提供 CSRF 保护，因此，实际项目中我们通常也不会这么做。<strong>常见的避免 XSS 攻击的方式是过滤掉请求中存在 XSS 攻击风险的可疑字符串</strong></li></ul><p>适合移动端应用</p><ul><li>使用 Session 进行身份认证的话，需要保存一份信息在服务器端，而且这种方式会依赖到 Cookie（需要 Cookie 保存 SessionId），所以不适合移动端。但是，使用 JWT 进行身份认证就不会存在这种问题，因为只要 JWT 可以被客户端存储就能够使用，而且 JWT 还可以跨语言使用</li></ul><p>单点登录友好</p><ul><li>使用 Session 进行身份认证的话，实现单点登录，需要我们把用户的 Session 信息保存在一台电脑上，并且还会遇到常见的 Cookie 跨域的问题。但是，使用 JWT 进行认证的话， JWT 被保存在客户端，不会存在这些问题</li></ul></blockquote><h2 id="JWT-身份认证常见问题及解决办法"><a href="#JWT-身份认证常见问题及解决办法" class="headerlink" title="JWT 身份认证常见问题及解决办法"></a>JWT 身份认证常见问题及解决办法</h2><h3 id="注销登录等场景下-JWT-还有效"><a href="#注销登录等场景下-JWT-还有效" class="headerlink" title="注销登录等场景下 JWT 还有效"></a>注销登录等场景下 JWT 还有效</h3><blockquote><p>与之类似的具体相关场景有：</p><ul><li>退出登录</li><li>修改密码</li><li>服务端修改了某个用户具有的权限或者角色</li><li>用户的帐户被封禁&#x2F;删除</li><li>用户被服务端强制注销</li><li>用户被踢下线</li></ul></blockquote><pre><code>这个问题不存在于 Session 认证方式中，因为在 Session 认证方式中，遇到这种情况的话服务端删除对应的 Session 记录即可。但是，使用 JWT 认证的方式就不好解决了。我们也说过了，JWT 一旦派发出去，如果后端不增加其他逻辑的话，它在失效之前都是有效的</code></pre><blockquote><p>解决办法</p><ul><li>将 JWT 存入内存数据库：将 JWT 存入 DB 中，Redis 内存数据库在这里是不错的选择。如果需要让某个 JWT 失效就直接从 Redis 中删除这个 JWT 即可。但是，这样会导致每次使用 JWT 发送请求都要先从 DB 中查询 JWT 是否存在的步骤，而且违背了 JWT 的无状态原则</li><li>黑名单机制：和上面的方式类似，使用内存数据库比如 Redis 维护一个黑名单，如果想让某个 JWT 失效的话就直接将这个 JWT 加入到 黑名单 即可。然后，每次使用 JWT 进行请求的话都会先判断这个 JWT 是否存在于黑名单中。前两种方案的核心在于将有效的 JWT 存储起来或者将指定的 JWT 拉入黑名单。<strong>虽然这两种方案都违背了 JWT 的无状态原则，但是一般实际项目中我们通常还是会使用这两种方案</strong></li><li>修改密钥 (Secret)：我们为每个用户都创建一个专属密钥，如果我们想让某个 JWT 失效，我们直接修改对应用户的密钥即可。但是，这样相比于前两种引入内存数据库带来了危害更大：如果服务是分布式的，则每次发出新的 JWT 时都必须在多台机器同步密钥。为此，你需要将密钥存储在数据库或其他外部服务中，这样和 Session 认证就没太大区别了。如果用户同时在两个浏览器打开系统，或者在手机端也打开了系统，如果它从一个地方将账号退出，那么其他地方都要重新进行登录，这是不可取的</li><li>保持令牌的有效期限短并经常轮换：很简单的一种方式。但是，会导致用户登录状态不会被持久记录，而且需要用户经常登录。</li></ul></blockquote><p><strong>另外，对于修改密码后 JWT 还有效问题的解决还是比较容易的。说一种我觉得比较好的方式：使用用户的密码的哈希值对 JWT 进行签名。因此，如果密码更改，则任何先前的令牌将自动无法验证</strong></p><h3 id="JWT-的续签问题"><a href="#JWT-的续签问题" class="headerlink" title="JWT 的续签问题"></a>JWT 的续签问题</h3><pre><code>JWT 有效期一般都建议设置的不太长，那么 JWT 过期后如何认证，如何实现动态刷新 JWT，避免用户经常需要重新登录？我们先来看看在 Session 认证中一般的做法：假如 Session 的有效期 30 分钟，如果 30 分钟内用户有访问，就把 Session 有效期延长 30 分钟</code></pre><blockquote><ul><li>类似于 Session 认证中的做法：这种方案满足于大部分场景。假设服务端给的 JWT 有效期设置为 30 分钟，服务端每次进行校验时，如果发现 JWT 的有效期马上快过期了，服务端就重新生成 JWT 给客户端。客户端每次请求都检查新旧 JWT，如果不一致，则更新本地的 JWT。这种做法的问题是仅仅在快过期的时候请求才会更新 JWT ,对客户端不是很友好</li><li>每次请求都返回新 JWT：这种方案的的思路很简单，但是，开销会比较大，尤其是在服务端要存储维护 JWT 的情况下</li><li>JWT 有效期设置到半夜：这种方案是一种折衷的方案，保证了大部分用户白天可以正常登录，适用于对安全性要求不高的系统</li><li>用户登录返回两个 JWT：第一个是 accessJWT ，它的过期时间 JWT 本身的过期时间比如半个小时，另外一个是 refreshJWT 它的过期时间更长一点比如为 1 天。客户端登录后，将 accessJWT 和 refreshJWT 保存在本地，每次访问将 accessJWT 传给服务端。服务端校验 accessJWT 的有效性，如果过期的话，就将 refreshJWT 传给服务端。如果有效，服务端就生成新的 accessJWT 给客户端。否则，客户端就重新登录即可</li></ul></blockquote><blockquote><p>用户登录返回两个 JWT 方案的不足是：</p><ul><li>需要客户端来配合</li><li>用户注销的时候需要同时保证两个 JWT 都无效</li><li>重新请求获取 JWT 的过程中会有短暂 JWT 不可用的情况（可以通过在客户端设置定时器，当 accessJWT 快过期的时候，提前去通过 refreshJWT 获取新的 accessJWT）</li></ul></blockquote><h2 id="有几种前端储存的方式？这些方式的区别是什么？"><a href="#有几种前端储存的方式？这些方式的区别是什么？" class="headerlink" title="有几种前端储存的方式？这些方式的区别是什么？"></a>有几种前端储存的方式？这些方式的区别是什么？</h2><h3 id="前端的存储方式有-5-种"><a href="#前端的存储方式有-5-种" class="headerlink" title="前端的存储方式有 5 种"></a>前端的存储方式有 5 种</h3><blockquote><p>cookies</p><ul><li>是唯一的，在不同的浏览器里面 cookie 的位置是不一样的且不能同时使用</li><li>是独立的，cookie 的存储是以域名形式进行区分的，不同的域名下存储的 cookie 是独立存在</li><li>每个 cookie 存放的内容大小也是有限制的，不同的浏览器存放大小不一样，一般为 4KB</li><li>cookie 也可以设置过期的时间，默认是会话结束的时候</li><li>cookie 的数据会在每一次发送 http 请求的时候，同时发送给服务器</li></ul><p>localstorage</p><ul><li>是永久行存储，除非手动删除</li><li>只要在相同的协议、相同的主机名、相同的端口下，就能读取&#x2F;修改到同一份 localStorage 数据</li><li>localStorage 也是一个本地存储，会话级别的存储</li></ul><p>sessionstorage</p><ul><li><p>他不是一个持久化的本地存储。是一个会话级别的存储，也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一页面，数据仍然存在。</p></li><li><p>关闭窗口后，sessionStorage 即被销毁，或者在新窗口打开同源的另一个页面，sessionStorage 也是没有的。</p></li><li><p>sessionStorage 比 localStorage 更严苛一点，除了协议、主机名、端口外，还要求在同一窗口（也就是浏览器的标签页）下</p></li><li><p>Web SQL</p></li><li><p>IndexedDb</p></li></ul></blockquote><h3 id="存储方式的区别"><a href="#存储方式的区别" class="headerlink" title="存储方式的区别"></a>存储方式的区别</h3><blockquote><ul><li>cookies:在 HTML5 标准前本地储存的主要方式，优点是兼容性好，请求自带 cookie，缺点是大小只有 4k,自动请求头加入 cookie 浪费流量，每个 domain 限制 20 个 cookie,使用起来麻烦需要自行封装</li><li>localStorage:HTML5 加入的以键值对（key-value)为标准的方式，优点是操作方便，永久性储存(除非手动删除)大小为 5M，兼容 IE8+</li><li>sessionStorage:与 localStorage 基本类似，区别是 <strong>sessionStorage 当前页面关闭后会被清理，而且 cookie、localStorage 不同，它不能在所有同源窗口中共享，是会话级别的储存方式</strong></li><li>Web SQL:2010 年被 W3C 废弃的本地数据存储方案，但是主流浏览器(火狐除外)都已经有了相关实现 web sql 类似于 SQLite,是真正意义上的关系型数据库，用 sql 进行数据操作，当我们用 Java Script 时要进行转换，较为繁琐</li><li>IndexedDB:是被证实纳入 HTML5 标准的数据存储方案，它是 NoSQL 数据库，用键值对进行储存，可以进行快速读取，非常适合 web 场景，同时用 Java Script 进行操作会非常方便</li></ul></blockquote><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p><strong>CSS 不会阻塞 DOM 解析，但会阻塞 DOM 渲染</strong></p><pre><code>DOM 和 CSSOM 通常是并行构建的，所以 css 加载不会阻塞 DOM 的解析。然而由于 Render Tree 是依赖 DOM Tree 和 CSSOM Tree 的，所以它必须等到两者都加载完成后，完成相应的构建，才开始渲染</code></pre><p><strong>CSS 会阻塞 JS 执行，但不会阻塞 JS 文件下载</strong></p><pre><code>由于JS是可操纵DOM和CSS样式的。如果在修改这些元素属性同时渲染界面（即JS线程和UI线程同时运行），那么渲染线程前后获得的元素数据就可能不一致。因此为了防止渲染出现不可预期的结果，浏览器就设置了 GUI渲染线程和JS引擎为互斥的关系</code></pre><blockquote><p>有时候 JS 需要等到 CSS 的下载，这是为什么呢</p><ul><li>如果脚本的内容是获取元素的样式，宽高等 CSS 控制的属性，浏览器是需要计算的，也就是依赖于 CSS。浏览器也无法感知到脚本内容到底是什么，为避免样式获取，因此，只能等前面所有的样式下载完成后，再执行 JS。JS 文件下载和 CSS 文件下载是并行的，有时候 CSS 文件很大，所有 JS 需要等待。因此，样式表会在后面的 JS 执行前先加载执行完成，所以，CSS 会阻塞后面 js 的执行。</li></ul></blockquote><h3 id="process-nextTick-是什么时候执行的"><a href="#process-nextTick-是什么时候执行的" class="headerlink" title="process.nextTick 是什么时候执行的"></a>process.nextTick 是什么时候执行的</h3><p>nextTick 所指定的回调会在浏览器更新 DOM 完毕之后再执行</p>]]></content>
      
      
      <categories>
          
          <category> 面经总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/921ccac7.html"/>
      <url>/post/921ccac7.html</url>
      
        <content type="html"><![CDATA[<h3 id="禁止通过-js-获取-cookie"><a href="#禁止通过-js-获取-cookie" class="headerlink" title="禁止通过 js 获取 cookie"></a>禁止通过 js 获取 cookie</h3><blockquote><ul><li>设置 HttpOnly：<code>response.setHeader(&#39;Set-Cookie&#39;, &#39;cookieName=cookieValue; HttpOnly&#39;)</code></li><li>通过 SameSite 标记：将 SameSite 设置为 Strict 可以确保 Cookie 仅在同站点请求时发送，从而减少 CSRF（跨站请求伪造）的风险<code>response.setHeader(&#39;Set-Cookie&#39;, &#39;cookieName=cookieValue; SameSite=Strict&#39;)</code></li><li>使用 Secure 标记：将 Cookie 标记为 Secure 可以确保它只会通过加密的 HTTPS 连接传输，并在非安全的 HTTP 连接中不可访问<code>response.setHeader(&#39;Set-Cookie&#39;, &#39;cookieName=cookieValue; Secure&#39;)</code></li><li>通过 js 获取、修改、重写 cookie，见下文代码</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Request Cookie</span></span><br><span class="line"><span class="keyword">var</span> cookie = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cookie);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定Cookie(将时间修改为过去的，浏览器会认为cookie过期了，就会删除)</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;cookieName=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改指定Cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> =</span><br><span class="line">  <span class="string">&quot;cookieName=modifiedValue;expires=Thu, 01 Jan 2023 00:00:00 UTC;path=/;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写document.cookie方法，返回空字符串</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">__defineGetter__</span>(<span class="string">&quot;cookie&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="实现九宫格布局"><a href="#实现九宫格布局" class="headerlink" title="实现九宫格布局"></a>实现九宫格布局</h2><p>定义通用的 HTML 结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>公用样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex-实现九宫格布局"><a href="#flex-实现九宫格布局" class="headerlink" title="flex 实现九宫格布局"></a>flex 实现九宫格布局</h3><pre><code>flex布局实现九宫格很简单，需要设置一个flex-wrap: wrap;使得盒子在该换行的时候进行换行。由于我们给每个元素设置了下边距和右边距，所以最后同一列（3、6、9）的右边距和最后一行（7、8、9）的下边距撑大了ul，所以这里使用类型选择器来消除他们的影响。最终的实现代码如下</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>n) &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type</span>(n + <span class="number">7</span>) &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="grid-实现九宫格布局"><a href="#grid-实现九宫格布局" class="headerlink" title="grid 实现九宫格布局"></a>grid 实现九宫格布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">30%</span> <span class="number">30%</span> <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">30%</span> <span class="number">30%</span> <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>其中grid-template-columns属性用来设置每一行中单个元素的宽度，grid-template-rows属性用来设置每一列中单个元素的高度，grid-gap属性用来设置盒子之间的间距</code></pre><h3 id="float-实现九宫格布局"><a href="#float-实现九宫格布局" class="headerlink" title="float 实现九宫格布局"></a>float 实现九宫格布局</h3><pre><code>这里需要给每个盒子设置固定的宽高，为了让它自动换行，可以使用float来实现，由于子元素的浮动，形成了BFC，所以父元素ul使用overflow:hidden；来消除浮动带来的影响。最终的实现代码如下</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>n) &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type</span>(n + <span class="number">7</span>) &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="inline-block-实现九宫格布局"><a href="#inline-block-实现九宫格布局" class="headerlink" title="inline-block 实现九宫格布局"></a>inline-block 实现九宫格布局</h3><pre><code>其实inline-block的作用和上面float的作用是一样的，都是用来让元素换行的，实现代码如下</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>n) &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type</span>(n + <span class="number">7</span>) &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>需要注意的是，设置为inline-block的元素之间可能会出现间隙。这里使用letter-spacing属性来消除这种影响，该属性可以用来增加或减少字符间的空白（字符间距）。使用之后就正常了，出现了预期的效果。也可以给ul设置font-size: 0;来消除盒子之间的字符间距</code></pre><h3 id="table-实现九宫格布局"><a href="#table-实现九宫格布局" class="headerlink" title="table 实现九宫格布局"></a>table 实现九宫格布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>table布局也不算太难，首先给父元素设置为table布局，然后使用border-spacing设置单元格之间的间距，最后将li设置为表格行，将div设置为表格单元格，CSS样式如下</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.table</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于上述实现方式，总结一下：</p><ul><li>flex 布局是大家平时用的比较多的布局方式，虽然其还有一些兼容性问题，但是现在 IE 浏览器基本无需考虑了，所以基本不需要考虑兼容问题。不过 flex 布局更适用于移动端项目</li><li>grid 布局实现起来非常方便，但是它的规范并未成熟，主流的浏览器使用较少，不推荐使用在企业项目中</li><li>使用 float 可以使元素脱离文档流，形成 BFC，在重新渲染时不会影响其他的元素。需要注意使用 float 的元素其父元素会塌陷，需要清除浮动</li><li>使用 inline-block 来实现九宫格布局时，定义了 inline-block 的元素之间会出现间隙，需要清除</li><li>table 布局现在感觉用的比较少了，几乎很少在项目中使用 table 布局</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面经总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/fa15dee5.html"/>
      <url>/post/fa15dee5.html</url>
      
        <content type="html"><![CDATA[<h2 id="get、post-的区别"><a href="#get、post-的区别" class="headerlink" title="get、post 的区别"></a>get、post 的区别</h2><blockquote><ul><li>get 请求相对 post 请求来说，更简单、快速，效率高</li><li>get 相对 post 安全性低</li><li>get 有缓存；post 没有（对于 GET 来说 GET 的请求参数一般被加在 URL 中，作为 URL 的组成部分，而 URL 既可以被当作浏览器书签保存，也会被缓存到浏览器历史记录中，所以 GET 请求参数可以被缓存。对于 POST 来说：POST 的请求参数一般放在请求体中，而 HTTP 请求体一般无法被浏览器缓存，所以 POST 请求参数一般来说无法被缓存 ）</li><li>get 的 url 参数可见；post 是不可见的</li><li>get 只接受 ASCII 字符的参数数据类型；post 是没有限制</li><li>请求参数的格式：GET 请求参数只能是请求字符串格式（键值对形式）POST 请求参数可以是 xml 格式（text&#x2F;xml），json 格式（application&#x2F;json），请求字符串格式（application&#x2F;x-www-form-urlencode），文件的二进制数据格式（multipart&#x2F;form-data）</li><li>get 请求参数会保留历史记录；post 中参数是不会保留</li><li>get 会被浏览器主动 catch；post 是不会主动 catch，是需要手动设置</li><li>get 在浏览器回退时无害；post 回退时是会再次提交请求的</li></ul></blockquote><h2 id="vite-相对于-webpack-的优势"><a href="#vite-相对于-webpack-的优势" class="headerlink" title="vite 相对于 webpack 的优势"></a>vite 相对于 webpack 的优势</h2><blockquote><p>快速冷启动</p><ul><li>Vite 只启动一台静态页面的服务器，不会打包全部项目文件代码，服务器根据客户端的请求加载不同的模块处理，实现按需加载。webpack 则是，一开始就将整个项目都打包一遍，再开启 dev-server，如果项目规模庞大，打包时间必然很长</li></ul><p>打包编译速度</p><ul><li>Vite 使用 esbuild 预构建依赖，而 esbuild 是用 Go 编写的，比 JS 编写的打包器快很多</li></ul><p>热模块更新</p><ul><li>对于热更新问题，Vite 采用立即编译当前修改文件的办法，同时结合 vite 的缓存机制（http 缓存 &#x3D;&#x3D;》 Vite 内置缓存），加载更新后的文件内容</li><li>在 Vite 中，它使用了浏览器原生的 ES 模块加载器，当开发者修改代码后，Vite 会即时在浏览器中编译和打包代码，然后将更改的部分直接传递给浏览器，并重新加载这部分代码。Vite 还使用了缓存机制和按需加载的方式，这也是它快速打包的原因之一。当开发者第一次访问项目时，Vite 会对项目进行编译和打包，并缓存生成的文件。这样，当开发者下一次打开项目时，Vite 只需要编译和打包发生更改的部分，而不需要重新编译和打包整个项目。这种按需加载的方式也能够进一步提高 Vite 的打包速度（上述的另一种解释，平易近人点）</li></ul></blockquote><h2 id="vite-的缺点"><a href="#vite-的缺点" class="headerlink" title="vite 的缺点"></a>vite 的缺点</h2><blockquote><ul><li>技术相对较新，可能存在一些不稳定或者兼容性问题</li><li>不支持所有类型的项目：vite 只支持 vue 项目</li><li>生态不如 webpack</li></ul></blockquote><h2 id="webpack-的优点"><a href="#webpack-的优点" class="headerlink" title="webpack 的优点"></a>webpack 的优点</h2><blockquote><ul><li>支持多种类型的项目：Webpack 可以处理各种类型的文件，包括 JavaScript、CSS、HTML、图像等</li><li>成熟的生态系统：Webpack 有一个庞大的社区支持，因此可以轻松地找到各种插件和工具来扩展其功能</li><li>可定制性强：Webpack 的配置非常灵活，开发者可以根据自己的需要进行自定义配置</li><li>处理复杂场景能力强：Webpack 可以处理复杂的依赖关系和编译过程，并可以通过代码分割和动态导入等技术实现优化</li></ul></blockquote><h2 id="webpack-的缺点"><a href="#webpack-的缺点" class="headerlink" title="webpack 的缺点"></a>webpack 的缺点</h2><blockquote><ul><li>缓慢的开发体验：Webpack 冷启动和热更新速度较慢，开发者需要等待较长时间才能获取反馈和进行调试</li><li>配置复杂：Webpack 的配置比较复杂，对开发者的要求较高</li><li>打包后文件体积较大：Webpack 的打包结果往往会比 Rollup 打包器生成的代码包更大</li></ul></blockquote><h2 id="csr-和-ssr-的区别"><a href="#csr-和-ssr-的区别" class="headerlink" title="csr 和 ssr 的区别"></a>csr 和 ssr 的区别</h2><blockquote><ul><li>SSR(Server Side Rendering) ：传统的渲染方式，由服务端把渲染的完整的页面吐给客户端。这样减少了一次客户端到服务端的一次 http 请求，加快相应速度，一般用于首屏的性能优化。</li><li>CSR(Client Side Rendering)：是一种目前流行的渲染方式，它依赖的是运行在客户端的 JS，用户首次发送请求只能得到小部分的指引性 HTML 代码。第二次请求将会请求更多包含 HTML 字符串的 JS 文件</li></ul></blockquote><pre><code>服务器端渲染的优势在于首屏渲染速度块，简单来讲它不需要来回多次往返于客户端和服务端。但是其性能等众多因素会影响用户体验，比如说：网速，在线活跃人数，服务器的物理位置等等。而客户端渲染则和服务端渲染相反，因为多次和服务器的交互导致首屏加载速度慢。但一旦这些请求完成之后，用户和页面之间的交互时用户体验就会好很多。</code></pre><p><strong>简而言之，SSR 强在首屏渲染。而 CSR 强在用户和页面多交互的场景</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node 服务</span></span><br><span class="line"><span class="comment">// 0. 加载依赖</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Vue</span> = <span class="built_in">require</span>(<span class="string">&quot;vue&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&quot;vue-server-renderer&quot;</span>).<span class="title function_">createRenderer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染器渲染page得到html内容</span></span><br><span class="line"><span class="comment">// 1. page</span></span><br><span class="line"><span class="keyword">const</span> page = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;hello, ssr&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 传递接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> html = <span class="keyword">await</span> renderer.<span class="title function_">renderToString</span>(page);</span><br><span class="line">    res.<span class="title function_">send</span>(html);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;server inner error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 启动监听服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server start&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="CSR：客户端渲染"><a href="#CSR：客户端渲染" class="headerlink" title="CSR：客户端渲染"></a>CSR：客户端渲染</h3><blockquote><p>优点：</p><ul><li>前后端分离 开发效率高</li><li>用户体验好 因为 SPA 单页面应用的开发模式</li></ul><p>缺点:</p><ul><li>前端响应速度慢 特别是首屏 可能会导致用户流失</li><li>不利于 SEO 优化 因为客户端渲染页面的代码中只有一个空代码 SEO 爬虫无法获取关键词（那么为什么会出现代码只有空代码的情况呢？）这里说一下，因为我们的 CSR 客户端渲染是一种叫做动态渲染的渲染方式。我们回顾一下流程 解析 html css js 文件过程中，我们页面中的大部分 DOM 元素都是通过 js 插入的，但是 js 文件是需要下载解析的 但是在下载解析之前，就已经开始构建 DOM 树了 所以在一开始会是一个空壳子 需要等待下载好了，js 文件并解析完毕后才会有内容那为什么 SSR 服务器端渲染不会出现这种空壳子的情况呢？因为通过上边我总结的表也能看出来 在第一次发送 url 请求的时候 服务器就开始帮助我们进行对 html 文件的渲染和组装了 当服务器端返回的时候 返回回来的会是一个已经全部渲染完的 html 文件 我们客户都也就是前端只需要负责渲染就行了所以不会出现这种空壳子的情况</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面经总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/cff5b4e9.html"/>
      <url>/post/cff5b4e9.html</url>
      
        <content type="html"><![CDATA[<h2 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h2><blockquote><ul><li>减少 http 请求次数：可以使用雪碧图、图片压缩等方式，减少静态资源的 http 请求次数</li><li>使用浏览器缓存，可以减少请求时间，提高页面加载速度</li><li>使用 CDN 加速，使用 CDN 将静态资源分发到多个节点，减少请求延迟，提高页面加载速度</li><li>延迟加载组件：对于一些比较耗时的组件，可以使用懒加载的方式，等到用户需要的时候在加载，避免在页面加载时一次性请求过多资源导致页面卡顿</li><li>使用 webpack 进行打包和压缩：webpack 可以将多个 js、css 文件打包成一个文件，减少 Http 请求次数；同时还可以进行代码压缩，减少文件大小，提高页面加载速度</li><li>使用 Web Workers：对于一些计算精密型任务，可以使用 Web Workers 将任务分发到多个线程中，提高运算效率，避免页面卡顿</li><li>优化 js 代码：减少页面运行时间，提高页面性能。一些常见的优化操作：避免使用全局变量、减少 DOM 操作、避免不必要的循环、缓存.length 的值：每次.length 计算使用一个变量保存值、尽量使用事件委托：不给每个子节点单独设置事件监听器，而是设置在其父节点上，然后利用冒泡原理设置每个子节点，避免批量绑定事件以此来减少内存消耗和 DOM 操作等</li><li>使用响应式布局：适应不同的屏幕，提高用户体验，避免出现滚动条等不必要的元素</li><li>使用 css3 动画：减少对 js 的依赖，提高动画效果的性能</li><li>使用服务端渲染：将页面的渲染放在服务端完成，减少客户端的渲染时间，提高页面性能</li><li>避免 img、iframe 的 src 属性为空，为空会重新加载当前页面，影响速度和性能</li><li>图片避免使用 DataURL：DataURL 图像没有使用图像压缩算法，文件会变大，并且要解码后在渲染，加载慢耗时长</li><li>减少不必要的 cookie：Cookie 存储在客户端，伴随着 HTTP 请求在浏览器和服务器之间传递，由于 cookie 在访问对应域名下的资源时都会通过 HTTP 请求发送到服务器，从而会影响加载速度，所以尽量减少不必要的 Cookie</li></ul></blockquote><h2 id="js-渲染的过程"><a href="#js-渲染的过程" class="headerlink" title="js 渲染的过程"></a>js 渲染的过程</h2><pre><code>当浏览器的网络线程收到html文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开始渲染流程。整个渲染流程分为多个阶段，分别是：html解析、样式计算、布局、分层、绘制、分块、光栅化、画，每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入</code></pre><blockquote><p>第一步解析 html</p><ul><li>解析过程中遇到 css 解析 css，遇到 js 执行 js。为了提高效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 html 中的外部 css 和外部的 js 文件。如果主线程解析到 link 位置，此时外部的 css 文件还没有下载好，主线程不会等待，继续解析后面的 html。这是因为下载和解析 css 的工作是在预解析线程中进行的，这就是 css 不会阻塞 html 解析额根本原因。如果主线程解析到 script 位置，会停止解析 html，转而等待 js 文件下载好，并将全局代码解析执行完成后，才能继续解析 html。这是因为 js 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停，这就是 js 会阻塞 html 解析的根本原因。这一步解析完成会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均包含在 CSSOM 树中</li></ul><p>样式计算</p><ul><li>主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。这一过程中，很多预设值会变成绝对值，比如 red 会变成 rgb(255, 0, 0)，相对单位会变成绝对单位，比如 em 会变成 px。这一步完成后会得到一棵带有样式的 DOM 树</li></ul><p>布局</p><ul><li>布局阶段会遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。大部分时候，DOM 树和布局树并非一一对应。比如 display: none 的时候节点没有任何几何信息，因此不会生成到布局树，又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们会拥有集合信息，所以会生成到布局树中。</li></ul><p>分层</p><ul><li>主线程会使用一套复杂的策略对整个布局树中进行分层。分层的好处在于，将来某一层变化后，仅会对该层进行后续处理，从而提升效率。滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过 will-change 属性更大程度的影响分层结果</li></ul><p>绘制</p><ul><li>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程来完成。合成线程首先对每个图层进行分块，将其划分为更多的小区域。它会从线程池中取多个线程完成分块的工作，分块完成后，进入光栅化阶段</li></ul><p>光栅化</p><ul><li>合成线程会将块信息交给 GPU 进程，以极高的纛完成光栅化。GPU 进程会开启多个线程完成光栅化，并且有限处理靠近视口区域的块。光栅化的结果，就是一块一块的位图</li></ul><p>画</p><ul><li>合成线程会拿到每一层、每个块的位图后，生成一个个[指引（quad）]信息。指引信息会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。变形发生在合成线程，和渲染主线程无关，这就是 transform 效率高的本质原因。合成线程会把 quad 提交给 GPU 进程，有 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像</li></ul></blockquote><h2 id="回流（reflow）"><a href="#回流（reflow）" class="headerlink" title="回流（reflow）"></a>回流（reflow）</h2><pre><code>reflow的本质就是重新计算layout树，当进行了会影响布局树的操作后，需要重新计算布局树，引发layout。为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当JS代码全部完成后，再进行统一计算。所以搞懂属性造成的reflow是**异步**完成的。所以js获取布局属性时，可能无法获取到最新的布局信息，浏览器权衡之下，最终决定获取属性立即reflow**回流是指在渲染页面时，由于DOM结构或尺寸的改变，需要重新计算元素的几何属性和页面布局**</code></pre><blockquote><p>产生 reflow 的因素</p><ul><li>添加、删除、修改 DOM 元素（例如改变文本内容）</li><li>改变元素的位置、尺寸、边距、边框等属性</li><li>浏览器窗口大小改变</li><li>激活 CSS 伪类（如:hover）</li><li>添加或删除样式表</li></ul></blockquote><h2 id="repaint（重绘）"><a href="#repaint（重绘）" class="headerlink" title="repaint（重绘）"></a>repaint（重绘）</h2><pre><code>repaint 的本质就是重新根据分层信息计算了绘制指令。当改动了可见样式后，就需要重新计算，会引发 repaint。由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint</code></pre><h2 id="为什么-transform-效率高"><a href="#为什么-transform-效率高" class="headerlink" title="为什么 transform 效率高"></a>为什么 transform 效率高</h2><pre><code>因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段。由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化**重绘是指在元素的外观改变但几何属性没有改变时，浏览器会重新绘制元素**</code></pre><blockquote><p>导致重绘的操作包括：</p><ul><li>修改元素的颜色、背景、边框等属性，但不影响其尺寸和位置</li><li>激活 CSS 伪类（如:hover）</li></ul></blockquote><h2 id="优化重绘和重排的策略"><a href="#优化重绘和重排的策略" class="headerlink" title="优化重绘和重排的策略"></a>优化重绘和重排的策略</h2><blockquote><p>为了提高页面性能，可以采取以下优化策略：</p><ul><li>将样式更改集中在一个类或样式表中，以减少频繁的样式更改</li><li>使用 CSS 动画代替 JavaScript 动画，因为前者更优化，能减少回流和重绘</li><li>使用文档碎片（Document Fragments）在多个 DOM 操作之间进行缓冲，减少回流次数</li><li>使用 transform 属性来进行一些动画和位移，因为它不会触发回流</li><li>避免使用 table 布局，table 布局很难避免回流的发生</li></ul></blockquote><h3 id="常见题"><a href="#常见题" class="headerlink" title="常见题"></a>常见题</h3><blockquote><ul><li>静态定位到绝对定位会引起回流吗？（会！静态定位是默认的定位方式，也就是无定位，在文档流中占有位置，切换到绝对定位时会脱离文档流，所以会引起回流）</li><li>移动绝对定位的元素不会引起回流</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面经总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/4e2df1a8.html"/>
      <url>/post/4e2df1a8.html</url>
      
        <content type="html"><![CDATA[<h2 id="前端出现白屏的原因"><a href="#前端出现白屏的原因" class="headerlink" title="前端出现白屏的原因"></a>前端出现白屏的原因</h2><h3 id="js-问题"><a href="#js-问题" class="headerlink" title="js 问题"></a>js 问题</h3><pre><code>常用框架Vue React Angular都是依靠JS进行驱动， 并且单页面的应用html也是依靠JS生成，在渲染页面的时候需要加载很大的JS文件( app.js 和vendor.js )，在JS解析加载完成之前无法展示页面，从而导致了白屏（当网速不佳的时候也会产生一定程度的白屏）</code></pre><h3 id="浏览器兼容问题"><a href="#浏览器兼容问题" class="headerlink" title="浏览器兼容问题"></a>浏览器兼容问题</h3><pre><code>vue代码在ie中显示白屏</code></pre><h3 id="URL-网址无效或者含有中文字符"><a href="#URL-网址无效或者含有中文字符" class="headerlink" title="URL 网址无效或者含有中文字符"></a>URL 网址无效或者含有中文字符</h3><h3 id="缓存导致"><a href="#缓存导致" class="headerlink" title="缓存导致"></a>缓存导致</h3><pre><code>vue项目打包后，在非首次线上替换dist文件时，某些手机/浏览器在之后首次打开页面，可能出现白屏情况原因：在用户端会默认缓存index.html入口文件，而由于vue打包生成的css/js都是哈希值，跟上次的文件名都不同，因此会出现找不到css/js的情况，导致白屏的产生。在服务端更新包之后，由于旧的文件被删除，而index.html所链接的路径依然是旧文件路径，因此会找不到文件，从而白屏</code></pre><h3 id="页面报错"><a href="#页面报错" class="headerlink" title="页面报错"></a>页面报错</h3><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><pre><code>思路：较小打包后的体积（sourceMap关掉、CDN引入、路由懒加载、组件按需加载）</code></pre><h3 id="CDN-资源优化"><a href="#CDN-资源优化" class="headerlink" title="CDN 资源优化"></a>CDN 资源优化</h3><blockquote><ul><li>将依赖的第三方 npm 包全部改为通过 CDN 链接获取，在 html 中插入相应链接</li><li>在 vue.config.js 中配置 externals 属性</li><li>卸载相关依赖的 npm 包：npm uninstall xxx</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ···</span><br><span class="line">    <span class="attr">externals</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;vuex&#x27;</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;axios&#x27;</span>:<span class="string">&#x27;axios&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;element-ui&#x27;</span>: <span class="string">&#x27;ElementUI&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-gzip-压缩"><a href="#使用-gzip-压缩" class="headerlink" title="使用 gzip 压缩"></a>使用 gzip 压缩</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前端处理</span></span><br><span class="line"><span class="comment">// npm i compression-webpack-plugin -S</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CompressionPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;compression-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">CompressionPlugin</span>(&#123;</span><br><span class="line"><span class="comment">// 匹配规格</span></span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.js$|\.html$|\.css$|\.png$/</span>,</span><br><span class="line"><span class="comment">// 文件超过多大进行压缩 单位Byte</span></span><br><span class="line"><span class="attr">threshold</span>: <span class="number">10240</span>,</span><br><span class="line"><span class="comment">// 是否删除源文件（建议不删除）</span></span><br><span class="line"><span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">],</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还需要在 nginx开启gzip压缩</span></span><br><span class="line">gzip on;</span><br><span class="line"><span class="comment">// 当存在.gzip格式的js文件时，优先使用静态文件</span></span><br><span class="line">gzip_static on;</span><br><span class="line"><span class="comment">// 开启gzip压缩的最小大小</span></span><br><span class="line">gzip_min_length  10k;</span><br><span class="line">gzip_buffers     <span class="number">4</span> 16k;</span><br><span class="line">gzip_http_version <span class="number">1.1</span>;</span><br><span class="line">gzip_comp_level <span class="number">6</span>;</span><br><span class="line">gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;</span><br><span class="line">gzip_vary on;</span><br><span class="line">gzip_proxied   expired no-cache no-store private auth;</span><br><span class="line">gzip_disable   <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>当 nginx 开启 gzip 压缩的时候，无论前端打包出来的文件是否压缩，网站加载到的 js 文件都是经过 nginx 实时压缩过的</strong></p><pre><code>当gzip_static off的时候，前端上传的js压缩文件（gzip格式那些）并没有什么用。当gzip_static on时，优先加载前端打包的gzip压缩文件，如果没有找到该文件，那么nginx将实时压缩之后传给浏览器</code></pre><h3 id="SSR-服务端渲染"><a href="#SSR-服务端渲染" class="headerlink" title="SSR 服务端渲染"></a>SSR 服务端渲染</h3><pre><code>首页加loading或骨架屏（elementU有骨架屏组件：Skeleton），所谓的骨架屏，就是在页面内容未加载完成的时候，先使用一些图形进行占位，待内容加载完成之后再把它替换掉。在这个过程中用户会感知到内容正在逐渐加载并即将呈现，降低了“白屏”的不良体验</code></pre>]]></content>
      
      
      <categories>
          
          <category> job Prepare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job prepare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/7c12abeb.html"/>
      <url>/post/7c12abeb.html</url>
      
        <content type="html"><![CDATA[<h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><h3 id="什么是-token"><a href="#什么是-token" class="headerlink" title="什么是 token"></a>什么是 token</h3><pre><code>Token，又称令牌，用于身份验证，用户登录后，后端会生成一个token字符串，然后将其返回给前端，前端可以将其保存在cookie或者localStorage中，以便于需要访问后端API时，将token发送给后端进行身份验证，验证有效性后，根据用户的身份，返回相应的数据或者执行相应的操作</code></pre><h3 id="token-的实现原理"><a href="#token-的实现原理" class="headerlink" title="token 的实现原理"></a>token 的实现原理</h3><blockquote><p>实现原理：主要包括 token 的生成和 token 的验证<br>token 生成</p><ul><li>后端接收到用户的登录请求后，验证身份和密码等信息</li><li>验证成功后，后端会生成一个 Token 字符串，其中包含一些用户信息，例如用户 ID、角色、过期时间等</li><li>将 token 返回给前端，前端将其保存在 cookie 或者 localStorage 中</li><li><strong>在实际生成 Token 中，我们可以使用多种方式，例如：JWT（JSON Web Token）和 Session + Cookie 等</strong></li></ul></blockquote><pre><code>JWT是一种开放标准（RFC 7519），用于在网络传输中传递信息。它是基于JSON格式的，包含三部分：Header（头部）、Payload（负载）和Signature（签名）。其中，Header和Payload都是JSON格式的数据，Signature是Header和Payload的加密字符串，用于验证Token的有效性</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JWT的生成过程如下：</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> payload = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">  <span class="attr">role</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&quot;mySecretKey&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(payload, secretKey, &#123; <span class="attr">expiresIn</span>: <span class="string">&quot;1h&quot;</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(token);</span><br></pre></td></tr></table></figure><pre><code>Session + Cookie是一种传统的Token实现方式，它的基本原理是：当用户登录后，后端会生成一个Session ID，并将其保存在后端的内存或数据库中，然后将该Session ID写入到客户端的Cookie中。当客户端发送请求时，后端会在自己的内存或数据库中查找该Session ID，以判断用户身份和权限等信息</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Session + Cookie的生成过程如下：</span></span><br><span class="line"><span class="comment">// express-session是一个用于处理Session的中间件</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> uuid = <span class="built_in">require</span>(<span class="string">&quot;uuid&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sessionOptions = &#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&quot;mySecretKey&quot;</span>,</span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">genid</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> uuid.<span class="title function_">v4</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">cookie</span>: &#123;</span><br><span class="line">    <span class="comment">// 1小时过期</span></span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">3600000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(sessionOptions));</span><br></pre></td></tr></table></figure><blockquote><p>token 验证</p><ul><li>前端在访问后端 API 时，需要将保存在客户端的 Token 字符串发送给后端</li><li>后端接收到 Token 后，首先需要验证 Token 的有效性。验证的方式通常包括检查&gt; Token 格式是否正确、Token 是否过期、Token 是否被篡改等</li><li>验证成功后，后端会根据 Token 中所包含的用户信息，进行相应的数据查询或操作，并将结果返回给前端</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JWT验证的过程如下：</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> token =</span><br><span class="line">  <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMjM0NTYiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2MjI0MTMzNTksImV4cCI6MTYyMjQxNjE1OX0.5v7t4mp9Yb9dE5nxQ8ESQjTT8Xh6lCPZnGKVP4fN4tM&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&quot;mySecretKey&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> decoded = jwt.<span class="title function_">verify</span>(token, secretKey);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(decoded);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Session + Cookie验证的过程如下：</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/user&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span> || !req.<span class="property">session</span>.<span class="property">userId</span>) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&quot;Unauthorized&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">getUserById</span>(req.<span class="property">session</span>.<span class="property">userId</span>);</span><br><span class="line">  <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&quot;Unauthorized&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">json</span>(user);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="token-安全性"><a href="#token-安全性" class="headerlink" title="token 安全性"></a>token 安全性</h3><blockquote><p>虽然 Token 技术在身份验证方面有很多优势，但在使用过程中也存在一些安全风险，需要我们在实际开发中注意以下几点：</p><ul><li>Token 过期时间的设置应该合理，以避免 Token 被长期滥用</li><li>Token 应该使用 HTTPS 协议进行传输，以保证传输过程中的安全性</li><li>Token 应该使用加密方式进行存储，以避免被篡改或盗用</li></ul></blockquote><h3 id="前端如何使用-token"><a href="#前端如何使用-token" class="headerlink" title="前端如何使用 token"></a>前端如何使用 token</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：每次请求的时候手动添加：</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="title class_">Authorization</span>: <span class="string">&quot;Bearer token&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：使用请求拦截器统一添加(常用)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在axios中设置统一的 token 请求模块（localStorage存储）</span></span><br><span class="line"><span class="comment">// utils中request.js中添加拦截器</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> axios</span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="attr">http</span>:<span class="comment">//ttapiresearchitcast.cn/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  config.<span class="property">headers</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    router.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插件js-cookie</span></span><br><span class="line"><span class="comment">//utils下创建auth.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cookies</span> <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"><span class="comment">// 方法封装设置token</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> <span class="title function_">setCookie</span> = (<span class="params">token</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;hgtoken&#x27;</span>, token)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取token</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> <span class="title function_">getCookie</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;hgtoken&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 移除token</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> <span class="title function_">removeCookie</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;hgtoken&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//utils下的request.js中添加拦截器</span></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line"> config.<span class="property">headers</span>[<span class="string">&#x27;hg_token&#x27;</span>] = <span class="title function_">getCookie</span>(<span class="string">&#x27;hgtoken&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    router.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="token-失效的主动介入与被动介入"><a href="#token-失效的主动介入与被动介入" class="headerlink" title="token 失效的主动介入与被动介入"></a>token 失效的主动介入与被动介入</h3><blockquote><ul><li>被动介入：后端返回一个状态码 -&gt; 根据状态码 -&gt; 登出</li><li>主动介入：登录成功 -&gt; 记录时间戳 -&gt; 用 token 时先检查时间戳 -&gt; 如果超过时间 -&gt; 登出</li></ul></blockquote><h3 id="登录模块的实现思路"><a href="#登录模块的实现思路" class="headerlink" title="登录模块的实现思路"></a>登录模块的实现思路</h3><pre><code>登录模块实现思路： Token作为用户登陆的唯一标识，存储在LocalStorage中，通过Vuex统一管理，并实现持久化。 在axios中设置请求拦截器,在每次请求的请求头中,注入token信息,作为登录的标识。配合Vue-Router中的beforEach前置导航守卫函数,实现对token信息的统一监测和拦截登录</code></pre><h3 id="主页-token-访问权限拦截-实现思路"><a href="#主页-token-访问权限拦截-实现思路" class="headerlink" title="主页 token 访问权限拦截-实现思路"></a>主页 token 访问权限拦截-实现思路</h3><pre><code>初始化Vuex中的mutations信息，更新用户登录后的信息收集，封装action获取用户资料。封装action，实现用户退出登录，调用commit方法，清除Vuex中保存的token信息。根据后端检测token返回的状态码，设置拦截器，对失效token信息实现拦截登录，并提示用户token失败</code></pre><h3 id="优势-相较于-cookie"><a href="#优势-相较于-cookie" class="headerlink" title="优势 (相较于 cookie)"></a>优势 (相较于 cookie)</h3><blockquote><ul><li>支持跨域访问: cookie 是不允许跨域访问的, token 支持</li><li>无状态: token 不需要服务器保存任何相关信息。token 自身就携带所有值</li><li>去耦: 不需要绑定特定的身份验证方案</li><li>更适合移动应用: cookie 不支持手机端访问</li><li>基于标准化:JWT</li></ul></blockquote><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><blockquote><ul><li>占带宽: 比 session_id 大, 消耗更多的流量</li><li>无法在服务端注销: 很难解决劫持问题</li><li>性能问题: JWT 标准消耗更多的 CPU 资源</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> job Prepare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job prepare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/b159b7d.html"/>
      <url>/post/b159b7d.html</url>
      
        <content type="html"><![CDATA[<h3 id="js-基本数据类型"><a href="#js-基本数据类型" class="headerlink" title="js 基本数据类型"></a>js 基本数据类型</h3><pre><code>String、Number、Boolean、Undefined、Null、Object、Symbol（ES6新增）</code></pre><blockquote><ul><li>isNaN(Not a Number)：用于判断参数是否是非数字值的内置函数</li></ul></blockquote><h3 id="url-解析过程"><a href="#url-解析过程" class="headerlink" title="url 解析过程"></a>url 解析过程</h3><blockquote><ul><li>浏览器输入 url 地址，首先要在客户端上进行 url 解析</li><li>浏览器会先查看自身的缓存，如果浏览器缓存中有对应的解析记录，直接返回结果如果浏览器没有缓存，电脑会查看本地操作系统的中的缓存，如果有记录，直接返回结果（host 文件）如果本地没有缓存域名的 ip 地址，就需要通过迭代或者递归的方式向根域名服务器、顶级域名服务器、权威域名服务器发起查询请求，直接返回一个 IP 地址给浏览器</li><li>然后根据 IP 地址建立 TCP 连接（三次握手）</li><li>客户端发送 HTTP 请求，服务器返回报文，关闭 TCP 连接（四次挥手）</li><li>浏览器拿到相应内容后，进行解析：解析 html、css 分别建立 DOM Tree 和 CSSOM Tree，然后合并成 Render Tree，然后布局 Render Tree，绘制 Render Tree，绘制页面像素信息。将各层的信息发送给 GPU，GPU 将各层合成，显示在屏幕上</li></ul></blockquote><h2 id="TCP-三次握手与四次挥手"><a href="#TCP-三次握手与四次挥手" class="headerlink" title="TCP 三次握手与四次挥手"></a>TCP 三次握手与四次挥手</h2><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTM0NDI1MC8yMDE5MDQvMTM0NDI1MC0yMDE5MDQwMjExNDEzNzgyOC0yMTE5NTQ4NzU4LnBuZw?x-oss-process=image/format,png"></p><table><thead><tr><th>三次握手</th><th>客户端</th><th>发送信息</th><th>服务端</th></tr></thead><tbody><tr><td>第一次握手</td><td>1、客户端即不知道自己发送与接收的能力是否正常 2、客户端也不知道服务器发送与接收的能力是否正常</td><td>SYN&#x3D;1，seq&#x3D;x</td><td>服务端收到客户端发送来的消息 1、服务器知道客户端发送正常，不知道客户端接收能力是否正常，2、服务器知道自己接收能力正常，不知道自己发送能力是否正常</td></tr><tr><td>第二次握手</td><td>客户端收到服务端发来的消息 1、客户端知道自己发送、接收能力正常 2、客户端知道服务端发送、接收正常 <strong>客户端全部知道</strong></td><td>ACK&#x3D;1，ack&#x3D;x+1，SYN&#x3D;1，seq&#x3D;y</td><td>服务器发送消息给客户端</td></tr><tr><td>第三次握手</td><td>客户端发送给服务器</td><td>seq&#x3D;x+1，ACK&#x3D;1，ack&#x3D;y+1</td><td>服务器收到客户端发来的消息 1、服务器知道客户端发送，接收正常 2、服务器知道自己发送、接收正常 <strong>服务器全部知道</strong></td></tr></tbody></table><pre><code>从上述分析可知，握手两次达不到双方都知道自己、对方的接收、发送能力都正常的结论。由此我们知道三次握手的目的是让客户端、服务端都知道自己和对方的发送、接收能力是正常的，所以三次握手不能少，多了浪费网络资源</code></pre><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTM0NDI1MC8yMDE5MDQvMTM0NDI1MC0yMDE5MDQwMjExNDA1OTM5MC03MTY0MjE4MTgucG5n?x-oss-process=image/format,png"></p><table><thead><tr><th>四次挥手</th><th>客户端</th><th>发送信息</th><th>服务端</th></tr></thead><tbody><tr><td>第一次挥手</td><td>客户端发送请求 FIN-WAIT-1 状态 1</td><td>FIN&#x3D;1，seq&#x3D;u</td><td></td></tr><tr><td>第二次挥手</td><td></td><td>ACK&#x3D;1，ack&#x3D;u+1，seq&#x3D;v</td><td>服务端收到请求 服务端发送请求 CLOSE-WAIt 状态 2</td></tr><tr><td>第三次挥手</td><td>客户端收到服务器确认结果后进入 FIN-WAIT-2 客户端发送 状态 3</td><td>FIN&#x3D;1，ACK&#x3D;1，ack&#x3D;u+1，seq&#x3D;w</td><td>服务端发送消息 LAST-ACK 状态 4</td></tr><tr><td>第四次挥手</td><td>客户端收到回复 客户端发送 TIME-WAIT 状态 客户端经过两个最长报文寿命后，客户端 CLOSE5</td><td>ACK&#x3D;1，ack&#x3D;w+1， seq&#x3D;u+1</td><td>服务端确认 服务端立刻进入 CLOSE 状态 6</td></tr></tbody></table><pre><code>**四次挥手需要考虑服务端是否有正在发送的数据** 所以客户端发起结束请求，服务端不能立刻响应结束。简单理解：客户端发起结束请求 -&gt; 服务端收到请求，同时告诉客户端自己收到请求 -&gt; 服务端确认没有正在发送的数据，告诉客户端 -&gt; 客户端收到服务端的确认后结束，服务端结束</code></pre><p><strong>正是因为 TCP 协议有三次握手与四次挥手，所以 TCP 是安全连接，区别于 UDP 协议</strong></p><h3 id="HTTP-与-TCP-的关系"><a href="#HTTP-与-TCP-的关系" class="headerlink" title="HTTP 与 TCP 的关系"></a>HTTP 与 TCP 的关系</h3><blockquote><ul><li>TCP 是传输层协议，而 HTTP 是应用层协议</li><li>HTTP 基于 TCP 连接基础上，所以三次握手有人说是 HTTP 的，有人说是 TCP 的，准确说是 TCP</li><li>TCP 就是单纯建立连接，不涉及任何需要请求的实际数据，简单的传输</li><li>HTTP 是用来收发数据的</li></ul></blockquote><h2 id="cookie、session、localStorage"><a href="#cookie、session、localStorage" class="headerlink" title="cookie、session、localStorage"></a>cookie、session、localStorage</h2><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><blockquote><p>由于<strong>HTTP 协议是无状态的</strong>，所以服务器不知道用户上一次做了什么，影响交互式 web 的实现，所以出现了 cookie，cookie 的作用就是在客户端存储用户访问网站的一些信息，典型应用：</p><ul><li>记住密码，下次自动登录</li><li>购物车功能</li><li>记录用户浏览数据，进行商品（广告）推荐</li><li>个性化设置（主题等）</li></ul><p>cookie 的缺点</p><ul><li>cookie 会被附加在每个 HTTP 请求中，所以无形中增加了流量</li><li>由于在 HTTP 请求中中的 cookie 是明文传递的，所以安全性成问题（除非使用 HTTPS）</li><li>cookie 的大小只有 4kb 左右，对于复杂存储需求来说不够用</li></ul></blockquote><blockquote><ul><li>会话 cookie：若不设置过期时间，cookie 的生命周期为浏览器会话期间，关闭浏览器窗口，cookie 就会消失</li><li>持久 cookie：设置了过期时间，cookie 保存到硬盘上，关闭在打开浏览器，这些 cookie 仍然有效直到超过设定的过期时间，<strong>可以在浏览器的不同进程之间共享</strong></li><li>cookie 具有不可跨域名性：就是说浏览器访问百度不会带上谷歌的 cookie</li></ul></blockquote><pre><code>如果用户禁用 cookie，则要使用 URL 重写，可以通过 response.encodeURL(url)进行实现，将 sessionID 拼接到访问地址后</code></pre><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><blockquote><ul><li>session 是一种服务器机制，用来存储特定用户会话的信息</li><li>第一次访问服务器的时候，会创建一个 session ID，之后的访问服务器首先检查用户发来额请求里是否包含了一个 session ID，如果包含，就在服务器的内存中查找出来，此 session ID 唯一、不重复的字符串，响应后返回到客户端保存，存储在 cookie 中</li></ul><p>典型的应用</p><ul><li>判断用户是否登录</li><li>购物车功能</li><li><strong>将某些数据放入 session 中，供同一用户的不同页面使用</strong></li><li><strong>防止用户非法登录</strong></li></ul></blockquote><pre><code>cookie与session（会话跟踪技术）、H4的存储机制；localStorage、sessionStorage是Web Storage，H5的本地存储机制。</code></pre><blockquote><p>session 的缺点：</p><ul><li>session 保存的东西越多，越占用服务器内存，对于在线人数多的网站，服务器内存压力大</li><li>依赖于 cookie，如果禁用 cookie，则要使用 URL 重写，不安全</li><li>创建 session 变量有很大的随意性，可随时调用，不需要开发者做精确的处理，所以过度使用 session 变量将会导致代码不可读而且不好维护</li></ul></blockquote><h3 id="cookie-与-session-的对比"><a href="#cookie-与-session-的对比" class="headerlink" title="cookie 与 session 的对比"></a>cookie 与 session 的对比</h3><blockquote><ul><li>cookie 只能保存字符串类型，以文本的方式；session 通过类似 Hashtable 的数据结构来保存，能支持任何类型的对象（session 中可以包含多个对象）</li><li>cookie 保存的大小只有 4kb，session 没有大小限制</li><li>cookie 存在的攻击：cookie 欺骗、cookie 截获；session 的安全性大于 cookie</li><li>cookie<strong>支持跨域</strong>，将 domain 属性设置为“.bdf.com”，则以“.bdf.com”为后缀的一切域名能够访问 cookie，session 不支持跨域名访问，仅在所在域名内有效</li><li>session 不区分路径，在访问同一个网站期间，所有的 session 在任何一个地方都可以访问到，而 cookie 中如果设置了路径参数，那么同一个网站中不同路径下的 cookie 互相是访问不到的</li></ul></blockquote><blockquote><p>session 安全性高的原因：</p><ul><li>session ID 存储在 cookie 中，若要攻破 session，首先要攻破 cookie</li><li>session ID 是要有人登录，或者启动 session_start 才会有，所以攻破 cookie 也不一定得到 session ID</li><li>第二次启动 session_start 后，前一次的 session ID 就失效了，session 过期后，session ID 也随之失效</li><li>session ID 是加密的</li></ul></blockquote><h3 id="localStorage-和-sessionStorage-的对比"><a href="#localStorage-和-sessionStorage-的对比" class="headerlink" title="localStorage 和 sessionStorage 的对比"></a>localStorage 和 sessionStorage 的对比</h3><blockquote><p>生命周期</p><ul><li>localStorage：生命周期是永久的，关闭页面或者浏览器之后 localStorage 中的数据也不会消失，除非主动删除数据，否则数据永远也不会消失</li><li>sessionStorage：生命周期仅在当前会话有效，其在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入另一个页面，数据依然存在。但是关闭了浏览器窗口后就会被销毁，<strong>同时独立的打开同一个窗口同一个页面，sessionStorage 也是不一样的</strong></li></ul><p>作用域</p><ul><li><strong>sessionStorage 在不同的浏览器窗口中不共享，不同页面或标签页间无法共享 sessionStorage 的信息</strong></li><li><strong>localStorage 在所有同源窗口中都是共享的，相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口）</strong></li></ul><p>localStorage 和 sessionStorage 的存储数据大小一般都是 5MB<br>使用方式：window.localStorage 和 window.sessionStorage<br>存储类型：都只能存储字符串类型，对于复杂的对象可以使用 ECMAScript 提供的 JSON 对象的 stringify 和 parse 来处理<br>localStorage 常用于长期登录，适合长期保存在本地的数据；sessionStorage 敏感性账号一次性登录</p></blockquote><h3 id="对比-cookie，Web-Storage-的优点"><a href="#对比-cookie，Web-Storage-的优点" class="headerlink" title="对比 cookie，Web Storage 的优点"></a>对比 cookie，Web Storage 的优点</h3><blockquote><ul><li>存储空间大：cookie 4kb，Web Storage 5MB</li><li>节省网络流量：Web Storage 不会传送到服务器，存储在本地的数据可以直接获取，也不会像 cookie 一样每次请求都会传送到服务器，减少了客户端和服务端的交互，节省了网络流量</li><li>敏感访问：对于那种只需在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage 会非常方便</li><li>快速显示</li><li>安全性</li><li>操作更方便：Web Storage 的 API 更加简单</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> job Prepare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job prepare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/921ccac7.html"/>
      <url>/post/921ccac7.html</url>
      
        <content type="html"><![CDATA[<h2 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h2><blockquote><p>HTTP 协议的 GET 方法，支持只请求某个资源的某一部分：</p><ul><li>206 Partial Content 部分内容响应</li><li>Range 请求的资源范围</li><li>Content-Range 响应的资源范围</li><li>在连接断开重连时，客户端只请求该资源未下载的部分，而不是重新请求整个资源，来实现断点续传</li></ul><p>分块请求资源实例：</p><ul><li>Range: bytes&#x3D;306302- ：请求这个资源从 306302 个字节到末尾的部分</li><li>Content-Range: bytes 306302-604047&#x2F;604048：响应中指示携带的是该资源的第 306302-604047 的字节，该资源共 604048 个字节</li><li>客户端通过并发的请求相同资源的不同片段，来实现对某个资源的并发分块下载。从而达到快速下载的目的。目前流行的 FlashGet 和迅雷基本都是这个原理</li></ul></blockquote><h2 id="多线程下载"><a href="#多线程下载" class="headerlink" title="多线程下载"></a>多线程下载</h2><blockquote><p>多线程下载的原理：</p><ul><li>下载工具开启多个发出 HTTP 请求的线程</li><li>每个 http 请求只请求资源文件的一部分：Content-Range: bytes 20000-40000&#x2F;47000</li><li>合并每个线程下载的文件</li></ul></blockquote><h2 id="为什么-js-是单线程"><a href="#为什么-js-是单线程" class="headerlink" title="为什么 js 是单线程"></a>为什么 js 是单线程</h2><pre><code>设计为单线程是与其用途有关的，作为浏览器脚本语言，js的主要用途就是用户交互，以及操作DOM，这就决定了只能是单线程的，否则会带来很多复杂的同步问题。比如，一个线程删除了一个DOM节点，一个在该节点上添加了内容，浏览器应该以哪个线程为准呢？所以，为了避免复杂性，js从诞生就是单线程，浏览器中js执行和DOM渲染共用一个线程</code></pre><h2 id="同步任务、异步任务、宏任务、微任务"><a href="#同步任务、异步任务、宏任务、微任务" class="headerlink" title="同步任务、异步任务、宏任务、微任务"></a>同步任务、异步任务、宏任务、微任务</h2><blockquote><p>同步任务：按照代码的顺序依次执行，会阻塞代码的执行，直到任务完成才会执行下一条语句。常见的同步任务：变量赋值、函数调用、循环、同步文件读写等<br>异步任务：执行过程中不会阻塞其代码执行，会被提交给其他部分（浏览器环境或者操作系统），不会立即返回结果。常见的异步任务：Promise、async&#x2F;await 等</p></blockquote><h3 id="异步任务又分为宏任务和微任务"><a href="#异步任务又分为宏任务和微任务" class="headerlink" title="异步任务又分为宏任务和微任务"></a>异步任务又分为宏任务和微任务</h3><blockquote><p>常见的宏任务：script 标签中的代码、setTimeout、setInterval、setImmediate（NodeJS）、IO、UI 渲染、MessageChannel<br>常见的微任务：Promise.then（不是 new Promise）、async&#x2F;await、process.nextTick（NodeJS）、Object.observe、MutationObserver</p></blockquote><pre><code>整体的执行顺序：先同步 -&gt; 在异步 -&gt; 异步中先微任务 -&gt; 在宏任务</code></pre><table><thead><tr><th></th><th>宏任务</th><th>微任务</th></tr></thead><tbody><tr><td>通信</td><td>通过操作系统提供的机制进行进程间通信</td><td>可以直接读写共享的内存，更方便进行线程间的通信</td></tr><tr><td>资源开销</td><td>创建和维护进程的开销相对较大</td><td>创建和维护线程的开销相对较小</td></tr><tr><td>安全性</td><td>进程间的数据相互隔离，安全性较高</td><td>线程考虑数据同步和互斥问题</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> job Prepare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job prepare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/e51bfa51.html"/>
      <url>/post/e51bfa51.html</url>
      
        <content type="html"><![CDATA[<h2 id="http-缓存"><a href="#http-缓存" class="headerlink" title="http 缓存"></a>http 缓存</h2><pre><code>缓存可以帮助服务器提高并发性能，很多资源不必重复请求，直接从浏览器获取</code></pre><blockquote><p>缓存的优点：减少延迟 减少网络带宽的消耗</p><ul><li>减少相应延迟：因为请求从缓存服务器(离客户端更近)而不是源服务器被相应，这个过程耗时更少，让 web 服务器看上去相应更快</li><li>减少网络带宽消耗：当副本被重用时会减低客户端的带宽消耗;客户可以节省带宽费用，控制带宽的需求的增长并更易于管理</li></ul></blockquote><blockquote><p>浏览器加载页面简单流程</p><ul><li>浏览器根据 http 请求头判断是否命中强缓存，如果命中则直接加载缓存中的资源，并不会将请求发送到服务器（强缓存 200（from cache））</li><li>如果没有命中强缓存，浏览器会将资源加载请求发送到服务器，服务器判断浏览器本地缓存是否失效，若未失效则浏览器不会返回资源信息，浏览器继续从浏览器中加载资源（协商缓存 304）</li><li>若未命中协商缓存，则服务器会将完整的资源返回给浏览器，浏览器加载新资源，并更新缓存（新请求 200）</li></ul></blockquote><h2 id="https-缓存分类"><a href="#https-缓存分类" class="headerlink" title="https 缓存分类"></a>https 缓存分类</h2><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><pre><code>强缓存利用http返回头中的Expires或者Cache-Control两个字段来控制的，用来表示资源的的缓存时间。**Cache-Control优先级高**</code></pre><blockquote><p>Expires 缓存过期时间，用来指定资源到期的时间，时服务器端的具体时间点，是一个绝对时间，是<strong>服务器响应头字段</strong>，告诉浏览器在过期时间之前浏览器都可以直接在缓存中取数据，无需再次请求。例如：Expires：Thu，31 Dec 2022 23：59：59 GMT。（缺点：当客户端时间被修改后，服务端和客户端时间偏差大，会导致缓存混乱，因此有了 Cache-Control）<br>Cache-Control 十一个相对时间，指定一个时间长度值。例如：Cache-Control：max-age&#x3D;3600。包括的字段有：</p><ul><li>max-age&#x3D;t：缓存内容在 t 秒后失效（主要属性）</li><li>private：客户端可以缓存</li><li>public：客户端和代理服务器都可以缓存</li><li>no-cache：需要使用协商缓存（服务器）来验证缓存数据</li><li>no-store：所有数据都不会缓存</li></ul></blockquote><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><pre><code>若未命中强缓存，协商缓存需要对比是否可以进行缓存。浏览器第一次请求数据时，服务器会将缓存标识与数据一起响应给客户端，当浏览器再次请求时，客户端先将缓存标志发送给服务器，服务器根据此标识进行判断，若未失效返回状态码304，浏览器可以使用缓存数据。根据缓存标识Last-Modified-Since或者ETag/If-None-Match来判断是否命中缓存。**ETag/If-None-Match优先级高**</code></pre><blockquote><p>Last-Modified&#x2F;If-Modified-Since</p><ul><li>Last-Modified，第一次请求资源时，响应头中会返回该字段，告诉浏览器资源的最后修改时间</li><li>If-Modified-Since，浏览器再次请求时，请求头中会包含该字段，该值为之前的 Last-Modified，服务器收到之后进行判断是否命中协商缓存，命中返回 304 NotModified，未命中返回整体数据以及状态码 200</li></ul></blockquote><blockquote><p>ETag&#x2F;If-None-Match</p><ul><li>ETag(entity tag)是服务器响应头中返回的一个校验码，可以保证每一个资源是唯一的，资源变换会导致 ETag 变化</li><li>If-None-Match 存放在请求头中，值为返回的 Etag 校验码，服务器根据该值对比校验码判断是否命中缓存，不同则响应整个资源内容以及返回状态码 200，相同则只响应 header 以及状态码 304</li></ul></blockquote><blockquote><p>为什么有 Last-Modified 还需要 ETag？首先 ETag 是 Http 1.1 推出的。服务器响应时，通过此字段告诉浏览器当前资源在服务器生成的唯一标识。为了解决 Last-Modified 难解决的问题：</p><ul><li>Lst-Modified 标注的时间只能精确到秒级，若在秒级内更细致的时间里文件被修改则不能准确的标注修改时间</li><li>若某些文件定期生成，但内容没有任何变化，但 Last-Modified 改变了，导致文件没办法使用缓存</li></ul></blockquote><h2 id="缓存生效的过程"><a href="#缓存生效的过程" class="headerlink" title="缓存生效的过程"></a>缓存生效的过程</h2><pre><code>服务器收到请求时，会在 200OK 中回送该资源的 Last-Modified 和 ETag 头，客户端将该资源保存在 cache 中，并记录这两个属性。当客户端需要发送相同的请求时，会在请求中携带 If-Modified-Since 和 If-None-Match 两个头。两个头的值分别是响应中 Last-Modified 和 ETag 头的值。服务器通过这两个头判断本地资源未发生变化，客户端不需要重新下载，返回 304 响应。</code></pre><h2 id="http-的缓存机制"><a href="#http-的缓存机制" class="headerlink" title="http 的缓存机制"></a>http 的缓存机制</h2><pre><code>HTTP/1.1中缓存的目的是为了在很多情况下减少发送请求，同时在许多情况下可以不需要发送完整响应。前者减少了网络回路的数量;HTTP利用一个“过期(expiration)”机制来为此目的。后者减少了网络应用的带宽;HTTP用“验证(validation)”机制来为此目的。</code></pre><blockquote><p>HTTP 定义了 3 种缓存机制：</p><ul><li>Freshness：允许一个回应消息可以在源服务器不被重新检查，并且可以由服务器和客户端来控制。例如，Expires 回应头给了一个文档不可用的时间。Cache-Control 中的 max-age 标识指明了缓存的最长时间</li><li>Validation：用来检查以一个缓存的回应是否仍然可用。例如，如果一个回应有一个 Last-Modified 回应头，缓存能够使用 If-Modified-Since 来判断是否已改变，以便判断根据情况发送请求</li><li>Invalidation： 在另一个请求通过缓存的时候，常常有一个副作用。例如，如果一个 URL 关联到一个缓存回应，但是其后跟着 POST、PUT 和 DELETE 的请求的话，缓存就会过期</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> job Prepare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job prepare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/b8f2947f.html"/>
      <url>/post/b8f2947f.html</url>
      
        <content type="html"><![CDATA[<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><blockquote><p>跨域的概念：跨域是浏览器拦截的行为，请求已经发送到后端，后端返回的响应式数据被浏览器拦截住了。在前端领域中，跨域是指浏览器允许向服务器发送跨域请求，从而克服 Ajax 只能同源使用的限制<br>同源策略：同源就是指：协议 + 域名 + 端口 三者相同<br>同源策略限制以下几种行为：</p><ul><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM 和 JS 对象无法获得</li><li>AJAX 请求不能发送</li></ul></blockquote><h2 id="跨域的解决方案"><a href="#跨域的解决方案" class="headerlink" title="跨域的解决方案"></a>跨域的解决方案</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><blockquote><p>JSONP 的原理就是利用 script 标签没有跨域限制，通过<script>标签 src 属性，发送带有 callback 参数的 GET 请求，服务端将接口返回数据拼凑到 callback 函数中，返回给浏览器，浏览器解析执行，从而前端拿到 callback 函数返回的数据</p></blockquote><p><strong>JSONP 的缺点：只能发送 GET 一种请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生JS如下</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">script.<span class="property">type</span> = <span class="string">&quot;text/javascript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span></span><br><span class="line">script.<span class="property">src</span> =</span><br><span class="line">  <span class="string">&quot;http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调执行函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleCallback</span>(<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端返回如下（返回时即执行全局函数）</span></span><br><span class="line"><span class="title function_">handleCallback</span>(&#123; <span class="attr">success</span>: <span class="literal">true</span>, <span class="attr">user</span>: <span class="string">&quot;admin&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Jquery Ajax实现如下</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;http://www.domain2.com:8080/login&quot;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">  <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&quot;jsonp&quot;</span>,</span><br><span class="line">  <span class="comment">// 自定义回调函数名</span></span><br><span class="line">  <span class="attr">jsonpCallback</span>: <span class="string">&quot;handleCallback&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue axios实现</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span> = axios;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span></span><br><span class="line">  .<span class="title function_">jsonp</span>(<span class="string">&quot;http://www.domain2.com:8080/login&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">jsonp</span>: <span class="string">&quot;handleCallback&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端nodejs代码</span></span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> params = querystring.<span class="title function_">parse</span>(req.<span class="property">url</span>.<span class="title function_">split</span>(<span class="string">&quot;?&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">var</span> fn = params.<span class="property">callback</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// jsonp返回设置</span></span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/javascript&quot;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">write</span>(fn + <span class="string">&quot;(&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(params) + <span class="string">&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="string">&quot;8080&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is running at port 8080...&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="跨域资源共享（CORS：Cross-origin-resource-sharing）"><a href="#跨域资源共享（CORS：Cross-origin-resource-sharing）" class="headerlink" title="跨域资源共享（CORS：Cross-origin resource sharing）"></a>跨域资源共享（CORS：Cross-origin resource sharing）</h3><pre><code>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</code></pre><blockquote><p>CORS 分为简单请求和非简单请求<br>只要满足以下两个条件，就属于简单请求</p><ul><li>使用下列方法之一：head、get、post</li><li>请求的 header 是：Accept、Accept-Language、Content-Language、Content-Type：只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul><p>不能满足上面的两个条件，就属于非简单请求</p></blockquote><blockquote><p>对于简单请求，浏览器直接发出 CORS 请求，具体来说，就是在头信息之中，增加一个 Origin 字段</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> /cors <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Origin</span>: <span class="attr">http</span>:<span class="comment">//api.bob.com</span></span><br><span class="line"><span class="title class_">Host</span>: api.<span class="property">alice</span>.<span class="property">com</span></span><br><span class="line"><span class="title class_">Accept</span>-<span class="title class_">Language</span>: en-<span class="variable constant_">US</span></span><br><span class="line"><span class="title class_">Connection</span>: keep-alive</span><br><span class="line"><span class="title class_">User</span>-<span class="title class_">Agent</span>: <span class="title class_">Mozilla</span>/<span class="number">5.0</span>...</span><br></pre></td></tr></table></figure><blockquote><p>上面的头信息中，Origin 字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。<br>CORS 请求设置的响应头字段，都以 Access-Control-开头:</p><ul><li>Access-Control-Allow-Origin（必选）：它的值要么是请求时 Origin 字段的值，要么是一个*，表示接受任意域名的请求。</li><li>Access-Control-Allow-Credentials（可选）：它的值是一个布尔值，表示是否允许发送 Cookie。默认情况下，Cookie 不包括在 CORS 请求之中。设为 true，即表示服务器明确许可，Cookie 可以包含在请求中，一起发给服务器。这个值也只能设为 true，如果服务器不要浏览器发送 Cookie，删除该字段即可。</li><li>Access-Control-Expose-Headers（可选）：CORS 请求时，XMLHttpRequest 对象的 getResponseHeader()方法只能拿到 6 个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在 Access-Control-Expose-Headers 里面指定。上面的例子指定，getResponseHeader(‘FooBar’)可以返回 FooBar 字段的值。</li></ul></blockquote><blockquote><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 PUT 或 DELETE，或者 Content-Type 字段的类型是 application/json。非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为"预检"请求（preflight）</p><ul><li>预检"请求用的请求方法是 OPTIONS，表示这个请求是用来询问的。请求头信息里面，关键字段是 Origin，表示请求来自哪个源。除了 Origin 字段，"预检"请求的头信息包括两个特殊字段</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">OPTIONS</span> /cors <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Origin</span>: <span class="attr">http</span>:<span class="comment">//api.bob.com</span></span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Request</span>-<span class="title class_">Method</span>: <span class="variable constant_">PUT</span></span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Request</span>-<span class="title class_">Headers</span>: X-<span class="title class_">Custom</span>-<span class="title class_">Header</span></span><br><span class="line"><span class="title class_">Host</span>: api.<span class="property">alice</span>.<span class="property">com</span></span><br><span class="line"><span class="title class_">Accept</span>-<span class="title class_">Language</span>: en-<span class="variable constant_">US</span></span><br><span class="line"><span class="title class_">Connection</span>: keep-alive</span><br><span class="line"><span class="title class_">User</span>-<span class="title class_">Agent</span>: <span class="title class_">Mozilla</span>/<span class="number">5.0</span>..</span><br></pre></td></tr></table></figure><blockquote><ul><li>Access-Control-Request-Method（必选）：用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，上例是 PUT</li><li>Access-Control-Request-Headers（可选）：该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，上例是 X-Custom-Header</li><li>预检请求的回应：服务器收到"预检"请求以后，检查了 Origin、Access-Control-Request-Method 和 Access-Control-Request-Headers 字段以后，确认允许跨源请求，就可以做出回应</li></ul></blockquote><blockquote><ul><li>Access-Control-Allow-Methods（必选）：它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次"预检"请求</li><li>Access-Control-Allow-Headers：如果浏览器请求包括 Access-Control-Request-Headers 字段，则 Access-Control-Allow-Headers 字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在"预检"中请求的字段</li><li>Access-Control-Max-Age（可选）：用来指定本次预检请求的有效期，单位为秒</li></ul></blockquote><p>CORS 跨域示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;post&quot;</span>, <span class="string">&quot;http://www.domain2.com:8080/login&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&quot;user=admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Jquery ajax</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">xhrFields</span>: &#123;</span><br><span class="line">      <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">      <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></span><br><span class="line">    <span class="attr">crossDomain</span>: <span class="literal">true</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// nodejs代码</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据块接收中</span></span><br><span class="line">    req.<span class="title function_">addListener</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">chunk</span>) &#123;</span><br><span class="line">        postData += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据接收完毕</span></span><br><span class="line">    req.<span class="title function_">addListener</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        postData = qs.<span class="title function_">parse</span>(postData);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跨域后台设置</span></span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="comment">// 后端允许发送Cookie</span></span><br><span class="line">          <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">          <span class="comment">// 允许访问的域（协议+域名+端口）</span></span><br><span class="line">          <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;http://www.domain1.com&#x27;</span>,</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">           * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，</span></span><br><span class="line"><span class="comment">           * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          <span class="comment">// HttpOnly的作用是让js无法读取cookie</span></span><br><span class="line">          <span class="string">&#x27;Set-Cookie&#x27;</span>: <span class="string">&#x27;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">write</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(postData));</span><br><span class="line">        res.<span class="title function_">end</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running at port 8080...&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="nginx-代理跨域"><a href="#nginx-代理跨域" class="headerlink" title="nginx 代理跨域"></a>nginx 代理跨域</h3><pre><code>实现原理与CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin：...等字段</code></pre><blockquote><p>nginx 配置解决 iconfont 跨域：浏览器跨域访问 js、css、img 等常规静态资源被同源策略许可，但 iconfont 字体文件(eot|otf|ttf|woff|svg)例外，此时可在 nginx 的静态资源服务器中加入以下配置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  add_header <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span> *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>nginx 反向代理接口跨域：跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用 HTTP 接口只是使用 HTTP 协议，不需要同源策略，也就不存在跨域问题</p><ul><li>实现思路：通过 Nginx 配置一个代理服务器域名与 domain1 相同，端口不同）做跳板机，反向代理访问 domain2 接口，并且可以顺便修改 cookie 中 domain 信息，方便当前域 cookie 写入，实现跨域访问</li></ul></blockquote><p>nginx 具体配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// proxy服务器</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">81</span>;</span><br><span class="line">    server_name  www.<span class="property">domain1</span>.<span class="property">com</span>;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment">// 反向代理</span></span><br><span class="line">        proxy_pass   <span class="attr">http</span>:<span class="comment">//www.domain2.com:8080;</span></span><br><span class="line">        <span class="comment">// 修改cookie里域名</span></span><br><span class="line">        proxy_cookie_domain www.<span class="property">domain2</span>.<span class="property">com</span> www.<span class="property">domain1</span>.<span class="property">com</span>;</span><br><span class="line">        index  index.<span class="property">html</span> index.<span class="property">htm</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span></span><br><span class="line">        <span class="comment">// 当前端只跨域不带cookie时，可为*</span></span><br><span class="line">        add_header <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span> <span class="attr">http</span>:<span class="comment">//www.domain1.com;</span></span><br><span class="line">        add_header <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Credentials</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="nodejs-中间件代理跨域"><a href="#nodejs-中间件代理跨域" class="headerlink" title="nodejs 中间件代理跨域"></a>nodejs 中间件代理跨域</h3><pre><code>实现原理与nginx大致相同，都是通过启用一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie域名，实现当前的cookie的写入，方便接口登录认证</code></pre><blockquote><p>非 vue 框架的跨域：使用 node + express + http-proxy-middleware 搭建一个 proxy 服务器，具体代码如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前端代码</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问http-proxy-middleware代理服务器</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http://www.domain1.com:3000/login?user=admin&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件服务器代码</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="title function_">proxy</span>(&#123;</span><br><span class="line">    <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">    <span class="attr">target</span>: <span class="string">&quot;http://www.domain2.com:8080&quot;</span>,</span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应头信息，实现跨域并允许带cookie</span></span><br><span class="line">    <span class="attr">onProxyRes</span>: <span class="keyword">function</span> (<span class="params">proxyRes, req, res</span>) &#123;</span><br><span class="line">      res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://www.domain1.com&quot;</span>);</span><br><span class="line">      res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应信息中的cookie域名，可以为false，表示不修改</span></span><br><span class="line">    <span class="attr">cookieDomainRewrite</span>: <span class="string">&quot;www.domain1.com&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Proxy server is listen at port 3000...&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>vue 框架的跨域：node + webpack + webpack-dev-server 搭建的项目，跨域请求接口，直接修改 webpack.config.js 配置。开发环境下，vue 渲染服务和接口代理服务器都是 webpack-dev-server 同一个，所以页面与代理接口之间不再跨域</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;&#125;,</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">proxy</span>: [&#123;</span><br><span class="line">            <span class="attr">context</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://www.domain2.com:8080&#x27;</span>,</span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 当代理某些https服务报错时用</span></span><br><span class="line">            <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// 可以为false，表示不修改</span></span><br><span class="line">            <span class="attr">cookieDomainRewrite</span>: <span class="string">&#x27;www.domain1.com&#x27;</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="attr">noInfo</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="document-domain-iframe-跨域"><a href="#document-domain-iframe-跨域" class="headerlink" title="document.domain + iframe 跨域"></a>document.domain + iframe 跨域</h3><pre><code>此方案仅限主域相同、子域不同的跨域应用场景。实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父窗口：(http://www.domain.com/a.html)</span></span><br><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://child.domain.com/b.html&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;domain.com&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> user = <span class="string">&#x27;admin&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子窗口：(http://child.domain.com/a.html)</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;domain.com&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 获取父窗口中变量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get js data from parent ---&gt; &#x27;</span> + <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">user</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="location-hash-iframe-跨域"><a href="#location-hash-iframe-跨域" class="headerlink" title="location.hash + iframe 跨域"></a>location.hash + iframe 跨域</h3><pre><code>实现原理：a欲与b跨域相互通信，通过中间页c来实现。三个域之间利用iframe的location.hash传值，相同域之间直接js访问来通信具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域，只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可以parent.parent访问a页面所有对象</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a.html：(http://www.domain1.com/a.html) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;iframe&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;http://www.domain2.com/b.html&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;iframe&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 向b.html传hash值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    iframe.<span class="property">src</span> = iframe.<span class="property">src</span> + <span class="string">&quot;#user=admin&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 开放给同域c.html的回调方法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">onCallback</span>(<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;data from c.html ---&gt; &quot;</span> + res);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- b.html：(http://www.domain2.com/b.html) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;iframe&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;http://www.domain1.com/c.html&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;iframe&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 监听a.html传来的hash值，再传给c.html</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    iframe.<span class="property">src</span> = iframe.<span class="property">src</span> + location.<span class="property">hash</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- c.html：(http://www.domain1.com/c.html) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 监听b.html传来的hash值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 再通过操作同域a.html的js回调，将结果传回</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">parent</span>.<span class="title function_">onCallback</span>(</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;hello: &quot;</span> + location.<span class="property">hash</span>.<span class="title function_">replace</span>(<span class="string">&quot;#user=&quot;</span>, <span class="string">&quot;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="window-name-iframe-跨域"><a href="#window-name-iframe-跨域" class="headerlink" title="window.name + iframe 跨域"></a>window.name + iframe 跨域</h3><pre><code>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的name值（2MB）</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html：(http://www.domain1.com/a.html)</span></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">function</span> (<span class="params">url, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;iframe&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载跨域页面</span></span><br><span class="line">  iframe.<span class="property">src</span> = url;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span><br><span class="line">  iframe.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (state === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 第2次onload(同域proxy页)成功后，读取同域window.name中数据</span></span><br><span class="line">      <span class="title function_">callback</span>(iframe.<span class="property">contentWindow</span>.<span class="property">name</span>);</span><br><span class="line">      <span class="title function_">destoryFrame</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></span><br><span class="line">      iframe.<span class="property">contentWindow</span>.<span class="property">location</span> = <span class="string">&quot;http://www.domain1.com/proxy.html&quot;</span>;</span><br><span class="line">      state = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">destoryFrame</span>(<span class="params"></span>) &#123;</span><br><span class="line">    iframe.<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    iframe.<span class="property">contentWindow</span>.<span class="title function_">close</span>();</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(iframe);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求跨域b页面数据</span></span><br><span class="line"><span class="title function_">proxy</span>(<span class="string">&quot;http://www.domain2.com/b.html&quot;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// proxy.html：(http://www.domain1.com/proxy.html)</span></span><br><span class="line"><span class="comment">// 中间代理页，与a.html同域，内容为空即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b.html：(http://www.domain2.com/b.html)</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&quot;This is domain2 data!&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="postMessage-跨域"><a href="#postMessage-跨域" class="headerlink" title="postMessage 跨域"></a>postMessage 跨域</h3><blockquote><p>postMessage 是 HTML5 XMLHttpRequest Level2 中的 API，且是为数不多的可以跨域操作的 window 属性之一，可以用来解决以下方面的问题</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的 iframe 消息传递</li><li>上面三个场景的跨域数据传递</li></ul></blockquote><blockquote><p>用法：postMessage(data, origin)方法接受两个参数</p><ul><li>data：html5 规范支持基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用 JSON.stringify()序列化</li><li>origin：协议 + 主机 + 端口号，也可以设置为“*”，标识可以传递给任意窗口，如果要指定和当前窗口同源的话设置为“/”</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a.html：(http://www.domain1.com/a.html) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;iframe&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;http://www.domain2.com/b.html&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;iframe&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  iframe.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&quot;aym&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 向domain2传送跨域数据</span></span></span><br><span class="line"><span class="language-javascript">    iframe.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data),</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;http://www.domain2.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 接受domain2返回数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;message&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&quot;data from domain2 ---&gt; &quot;</span> + e.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- b.html：(http://www.domain2.com/b.html) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 接收domain1的数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;message&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&quot;data from domain1 ---&gt; &quot;</span> + e.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (data) &#123;</span></span><br><span class="line"><span class="language-javascript">        data.<span class="property">number</span> = <span class="number">16</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 处理后再发回domain1</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(</span></span><br><span class="line"><span class="language-javascript">          <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data),</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;http://www.domain1.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="WebSocket-协议跨域"><a href="#WebSocket-协议跨域" class="headerlink" title="WebSocket 协议跨域"></a>WebSocket 协议跨域</h3><pre><code>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。原生 WebSocket API 使用起来不太方便，我们使用 Socket.io，它很好地封装了 webSocket 接口，提供了更简单、灵活的接口，也对不支持 webSocket 的浏览器提供了向下兼容</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前端代码</span></span><br><span class="line">&lt;div&gt;user input：&lt;input type=<span class="string">&quot;text&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> socket = <span class="title function_">io</span>(<span class="string">&#x27;http://www.domain2.com:8080&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 连接成功处理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">socket.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听服务端消息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    socket.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">msg</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data from server: ---&gt; &#x27;</span> + msg);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听服务端关闭</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    socket.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server socket has closed.&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>].<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    socket.<span class="title function_">send</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// nodejs socket代码</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> socket = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启http服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running at port 8080...&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听socket连接</span></span><br><span class="line">socket.<span class="title function_">listen</span>(server).<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span>(<span class="params">client</span>) &#123;</span><br><span class="line">    <span class="comment">// 接收信息</span></span><br><span class="line">    client.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        client.<span class="title function_">send</span>(<span class="string">&#x27;hello：&#x27;</span> + msg);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data from client: ---&gt; &#x27;</span> + msg);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开处理</span></span><br><span class="line">    client.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Client socket has closed.&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> job Prepare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job prepare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/7da0897c.html"/>
      <url>/post/7da0897c.html</url>
      
        <content type="html"><![CDATA[<h3 id="标签的嵌套"><a href="#标签的嵌套" class="headerlink" title="标签的嵌套"></a>标签的嵌套</h3><blockquote><ul><li>ul 和 li 搭配为无序列表</li><li>ol 和 li 搭配为有序列表</li><li><dl> 标签定义了定义列表（definition list）。</li><li><dl> 标签用于结合 <dt> （定义列表中的项目）和 <dd> （描述列表中的项目）</li><li>ul 只能紧挨着 li</li><li>a 无所不能，但 a 不能嵌套自己</li><li>自定义列表 dl dt dd</li><li>块状元素可以嵌套行内元素和某些块级元素</li><li>行内元素不能嵌套块级元素</li><li>p 不能包含块状元素</li><li>li 比较牛逼，可以嵌套 div 也可以嵌套它的父亲 ul ol</li></ul></blockquote><h3 id="盒模型宽度的计算"><a href="#盒模型宽度的计算" class="headerlink" title="盒模型宽度的计算"></a>盒模型宽度的计算</h3><blockquote><p>标准盒子模型：</p><ul><li>盒子总宽度 &#x3D; width + padding + border + margin;</li><li>盒子总高度 &#x3D; height + padding + border + margin</li><li>也就是，width&#x2F;height 只是内容高度，不包含 padding 和 border 值</li></ul><p>IE 怪异盒子模型(box-sizing: border-box)：</p><ul><li>盒子总宽度 &#x3D; width + margin;</li><li>盒子总高度 &#x3D; height + margin;</li><li>也就是，width&#x2F;height 包含了 padding 和 border 值</li></ul></blockquote><h3 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h3><pre><code>FIFO 页面调度算法,当进程分配到的页面数增加时,缺页中断的次数可能增加也可能减少</code></pre><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><pre><code>js 中在作用域中有一个 Hoisting 的概念，包含两个内容：变量提升和函数提升</code></pre><blockquote><p>1.变量提升：在同一作用域中，变量声明会被提前，但赋值不会</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 输出undefined</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.函数提升：在同一作用域中，函数声明会整个提前到前面(而函数表达式不会)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m= <span class="number">1</span>；</span><br><span class="line"><span class="comment">// y=4</span></span><br><span class="line">y = <span class="title function_">add</span>(m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  returnn = n + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HTML5-新增了哪些表单元素"><a href="#HTML5-新增了哪些表单元素" class="headerlink" title="HTML5 新增了哪些表单元素"></a>HTML5 新增了哪些表单元素</h3><blockquote><ul><li>datalist 元素，用于为 input 设置下拉列表，里面的选项是预先定义好的，将作为用户的输入数据</li><li>keygen 元素，可规定用于表单的密钥对生成器字段，当提交表单时，私钥存储在本地，公钥发送到服务器</li></ul><p>keygen 元素元素的属性：</p><ul><li><p>name&#x2F;form&#x2F;autofocus&#x2F;disabled</p></li><li><p>challenge 属性:将 keygen 的值设置为在提交时询问。</p></li><li><p>keytype 属性：定义密钥类型，如设置为 rsa（一种密码的算法），则生成 RSA 密钥</p></li><li><p>output 元素，用于将计算结果输出显示</p></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">inputlist</span> =<span class="string">&quot;browsers&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Internet Explorer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Firefox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chrome&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Opera&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Safari&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">inputlist</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.php.cn/upload/article/000/000/024/c91c984ee87b453ee06b0340ab979cb3-0.jpg"></p><h3 id="HTML5-新增的元素"><a href="#HTML5-新增的元素" class="headerlink" title="HTML5 新增的元素"></a>HTML5 新增的元素</h3><blockquote><p>新增的结构元素：</p><ul><li><section>、<article>、<aside>、<header>、<footer>、<nav>、<address>、<figure>、<main></li></ul><p>新增的其他元素：</p><ul><li><video>、<audio>、<embed>、<mark>、<progress>、<meter>、<time>（日期或时间）、<rudy>、<rt>、<rp>、<wbr>、<canvas>、<command>、<details>、<datalist>、<datagrid>、<keygen>、<output>、<source>、<menu>、<dialog></li></ul><p>新增的 input 元素的类型</p><ul><li>email、url、number、tel、search、color、range、date、month、week、time（时间）、datetime、datetime-local</li></ul></blockquote><blockquote><p>某些元素解释</p><ul><li>details 元素为一种用于标识该元素内部的子元素可以展开、收缩显示的元素。该元素具有一个布尔类型的 open 类型，当该值为 true 时，该元素内部的子元素应该展开显示；反之，收缩；</li><li>summary 元素从属于 details 元素，当收缩时，呈现的内容，如果没有该元素，浏览器会提供默认的文字；</li><li>mark 元素表示页面中需要突出显示或高亮显示的，目的是引起读者的注意</li><li>progress 元素表示一个任务的完成进度；value 属性表示已经完成了多少工作量；(大于等于 0，小于等于 max)，max 属性表示总共有多少工作量；（&gt;&#x3D;0）</li></ul><p>meter 元素：表示规定范围内的数量值；属性如下：</p><ul><li>value：实际值；</li><li>min：允许使用的最小值；</li><li>max：允许使用的最大值；</li><li>low：规定范围的下限值；</li><li>high：规定范围的上限值；</li><li>optimum：最佳值；</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">id</span>=<span class="string">&quot;detail1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>精武风云<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span>&gt;</span></span><br><span class="line">    陈真（甄子丹 饰）当年为报杀师之仇，独闯 虹口道场...(精武风云电影介绍）</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>搜索&quot;<span class="tag">&lt;<span class="name">mark</span>&gt;</span>HTML 5<span class="tag">&lt;/<span class="name">mark</span>&gt;</span>&quot;,找到相关网页约10,200,000篇，用时0.041秒<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>完成百分比: <span class="tag">&lt;<span class="name">progress</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  磁盘使用量：<span class="tag">&lt;<span class="name">meter</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;40&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">min</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">max</span>=<span class="string">&quot;160&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">low</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">high</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">optimum</span>=<span class="string">&quot;90&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line">  40/160 GB</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  磁盘使用量：<span class="tag">&lt;<span class="name">meter</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;140&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">min</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">max</span>=<span class="string">&quot;160&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">low</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">high</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">optimum</span>=<span class="string">&quot;90&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line">  140/160 GB</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  磁盘使用量：<span class="tag">&lt;<span class="name">meter</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;90&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">min</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">max</span>=<span class="string">&quot;160&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">low</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">high</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">optimum</span>=<span class="string">&quot;90&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line">  90/160 GB</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<mark>和 HTML4 的<em>、<strong>两个元素的作用是有区别的；</p><ul><li>mark 元素的标识目的与原文作者无关，是后来被引用时添加上去的，目的是引起当前用户的注意；</li><li><em>元素是作者为突出文章重点使用的；</li><li><strong>元素是原文作者用来强调一段文字的重要性，比如：警告信息、错误信息等；</li></ul></blockquote><h3 id="HTML5-全局属性"><a href="#HTML5-全局属性" class="headerlink" title="HTML5 全局属性"></a>HTML5 全局属性</h3><blockquote><p>指的是可以对任何元素都使用的属性；</p><ul><li><p>contentEditable 属性：主要功能时允许用户编辑元素中的内容；该属性时是一个布尔值属性，为 true 时表示该元素内容可编辑；在编辑完元素中的内容后，要保存其中内容，只能把该元素的 innerHTML 发送到服务器端进行保存；</p></li><li><p>designMode 属性：用来指定整个页面是否可编辑；该属性有两个值“on”（可编辑）和“off”（不可编辑）；designMode 属性只能在 javascript 脚本中被编辑修改；document.designMode&#x3D;”on”;</p></li><li><p>hidden 属性：所有的元素都允许使用 hidden 属性；功能：通知浏览器不渲染该元素，使该元素处于不可见状态。但元素中的内容还是被浏览器创建的；是一个布尔值属性，true&#x3D;&gt;元素处于不可见状态；</p></li><li><p>spellcheck 属性：对用户输入的文本内容进行拼写和语法检查。（针对文本输入框的新属性）是一个布尔值属性，为 true 时表示要检查；如果元素的 readyOnly 属性或 disabled 属性设置为 true，则不执行拼写检查；</p></li></ul></blockquote><h3 id="HTML5-表单新增属性"><a href="#HTML5-表单新增属性" class="headerlink" title="HTML5 表单新增属性"></a>HTML5 表单新增属性</h3><blockquote><ul><li>form 属性：可以把表单从属元素写在页面的任何地方，添加 form 属性即可把该元素与某表单关联起来；</li><li>formaction 属性：可以为页面中所有按钮添加不同的 formaction 属性，使得在单击不同的按钮可以提交不同的页面；</li><li>formmethod 属性：可以对每个表单元素分别制定不同的提交方法；</li><li>formenctype 属性：表单未发送到服务器之前，对表单元素分别指定不同的编码方式；</li></ul></blockquote><pre><code>  ①  application/x-www-form-urlencoded;  （默认的编码方式）  ②    multipart/form-data：不对字符编码；（使用包含文件上传控件时，必须使用该值）  ③   text/plain：表单中空格换为“+”，不对表单中的特殊字符进行编码；</code></pre><blockquote><ul><li>formtarget 属性：可以每个提交按钮单独指定提交后在何处打开所需要加载的页面；</li></ul></blockquote><pre><code> ① _blank：在新窗口打开；       ② _self：在相同的框架中打开；（默认）    ③ _parent：在当前框架的父框架中打开； ④_top：在当前浏览器窗口中打开；    ⑤ framename：在指定的框架中打开；</code></pre><blockquote><ul><li>autofocus 属性：当画面打开时，该控件自动获得光标焦点；</li><li>required 属性：不允许控件元素中的内容为空白；</li><li>placeholder 属性：模糊提示输入提示文字（占位符提示）</li><li>pattern 属性：输入某个指定的正则表达式，不符合格式，不允许提交；</li><li>label 属性：绑定控件元素；</li></ul></blockquote><pre><code> ① control属性：通过control属性来访问label绑定的表单元素；</code></pre><blockquote><ul><li>文本框的 list 属性：该属性为某个 datalist 元素的 id。datalist 类似于选择框，用于文本框输入提示；</li><li>autocomplete 属性：有“on”、“off”、“”（不指定）三种值；当设置为“on”时，可以显式指定候补输入的列表数据；</li><li>文本框的 selectionDirection 属性：获得用户在文本框选取部分文本时的选择方向，正向选取为“forward”，反向选取为“backward”；</li><li>复选框的 indeterminate 属性：为 true 时表示复选框处于“尚未明确是否选取的状态”；所以在 html5 中，复选框的状态判断应该为：是否明确状态&#x3D;&gt;是否选取；</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// control属性实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">setvalue</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> label = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;label&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> textbox = label.<span class="property">control</span>;</span></span><br><span class="line"><span class="language-javascript">      textbox.<span class="property">value</span> = <span class="string">&quot;232100&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// selectionDirection属性实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">AlertSelectionDirection</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> control = <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>][<span class="string">&quot;test&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> a = control.<span class="property">selectionDirection</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(a);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// indeterminate属性实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> cd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;cd&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    cd.<span class="property">indeterminate</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;testform&quot;</span> <span class="attr">action</span>=<span class="string">&quot;serve.jsp&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- formaction属性：指定要提交的页面 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- formtarget属性：指定在何处打开页面 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;s1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">value</span>=<span class="string">&quot;v1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">formaction</span>=<span class="string">&quot;s1.jsp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">formtarget</span>=<span class="string">&quot;_self&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- formmethod属性：指定提交方式 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;s2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;post提交方式&quot;</span> <span class="attr">formmethod</span>=<span class="string">&quot;post&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;s3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;get提交方式&quot;</span> <span class="attr">formmethod</span>=<span class="string">&quot;get&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 指定编码方式 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">formaction</span>=<span class="string">&quot;upload.jsp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">formenctype</span>=<span class="string">&quot;multipart/form-data&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 自动聚焦  文本框不能为空 要求输入一个数字和3个大写字母--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">autofocus</span></span></span><br><span class="line"><span class="tag">        <span class="attr">required</span></span></span><br><span class="line"><span class="tag">        <span class="attr">pattern</span>=<span class="string">&quot;[0-9][A-Z]&#123;3&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">&quot;输入一个数字和3个大写字母&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;label&quot;</span>&gt;</span> 邮编：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span> /&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;control&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;setvalue()&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- label利用for绑定表单元素 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;txtname&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;txtname&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;greeting&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">list</span>=<span class="string">&quot;greetings&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;greetings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>good<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>amy<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 文本框的selectionDirection属性 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;AlertSelectionDirection()&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">indeterminate</span> <span class="attr">id</span>=<span class="string">&quot;cd&quot;</span> /&gt;</span>indeterminate属性测试</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- form属性:添加控件到表单中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">form</span>=<span class="string">&quot;testform&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="html-中的置换元素和非置换元素的理解"><a href="#html-中的置换元素和非置换元素的理解" class="headerlink" title="html 中的置换元素和非置换元素的理解"></a>html 中的置换元素和非置换元素的理解</h3><blockquote><p>置换元素（Replaced Element）：主要是指 img、input、textarea、select、video、audio 等这类默认就有 CSS 格式化外表范围的元素。</p><ul><li>置换元素的定义如下：</li><li>一个 内容 不受 CSS 视觉格式化模型控制，CSS 渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固有尺寸（宽度，高度，宽高比）的元素，被称之为置换元素</li></ul><p>非置换元素</p><ul><li>一般来说， span 这种行内非置换元素设置宽高是没有意义的。除非修改 display: inline-block。对于行内置换元素，是可以设置宽高的。比如常用的 img 标签自适应图片时，我们只需要定义一个宽或者高，剩下的就会自动帮我们计算。</li><li>非置换元素在 w3c 没有明确的规定，可以确认的是置换元素之外的就是非置换元素</li></ul></blockquote><pre><code>传输层提供端到端的可靠报文传递和错误恢复</code></pre>]]></content>
      
      
      <categories>
          
          <category> job Prepare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job prepare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作的准备工作</title>
      <link href="/post/cff5a4e9.html"/>
      <url>/post/cff5a4e9.html</url>
      
        <content type="html"><![CDATA[<h2 id="vue2-和-vue3-的区别"><a href="#vue2-和-vue3-的区别" class="headerlink" title="vue2 和 vue3 的区别"></a>vue2 和 vue3 的区别</h2><h3 id="双向绑定原理的不同"><a href="#双向绑定原理的不同" class="headerlink" title="双向绑定原理的不同"></a>双向绑定原理的不同</h3><blockquote><ul><li>vue2 的双向数据绑定是利用 ES5 的一个 API（Object.defineProperty），通过其中的 get 和 set 对数据进行劫持，结合发布订阅模式的方式来实现的，Object.defineProperty 会遍历每一个属性</li><li>vue3 中使用 ES6 的 Proxy API 对数据进行代理</li><li>vue3 使用数据代理的优势有以下几点：1）defineProperty 只能监听某个属性，不能对整个对象进行监听 2）可以省去 for in，闭包等内容来提升效率（直接绑定整个对象即可）3）可以监听数组，不用再单独的对数组做特异性操作，vue3 可以检测到数组内部数据的变化</li></ul></blockquote><h3 id="是否支持碎片"><a href="#是否支持碎片" class="headerlink" title="是否支持碎片"></a>是否支持碎片</h3><blockquote><ul><li>vue2 不支持碎片，vue3 支持碎片，就是说可以拥有多个根节点</li></ul></blockquote><h3 id="API-类型不同"><a href="#API-类型不同" class="headerlink" title="API 类型不同"></a>API 类型不同</h3><blockquote><ul><li>vue2 使用选项类型 API，在代码里分割了不同的属性：data、computed、method 等</li><li>vue3 使用和成型 API，相比于选项型 API，使用属性来分组，代码更加简便和整洁</li></ul></blockquote><h3 id="定义数据变量和方法不同"><a href="#定义数据变量和方法不同" class="headerlink" title="定义数据变量和方法不同"></a>定义数据变量和方法不同</h3><blockquote><ul><li>vue2 把数据放到了 data 中</li><li>vue3 需要使用一个新的 setup 方法，此方法在组件初始化构造的时候触发。使用以下步骤简历反应式数据：1）从 vue 引入 reactive 2）使用 reactive 方法来声明数据为响应式数据 3）使用 setup 方法来返回我们的响应式数据，从而模板可以获取可以获取响应式数据</li></ul></blockquote><h3 id="声明周期钩子函数不同"><a href="#声明周期钩子函数不同" class="headerlink" title="声明周期钩子函数不同"></a>声明周期钩子函数不同</h3><blockquote><ul><li>vue2 的生命周期：beforeCreate 组件创建之前；create 组件创建之后；beforeMount 组件挂载到页面之前执行；Mounted 组件挂载到页面之后执行；onBeforeUpdate 组件更新之前；onUpdated 组件更新之后</li><li>vue3 的生命周期：setup 开始创建组件；onBeforeMount 组件挂载到页面之前执行；onMounted 组件挂载到页面之后执行；onBeforeUpdate 组件更新之前；onUpdated 组件更新之后；</li><li>vue3 还增加了 onRenderTracked 和 onRenderTriggered 函数</li></ul></blockquote><h3 id="父子传参不同"><a href="#父子传参不同" class="headerlink" title="父子传参不同"></a>父子传参不同</h3><blockquote><ul><li>vue2 父传子，用 props；子传父用事件 Emitting Events。在 vue2 中，会调用 this.$emit 然后传入事件名和对象</li><li>vue3 父传子，用 props；子传父用事件 Emitting Events。具体子组件使用 deinfProps 接收参数，然后 defineEmits 接收事件</li></ul></blockquote><h3 id="指令与插槽不同"><a href="#指令与插槽不同" class="headerlink" title="指令与插槽不同"></a>指令与插槽不同</h3><blockquote><ul><li>vue3 必须使用 v-slot，v-for 与 v-if 可以一起使用，只会把 v-if 当作 v-for 的一个判断语句，不会相互冲突</li><li>vue3 移除了 keyCode 作为 v-on 的修饰符，而是采用键名来代替，比如：@keyup.enter、@keyup.esc</li><li>vue3 中取消了 filter，如果需要使用可以使用 computed 和 method 函数来代替，如果需要使用全局 filter，采用以下方式：</li><li>vue2 中使用 slot 可以使用 slot，v-for 的优先级比 v-if 高，不建议一起使用</li><li>作用域插槽使用方式不同：vue2 在组件中使用 slot-scope&#x3D;”data”从子组件中获取数据，vue3 中在父组件中使用#data 或者#default&#x3D;”{data}”获取</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">子组件：</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">父组件：</span><br><span class="line">&lt;child&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> #<span class="attr">data</span>&gt;</span>我是插槽插入的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> === <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> #<span class="attr">default</span>=<span class="string">&quot;&#123;data&#125;&quot;</span>&gt;</span>我是插槽插入的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/child&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方式：全局定义</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$filters</span> = &#123;</span><br><span class="line">  <span class="title function_">currentUSD</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;$&#x27;</span> + value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的时候</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; $filters.currentUSD(accountBalance) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">currentUSD</span> = <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;$&#x27;</span> + value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的时候</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">currentUSD</span>(<span class="number">666</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="main-js-文件不同"><a href="#main-js-文件不同" class="headerlink" title="main.js 文件不同"></a>main.js 文件不同</h3><blockquote><ul><li>vue2 需要使用 prototype 的形式去进行操作，引入的是构造函数</li><li>vue3 中需要使用结构的形式进行操作，引入的是工厂函数</li><li>vue3 中 app 组件可以没有根标签，会默认将多个根标签包括在一个 fragement 虚拟标签中，有利于减少内存</li><li>vue3 的 setup 中响应式数据，需要使用.value 获取，模板中不用.value</li></ul></blockquote><h3 id="diff-算法不同"><a href="#diff-算法不同" class="headerlink" title="diff 算法不同"></a>diff 算法不同</h3><blockquote><p>vue2 中的 diff 算法</p><ul><li>遍历每一个虚拟节点，进行虚拟节点对比，并返回一个 patch 对象，用来存储两个节点不同的地方</li><li>用 patch 记录的消息去更新 dom</li><li>缺点：比较每一个节点，而对于一些不参与更新的元素，进行比较是有点消耗性能的</li><li>特点：vue 的 patch 是即时的，并不是打包所有修改然后一起修改 dom，也就是在 vue 中边记录边更新</li></ul><p>vue3 中的 diff 算法</p><ul><li>在初始化的时候会给每一个虚拟节点添加一个 patchFlags，是一种优化的标识</li><li>只会在 patchFlags 发生变化的节点，进行识图更新。而对于 patchFlags 没有变化的元素作静态标记，在渲染的时候直接服用</li></ul></blockquote><h3 id="样式穿透"><a href="#样式穿透" class="headerlink" title="样式穿透"></a>样式穿透</h3><blockquote><ul><li>vue2 中：&#x2F;deep&#x2F; .类名{} 或者 ::v-deep .类名{}</li><li>vue3 中：:deep (.类名{}) 或者 ::v-deep(.类名{})</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> job Prepare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job prepare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找工作刷题过程中做错的题</title>
      <link href="/post/78b8eea.html"/>
      <url>/post/78b8eea.html</url>
      
        <content type="html"><![CDATA[<h3 id="9-29-错题"><a href="#9-29-错题" class="headerlink" title="9-29 错题"></a>9-29 错题</h3><blockquote><p>假设在今日头条里面,有很多工作人员检查新闻是不是属于虚假新闻,所有新闻真实率到达了 98%,工作人员在检验一个真实的新闻把它检验为一个虚假的新闻的概率为 2%,而一个虚假的新闻被检验为真实的新闻的概率为 5%.那么,一个被检验为真实的新闻确实是真实的新闻的概率是多大?</p><ul><li>记事件 A 为新闻实际真实，则<img src="https://www.nowcoder.com/equation?tex=P(A)=0.98,P(%5Coverline%20A)=0.02">，记事件 B 为新闻被检测为真实，则<img src="https://www.nowcoder.com/equation?tex=P(A)=0.98,P(%5Coverline%20A)=0.02">，题目所求一个被检验为真实的新闻确实是真实的新闻的概率 P(A|B)：<img src="https://www.nowcoder.com/equation?tex=P(A%7CB)=%5Cfrac%7BP(B%7CA)*P(A)%7D%7BP(B)%7D=%5Cfrac%7BP(B%7CA)*P(A)%7D%7BP(B%7CA)*P(A)+P(B%7C%5Coverline%20A)*P(%5Coverline%20A)%7D=%5Cfrac%7B0.98*0.98%7D%7B0.98*0.98+0.05*0.02%7D%5Capprox0.9989"></li></ul></blockquote><blockquote><p>现在有两堆石子，小今与小条玩游戏，2 个人都足够聪明，两个人规定:每次每人只能从其中一堆中取走 1 个或 2 个或 3 个石子，后将石子全部取完的人胜利。现在两堆石子的个数为 8 和 9，请问如何安排才能让小今必胜?</p><ul><li>此类博弈问题可寻找守恒关系，每次能取走 1，2，3，则守恒关系为 4（1-3，2-2，3-1），现有两堆石子，8 可以被 4 整除，9 除以 4 余 1， 则小今需要先从数量为 9 的堆里拿走一个，之后不管对手拿 n 个，小今只需要拿走 4-n 个就一定会胜利</li></ul></blockquote><blockquote><p>进程是资源分配的基本单位，线程是资源调度的基本单位<br>排序算法不稳定的有: 希尔排序、堆排序、选择排序、快速排序<br>排序算法稳定的有：插入排序、冒泡排序、归并排序、计数排序、桶排序、基数排序</p></blockquote><h3 id="10-5-错题"><a href="#10-5-错题" class="headerlink" title="10-5 错题"></a>10-5 错题</h3><blockquote><p>变量 a 是一个 64 位有符号的整数，内存中用 16 进制表示为：0Xf000000000000000； 变量 b 是一个 64 位有符号的整数，内存中用 16 进制表示为：0x7FFFFFFFFFFFFFFF。 则 a-b 的结果用 10 进制表示为多少</p><ul><li>计算机中进行符号数运算时，会用补码表示，符号位和数字位一起参与运算。a-b 实际转换为[a-b]补&#x3D;[a]补+[-b]补，转换了下[a]补&#x3D;100100000000000000000000000000000000000000000000000000000000000000，[-b]补&#x3D;100000000000000000000000000000000000000000000000000000000000000001，[a-b]补&#x3D;1000100000000000000000000000000000000000000000000000000000000000001(65 位，符号位溢出)，然后将溢出的符号位补上为 100100000000000000000000000000000000000000000000000000000000000001，转换为原码 1111000000000000000000000000000000000000000000000000000000000001</li></ul></blockquote><blockquote><p>console.log(([])?true:false); console.log(([]&#x3D;&#x3D;false?true:false)); console.log(({}&#x3D;&#x3D;false)?true:false)</p><ul><li>答案：true、true、false</li></ul><p>布尔类型里只有这几参数个返回 false，其它都为 true</p><ul><li>Boolean(undefined)</li><li>Boolean(null)</li><li>Boolean(0)</li><li>Boolean(NaN)</li><li>Boolean(‘’)</li></ul></blockquote><p><strong>布尔类型与其它任何类型进行比较，布尔类型将会转换为 number 类型</strong></p><blockquote><ul><li>Number({})返回的就是 NaN，通过 Object.prototype.toString.call({})来判断类型，0 与 NaN 相比为 false</li><li>Number([])返回 0</li></ul></blockquote><blockquote><p>堆的数据结构能够使得堆顶总是维持最大（对于大根堆）或最小（对于小根堆），给定一个数组，对这个数组进行建堆，则平均复杂度是多少？如果只是用堆的 push 操作，则一个大根堆依次输入 3,7,2,4,1,5,8 后，得到的堆的结构示意图是下述图表中的哪个？</p><ul><li>初始建堆操作复杂度是 O(n)的. 建堆时,由于只采取 Push 的操作,所以每次将新的数字 Push 到堆的最后一位,然后按照插入到原则,进行堆的由下至上调整</li><li>个人理解：每次新插入一个数字，都要按照堆由上到下比较，重新排</li></ul></blockquote><blockquote><p>关于下列 CSS 选择器：ID 选择器、类选择器、伪类选择器、标签名称选择器，排序正确的是：ID 选择器 &gt; Class 选择器 &#x3D; 伪类 &gt; 标签名称选择器</p><p>优先级由高到低可分为：</p><ul><li>在属性后面使用 !important 会覆盖页面内任何位置定义的元素样式。</li><li>作为 style 属性写在元素内的样式</li><li>id 选择器</li><li>类选择器 &#x3D; 伪类选择器 &#x3D; 属性选择器 （后面的样式会覆盖前面的样式）</li><li>标签选择器</li><li>通配符选择器</li><li>浏览器自定义的样式</li></ul></blockquote><blockquote><p>假设 a 是一个由线程 1 和线程 2 共享的初始值为 0 的全局变量，则线程 1 和线程 2 同时执行下面的代码，最终 a 的结果不可能是（-2）</p><ul><li>线程 1 执行完再线程 2 执行，1-2+1-2&#x3D;-2</li><li>线程 1 和 2 同时+1，再-2 不同时，1-2-2&#x3D;-3</li><li>线程 1 和 2 不同时+1，同时-2，1+1-2&#x3D;0</li><li>线程 1 和 2 既同时+1 又同时-2，1-2&#x3D;-1</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">boolean isOdd = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(int i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>)isOdd = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> isOdd = <span class="literal">false</span>;</span><br><span class="line">    a+=i*(isOdd?<span class="number">1</span>:-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/config/img/other/job-error-1"></p><blockquote><p>下列元素是块元素的有</p></blockquote><p><img src="/config/img/other/job-error-2.png"></p><blockquote><p>可继承的样式属性包括</p><ul><li>不可继承的：display、margin、border、padding、background、height、min-height、max- height、width、min-width、max-width、overflow、position、left、right、top、 bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、 page-bread-before 和 unicode-bidi</li><li>所有元素可继承：visibility 和 cursor</li><li>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction</li><li>块状元素可继承：text-indent 和 text-align</li><li>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image</li><li>表格元素可继承：border-collapse</li></ul></blockquote><p><strong>get 请求可以跨域，post 请求也可以跨域，get 和 post 传输的内容存放的位置不一样，一个放在 header，一个放在 body</strong></p>]]></content>
      
      
      <categories>
          
          <category> job do error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job do error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo环境搭建-6</title>
      <link href="/post/6b3e4ca3.html"/>
      <url>/post/6b3e4ca3.html</url>
      
        <content type="html"><![CDATA[<h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><pre><code>【推荐】`hexo-generator-index`从 v2.0.0 开始，已经支持文章置顶功能。你可以直接在文章的`front-matter`区域里添加`sticky: 1`属性来把这篇文章置顶。数值越大，置顶的优先级越大</code></pre><h2 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h2><blockquote><ul><li>文章的 markdown 文档上，在 Front-matter 添加 cover，并填上要显示的图片地址。如果不配置 cover，<br>可以设置显示默认的 cover</li><li>如果不想在首页显示 cover，可以设置为 false</li><li>修改主题配置文件_config.butterfly.yml</li></ul></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面显示的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 当没有设置cover时，默认的封面显示</span></span><br><span class="line">  <span class="attr">default_cover:</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>用法</th></tr></thead><tbody><tr><td>index_enable</td><td>主页是否显示文章封面图</td></tr><tr><td>aside_enable</td><td>侧栏是否显示文章封面图</td></tr><tr><td>archives_enable</td><td>归档页面是否显示文章封面图</td></tr><tr><td>position</td><td>主页卡片文章封面的显示位置 - left：全部显示在左边 - right：全部显示在右边 - both：封面位置以左右左右轮流显示</td></tr><tr><td>default_cover</td><td>默认的 cover, 可配置图片链接&#x2F;顔色&#x2F;渐变色等</td></tr></tbody></table><h2 id="文章页相关配置"><a href="#文章页相关配置" class="headerlink" title="文章页相关配置"></a>文章页相关配置</h2><h3 id="文章-meta-显示"><a href="#文章-meta-显示" class="headerlink" title="文章 meta 显示"></a>文章 meta 显示</h3><pre><code>post_meta这个属性用于显示文章的相关信息的，修改主题配置文件`_config.butterfly.yml`</code></pre><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 主页文章日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章页日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br></pre></td></tr></table></figure><h3 id="文章版权和协议许可"><a href="#文章版权和协议许可" class="headerlink" title="文章版权和协议许可"></a>文章版权和协议许可</h3><pre><code>修改主题配置文件`_config.butterfly.yml`</code></pre><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">author_href:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure><pre><code>由于Hexo 4.1开始，默认对网址进行解码，以至于如果是中文网址，会被解码，可设置decode: true来显示中文网址。如果有文章（例如：转载文章）不需要显示版权，可以在文章页Front-matter中单独设置。</code></pre><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copyright:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><pre><code>从v3.0.0 开始，支持对单独文章设置版权信息，可以在文章Front-matter单独设置</code></pre><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line"><span class="attr">copyright_author:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">copyright_author_href:</span> <span class="string">https://xxxxxx.com</span></span><br><span class="line"><span class="attr">copyright_url:</span> <span class="string">https://xxxxxx.com</span></span><br><span class="line"><span class="attr">copyright_info:</span> <span class="string">此文章版权归xxxxx所有，如有转载，请註明来自原作者</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo搭建步骤 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo环境搭建-5</title>
      <link href="/post/f2371d19.html"/>
      <url>/post/f2371d19.html</url>
      
        <content type="html"><![CDATA[<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><blockquote><ul><li>修改站点配置文件<code>_config.yml</code>，如果使用的 butterfly 主题，请修改<code>_config-butterfly.yml</code>文件</li></ul><p>主题支持三种语言</p><ul><li>default(en)</li><li>zh-CN(简体中文)</li><li>zh-TW(繁体中文)</li></ul></blockquote><h2 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h2><p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改站点配置文件_config.yml。部分参数如下，详细参数可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置</a></p><table><thead><tr><th>属性</th><th>用法</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>描述</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>keywords</td><td>网站的关键词。支持多个关键词</td></tr><tr><td>author</td><td>您的名字</td></tr><tr><td>language</td><td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans 和 zh-CN</td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America&#x2F;New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia&#x2F;Shanghai</td></tr></tbody></table><h2 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h2><pre><code>修改主题配置文件`_config.butterfly.yml`</code></pre><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">List||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p><strong>必须是 &#x2F;xxx&#x2F;，后面||分开，然后写图标名</strong></p><h2 id="导航栏设置"><a href="#导航栏设置" class="headerlink" title="导航栏设置"></a>导航栏设置</h2><pre><code>修改主题配置文件`_config.butterfly.yml`</code></pre><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="comment">#image</span></span><br><span class="line">  <span class="attr">display_title:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span> <span class="comment"># fixed navigation bar</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>用法</th></tr></thead><tbody><tr><td>logo</td><td>网站的 logo，支持图片，直接填入图片链接</td></tr><tr><td>display_title</td><td>是否显示网站标题，填写 true 或者 false</td></tr><tr><td>fixed</td><td>是否固定状态栏，填写 true 或者 false</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码高亮主题"><a href="#代码高亮主题" class="headerlink" title="代码高亮主题"></a>代码高亮主题</h3><blockquote><p><code>Butterfly</code>支持 6 种代码高亮样式</p><ul><li>dark</li><li>pale night</li><li>light</li><li>ocean</li><li>mac</li><li>mac light</li></ul></blockquote><p>修改的位置：主题配置文件<code>_config.butterfly.yml</code>中的<code>highlight_theme</code>属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">light</span></span><br></pre></td></tr></table></figure><h3 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h3><p>修改的位置：主题配置文件<code>_config.butterfly.yml</code>中的<code>highlight_theme</code>属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="代码框展开-x2F-关闭"><a href="#代码框展开-x2F-关闭" class="headerlink" title="代码框展开&#x2F;关闭"></a>代码框展开&#x2F;关闭</h3><p>修改的位置：主题配置文件<code>_config.butterfly.yml</code>中的<code>highlight_shrink</code>属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码框不展开，需点击 &#x27;&gt;&#x27; 打开</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="代码换行"><a href="#代码换行" class="headerlink" title="代码换行"></a>代码换行</h3><pre><code>在默认情况下，Hexo 在编译的时候不会实现代码自动换行。如果你不希望在代码块的区域里有横向滚动条的话，那么你可以考虑开启这个功能</code></pre><p>修改的位置：主题配置文件<code>_config.butterfly.yml</code>中的<code>code_word_wrap</code>属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="代码高度限制"><a href="#代码高度限制" class="headerlink" title="代码高度限制"></a>代码高度限制</h3><p>修改的位置：主题配置文件<code>_config.butterfly.yml</code>中的<code>highlight_height_limit</code>属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># unit: px</span></span><br><span class="line"><span class="attr">highlight_height_limit:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h2><pre><code>Butterfly支持 [font-awesome v6](https://fontawesome.com/icons?from=io) 图标书写格式：图标名：url || 描述性文字</code></pre><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/xxxxx</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:xxxxxx@gmail.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure><h2 id="主页文章节选-自动节选和文章页-description"><a href="#主页文章节选-自动节选和文章页-description" class="headerlink" title="主页文章节选(自动节选和文章页 description)"></a>主页文章节选(自动节选和文章页 description)</h2><pre><code>因为主题UI的关係，主页文章节选只支持自动节选和文章页description</code></pre><blockquote><p>在 butterfly 里，有四种可供选择</p><ul><li>description： 只显示 description</li><li>both： 优先选择 description，如果没有配置 description，则显示自动节选的内容</li><li>auto_excerpt：只显示自动节选</li><li>false： 不显示文章内容</li></ul></blockquote><p>修改的位置：主题配置文件<code>_config.butterfly.yml</code>中的<code>index_post_content</code>属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span></span><br></pre></td></tr></table></figure><p>description 在 front-matter 里添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">id:</span> <span class="string">blog32</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo环境搭建-5</span></span><br><span class="line"><span class="attr">toc_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">hexo搭建步骤</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo环境搭建</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">最简单的记录一下hexo博客的搭建步骤</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">/config/img/top/t31.jpg</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">/config/img/cover/c37.png</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>顶部图的获取顺序，如果都没有配置，则不显示顶部图</li><li>页面顶部图的获取顺序：</li><li>各自配置的 top_img &gt; 配置文件的 default_top_img</li><li>文章页顶部图的获取顺序：</li><li>各自配置的 top_img &gt; cover &gt; 配置文件的 default_top_img</li></ul></blockquote><table><thead><tr><th>属性</th><th>用法</th></tr></thead><tbody><tr><td>index_img</td><td>主页的 top_img</td></tr><tr><td>default_top_img</td><td>默认的 top_img，当页面的 top_img 没有配置时，会显示 default_top_img</td></tr><tr><td>archive_img</td><td>归档页面的 top_img</td></tr><tr><td>tag_img tag</td><td>子页面 的 默认 top_img</td></tr><tr><td>tag_per_img</td><td>tag 子页面的 top_img，可配置每个 tag 的 top_img</td></tr><tr><td>category_img</td><td>category 子页面 的 默认 top_img</td></tr><tr><td>category_per_img</td><td>category 子页面的 top_img，可配置每个 category 的 top_img</td></tr></tbody></table><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_img:</span> <span class="string">xxx.png</span></span><br></pre></td></tr></table></figure><p>其它页面 （tags&#x2F;categories&#x2F;自建页面）和文章页的 top_img，请到对应的 md 页面设置 front-matter 中的 top_img</p>]]></content>
      
      
      <categories>
          
          <category> hexo搭建步骤 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo环境搭建-4</title>
      <link href="/post/85302d8f.html"/>
      <url>/post/85302d8f.html</url>
      
        <content type="html"><![CDATA[<h1 id="具体-type-的生成"><a href="#具体-type-的生成" class="headerlink" title="具体 type 的生成"></a>具体 type 的生成</h1><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><blockquote><ul><li>前往自己的 Hexo 博客的根目录，打开 cmd 窗口执行<code>hexo new page tags</code></li><li>在根目录&#x2F;source&#x2F;下会生成一个含有 index.md 的 tags 文件夹</li><li>修改 index.md 文件，添加：<code>type: &quot;tags&quot;</code></li></ul></blockquote><p>具体的代码：<br>&#96;markdown</p><hr><p>title: tags<br>date: 2022-05-29 21:42:56<br>type: “tags”<br>orderby: random<br>order: 1</p><hr><p>&#96;</p><table><thead><tr><th>属性</th><th>用法</th></tr></thead><tbody><tr><td>type</td><td>【必须】页面类型，必须为 tags</td></tr><tr><td>orderby</td><td>【可选】排序方式 ：random&#x2F;name&#x2F;length</td></tr><tr><td>order</td><td>【可选】排序次序： 1, asc for ascending; -1, desc for descending</td></tr></tbody></table><h2 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h2><blockquote><ul><li>前往自己的 Hexo 博客的根目录，打开 cmd 窗口执行<code>hexo new page categories</code></li><li>在根目录&#x2F;source&#x2F;下会生成一个含有 index.md 的 categories 文件夹</li><li>修改 index.md 文件，添加：<code>type: &quot;categories&quot;</code></li></ul></blockquote><p>具体的代码：<br>&#96;markdown</p><hr><p>title: categories<br>date: 2022-05-29 21:42:56<br>type: “categories”<br>orderby: random<br>order: 1</p><hr><p>&#96;</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><h3 id="创建友情链接页面"><a href="#创建友情链接页面" class="headerlink" title="创建友情链接页面"></a>创建友情链接页面</h3><blockquote><ul><li>前往你的 Hexo 博客根目录，打开 cmd 命令窗口执行<code>hexo new page link</code></li><li>在【BlogRoot&#x2F;source&#x2F;】会生成一个含有 index.md 文件的 link 文件夹</li><li>修改【BlogRoot&#x2F;source&#x2F;link&#x2F;index.md】，添加 type: “link”</li></ul></blockquote><h2 id="96-markdown"><a href="#96-markdown" class="headerlink" title="&#96;markdown"></a>&#96;markdown</h2><p>title: link<br>date: 2022-05-29 22:03:35<br>type: “link”</p><hr><p>&#96;</p><h3 id="友情链接页面添加友链信息"><a href="#友情链接页面添加友链信息" class="headerlink" title="友情链接页面添加友链信息"></a>友情链接页面添加友链信息</h3><pre><code>前往Hexo博客目录（【BlogRoot/source/_data】）创建一个文件link.yml（如果沒有 _data 文件夹，请自行创建），然后在_data目录下创建link.yml文件</code></pre><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">唐志远の博客</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://fe32.top/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure><p><strong><code>class_name</code>和<code>class_desc</code>支持 html 格式，如不需要，也可以留空</strong></p><h2 id="图库"><a href="#图库" class="headerlink" title="图库"></a>图库</h2><pre><code>图库页面和普通的页面是一样的，只需要`hexo new page xxx`创建页面就行，然后使用标签外挂`galleryGroup`，具体用法看下面示例</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span><br><span class="line">&#123;% galleryGroup <span class="string">&#x27;cover&#x27;</span> <span class="string">&#x27;一些不错的封面图&#x27;</span> <span class="string">&#x27;/gallery/cover&#x27;</span> config/img/cover/c2.<span class="property">png</span> %&#125;</span><br><span class="line">&#123;% galleryGroup <span class="string">&#x27;avatar&#x27;</span> <span class="string">&#x27;好看的头像&#x27;</span> <span class="string">&#x27;/gallery/avatar&#x27;</span> config/img/top/t1.<span class="property">jpg</span> %&#125;</span><br><span class="line">&#123;% galleryGroup <span class="string">&#x27;taihangshan&#x27;</span> <span class="string">&#x27;太行山旅游&#x27;</span> <span class="string">&#x27;/gallery/taihangshan&#x27;</span> config/img/other/ths29.<span class="property">jpg</span> %&#125;</span><br><span class="line">&#123;% galleryGroup <span class="string">&#x27;gannan&#x27;</span> <span class="string">&#x27;甘南旅游&#x27;</span> <span class="string">&#x27;/gallery/gannan&#x27;</span> config/img/other/g1.<span class="property">jpg</span> %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>上述的<code>/gallery/cover</code>相当于对于不同的使用不同的文件夹（也就是子页面）</strong></p><h3 id="子页面"><a href="#子页面" class="headerlink" title="子页面"></a>子页面</h3><p>具体的目录结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根目录/source/gallery/cover</span></span><br><span class="line"><span class="comment">// cover下面包含img文件夹，存放当前类别的文件，然后还有一个index.md</span></span><br><span class="line"><span class="comment">// index.md文件里面的写法：</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="attr">title</span>: 头像图</span><br><span class="line"><span class="attr">date</span>: <span class="number">2023</span>-<span class="number">06</span>-<span class="number">25</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">39</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;avatar&quot;</span></span><br><span class="line"><span class="attr">cover</span>: <span class="regexp">/config/img</span><span class="regexp">/top/</span>t11.<span class="property">jpg</span></span><br><span class="line"><span class="attr">top_img</span>: <span class="regexp">/config/img</span><span class="regexp">/cover/</span>c11.<span class="property">png</span></span><br><span class="line">---</span><br><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](img/top/t1.<span class="property">jpg</span>)</span><br><span class="line">![](img/top/t2.<span class="property">jpg</span>)</span><br><span class="line">![](img/top/t3.<span class="property">jpg</span>)</span><br><span class="line">![](img/top/t4.<span class="property">jpg</span>)</span><br><span class="line">![](img/top/t5.<span class="property">jpg</span>)</span><br><span class="line">![](img/top/t6.<span class="property">png</span>)</span><br><span class="line">![](img/top/t7.<span class="property">jpg</span>)</span><br><span class="line">![](img/top/t8.<span class="property">jpg</span>)</span><br><span class="line">![](img/top/t9.<span class="property">jpg</span>)</span><br><span class="line">![](img/top/t10.<span class="property">jpg</span>)</span><br><span class="line">![](img/top/t11.<span class="property">jpg</span>)</span><br><span class="line">![](img/top/t12.<span class="property">jpg</span>)</span><br><span class="line">![](img/top/t13.<span class="property">jpg</span>)</span><br><span class="line">![](img/top/t14.<span class="property">jpg</span>)</span><br><span class="line">![](img/top/t15.<span class="property">png</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><h2 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h2><pre><code>主题内置了一个简单的404页面，可以在设置中放开如果需要在本地预览404页面，打开浏览器，输入：`http://localhost:4000/404.html`</code></pre><p>具体的配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&quot;页面沒有找到&quot;</span></span><br><span class="line">  <span class="attr">background:</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo搭建步骤 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo环境搭建-3</title>
      <link href="/post/1b54b82c.html"/>
      <url>/post/1b54b82c.html</url>
      
        <content type="html"><![CDATA[<h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><pre><code>本站用的是hexo-theme-butterfly主题，使用的npm方式进行的安装，后续需要在根目录/node_modules/hexo-theme-butterfly文件夹下修改对应的文件</code></pre><blockquote><ul><li>安装需要执行的命令<code>npm i hexo-theme butterfly</code></li></ul></blockquote><h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><blockquote><ul><li>安装后，应用主题就要修改默认的配置文件，将_config.yml 文件中的主题修改为 butterfly</li><li>具体是：<code>theme: butterfly</code></li></ul></blockquote><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><pre><code>如果没有pug以及stylus的渲染器，需要下载安装，具体的命令：`npm install hexo-renderer-pug hexo-renderer-stylus --save`</code></pre><h3 id="对于后续升级的建议"><a href="#对于后续升级的建议" class="headerlink" title="对于后续升级的建议"></a>对于后续升级的建议</h3><pre><code>为了减少升级主题后之后修改配置的不便，可以采用下述方法</code></pre><blockquote><ul><li>把对应主题的_config.yml 文件复制到 Hexo 的根目录里，同时重命名为_config_butterfly.yml</li><li>以后对应配置的修改就可以直接在_config_butterfly.yml 进行修改即可</li><li>Hexo 会自动合并主题中的_config.yml 和_config_butterfly.yml 里面的配置，同名的配置会使用_config_butterfly.yml 里面的配置，其优先级比较高</li></ul></blockquote><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><blockquote><p>Front-matter 是 markdown 文件最上方以**—**分隔的区域，用于指定个别档案的变数</p><ul><li>Page Front-matter 用于页面的配置</li><li>Post Front-matter 用于文章页配置</li></ul></blockquote><h3 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">cover:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>用法</th></tr></thead><tbody><tr><td>title</td><td>【必须】页面标题</td></tr><tr><td>date</td><td>【必须】页面创建日期</td></tr><tr><td>type</td><td>【必须】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认为 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中 highlight_shrink 的配置)</td></tr></tbody></table><h3 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">toc<span class="emphasis">_style_</span>simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">aside:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>用法</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置 top_img,文章页顶部将显示缩略图，可设为 false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章 TOC(默认为设置中 toc 的 enable 配置)</td></tr><tr><td>toc_number</td><td>【可选】显示 toc_number(默认为设置中 toc 的 number 配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中 post_copyright 的 enable 配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中 highlight_shrink 的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> hexo搭建步骤 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo环境搭建-2</title>
      <link href="/post/6c5388ba.html"/>
      <url>/post/6c5388ba.html</url>
      
        <content type="html"><![CDATA[<h2 id="初始化一个-Hexo-的项目"><a href="#初始化一个-Hexo-的项目" class="headerlink" title="初始化一个 Hexo 的项目"></a>初始化一个 Hexo 的项目</h2><blockquote><ul><li>在目标路径执行 hexo init blog-name（项目名称，自己随便命名）</li><li>进入 blog-name，输入 npm i 安装相关依赖</li></ul><p>依赖下载完成后，目录结构如下：</p><ul><li><p>node-modules：依赖包</p></li><li><p>scaffolds：生成文章的一些模板</p></li><li><p>source：用来存放你的文章</p></li><li><p>themes：主题</p></li><li><p>.npmignore：发布时忽略的文件</p></li><li><p>_config.landscape.yml：主题的配置文件</p></li><li><p>_config.yml：博客的配置文件</p></li><li><p>package.json：项目名称、描述、版本、运行和开发信息</p></li><li><p>输入 hexo server 或者 hexo s</p></li><li><p>打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a></p></li></ul></blockquote><h2 id="如何将静态的博客推送到-github-上"><a href="#如何将静态的博客推送到-github-上" class="headerlink" title="如何将静态的博客推送到 github 上"></a>如何将静态的博客推送到 github 上</h2><pre><code>这个推送到github上指的是将静态的博客页面推送到github创建的博客仓库上</code></pre><h3 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 hexo-deployer-git</h3><pre><code>执行命令：npm install hexo-deployer-git --save</code></pre><h3 id="修改-config-yml-文件"><a href="#修改-config-yml-文件" class="headerlink" title="修改_config.yml 文件"></a>修改_config.yml 文件</h3><pre><code>在blog-name目录下的_config.yml，就是整个Hexo框架的配置文件。可以在这里面修改大部分的配置，详细配置请参考[官方配置](https://hexo.io/zh-cn/docs/configuration)修改配置文件的最后一行的配置，将repository修改为你自己的github仓库地址即可**检查自己的默认分支是不是master，这个在你创建博客仓库的时候可以看到或者后续修改，如果不是，就要修改配置文件**</code></pre><blockquote><p>具体代码如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy</span>:</span><br><span class="line">  <span class="attr">type</span>: git</span><br><span class="line">  <span class="attr">repository</span>: git地址</span><br><span class="line">  branch：仓库的默认分支名称</span><br></pre></td></tr></table></figure><h3 id="部署项目到-github"><a href="#部署项目到-github" class="headerlink" title="部署项目到 github"></a>部署项目到 github</h3><blockquote><p>修改好配置文件后，运行如下命令，将代码部署到 github</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><blockquote><ul><li>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令</li><li>hexo henerate：生成静态文章，可以用 hexo g 缩写</li><li>hexo deploy：部署文章，可以用 hexo d 缩写</li><li>命令执行完后，如果出现 deploy done，则说明部署成功了</li><li>浏览器输入地址 <a href="https://github/">https://github</a> 用户名.github.io，就可以看到博客内容了</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo搭建步骤 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo环境搭建-1</title>
      <link href="/post/f55ad900.html"/>
      <url>/post/f55ad900.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>本人是在 windows11 的电脑上搭建的 hexo 博客</p><ul><li>电脑的操作系统：windows11</li><li>需要有的基础环境包括：Node、Git、一个 github 的账号</li></ul></blockquote><h2 id="Node-的环境安装以及配置"><a href="#Node-的环境安装以及配置" class="headerlink" title="Node 的环境安装以及配置"></a>Node 的环境安装以及配置</h2><pre><code>Node的环境配置相对比较简单，可以自行百度</code></pre><h2 id="Git-的安装教程"><a href="#Git-的安装教程" class="headerlink" title="Git 的安装教程"></a>Git 的安装教程</h2><pre><code>Git的安装也是比较简单的，官网下载直接next安装即可</code></pre><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><pre><code>学习编程有一个代码的存储仓库是必须的，它可以记录你的学习过程，更好的管理代码，并且在以后的找工作的路上，通过github的提交记录过程也可以看到你的学习过程，这个是很重要的。具体的注册等步骤也可以自行百度，我在这里就不多说了，因为一个人学习编程的话，什么都会也是不现实的，所以必须学会通过各种方式解决问题，百度就是最基础的一种，如果简单的环境搭建（**我说的是简单的环境！！！**）都完成不了，可能需要考虑是否适合学习编程了</code></pre><h2 id="github-的个人博客"><a href="#github-的个人博客" class="headerlink" title="github 的个人博客"></a>github 的个人博客</h2><pre><code>每一个github的账号可以创建一个博客网站，这个仓库和其他的仓库是不一样的，也是New repository创建仓库，但是名称是：&lt;用户名&gt;.github.io，其他的步骤基本和其他仓库是一致的</code></pre><h2 id="基础的常用命令"><a href="#基础的常用命令" class="headerlink" title="基础的常用命令"></a>基础的常用命令</h2><blockquote><ul><li>git config -1 查看所有配置</li><li>git config –system –list 查看系统配置</li><li>git config –global –list 查看用户（全局）配置</li><li>git config –global user.name “你的用户名”</li><li>git config –global user.email “你的邮箱”</li></ul></blockquote><h2 id="连接-github"><a href="#连接-github" class="headerlink" title="连接 github"></a>连接 github</h2><pre><code>通常来说，对于github的仓库，如果是公开的，我们可以选择https的方式进行clone，u嗯可以选择使用ssh的方式进行clone，但是ssh的clone需要生成公钥对之后才可以</code></pre><blockquote><p>1、生成 ssh 公钥的步骤</p><ul><li>执行命令：ssh-keygen -t rsa -C “你的邮箱”。之后打开你的 C 盘用户文件夹的.ssh 文件夹就会看到 id_rsa.pub 文件</li><li>使用编辑器或者记事本打开刚才的公钥文件，复制里面的内容，在 github 中配置 ssh 密钥即可</li><li>github 配置 ssh 公钥的具体路径：进入 github -&gt; 点击右上角的头像 -&gt; 点击 settings -&gt; 选择 SSH and GPG keys 之后起个名字，粘贴复制的公钥内容即可</li><li>配置后，为了测试是否配置成功，可以执行以下命令：ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#109;">&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#109;</a> 之后出现 Hi xxx You’ve successfully autherticated, xxx 就说明成功了</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo搭建步骤 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实习生活</title>
      <link href="/post/85d3a334.html"/>
      <url>/post/85d3a334.html</url>
      
        <content type="html"><![CDATA[<h2 id="实习生活结束的原因"><a href="#实习生活结束的原因" class="headerlink" title="实习生活结束的原因"></a>实习生活结束的原因</h2><p>我的实习生活是从今年的 7 月 18 号正式开始的，本来想着实习个半年呢，结果事情果然不能提前做决定，<br>因为各种事情的发展使得其不断的变化，实习期间我的论文被录用了，按说有这个好事，我更加可以一直<br>实习才对，但是秋招开始了，目前已经研三了，找工作只有两次机会，秋招与明年的春招，但是我只是<br>普通的一本院校，秋招提前批，我投都没敢投简历，因为心里知道，过不了的，别说笔试面试过了过不了，<br>就连简历筛选估计都过不了的，学历真的很重要。所以想着赶紧辞职，好好准备以下吧，都说金九银十，<br>九月已经没了，十月不知道能否把握住呢，希望一切顺利吧！</p><h2 id="实习中的项目经历"><a href="#实习中的项目经历" class="headerlink" title="实习中的项目经历"></a>实习中的项目经历</h2><blockquote><ul><li>实习两个月多点，算是一共经历了三个，但是参与比较多的只有两个，一个是温箱项目，这个项目类似于大屏展示的功能，但是在展示的基础上，增加了一些命令的添加与执行操作，包括命令执行后的工作进度等，这些都是实时更新的，也有命令执行过程中出现错误之后的紧急处理，因为命令是下发给硬件执行了，如果过程中出现错误什么的，就不能让他接着执行了，否则可能引起温度过高，导致机器损坏，必须处理合适。处理等都是实时的，最后使用 echarts 写了一个堆叠展示图，默认是展示当天的范围，可以拖拽查看某一时间范围下发的温度值和实际执行值，也可以通过时间选择器，输入想要查看的时间范围</li><li>第二个也不算是个项目，但却是非常重要的一个功能，就是 pdf 生成的功能，但是这个不是简单的生成就可以。首先它需要将网站的所有网页都转为 pdf，这个范围包括侧边栏下所有导航以及子导航包括的所有网页，总体加起来达到将近 8000 页，第二，由于网页都是产品的参数信息，也就是由表格构成的，一个包含三个表格：表头（包含一个 addr（唯一值）以及表格名称）表格、参数信息表格、参数描述的表格，由于一个子目录包含的信息转为 pdf 都有五六百页，所以如果简答的生成的话，查看起来是非常麻烦的，因此就需要生成一个目录表格，使用前端的锚点定位功能来快速定位查看的是哪一个表格信息，这个锚点定位的功能需要实现为双向的：目录表格可以定位到具体的表格，表格也可以快速回到目录表格，以便于下一次的查找。在此基础上，由于内容是处于不同的目录（导航）之下的，我们需要生成一个大纲（也就是根据每个大模块生成对应的目录，先跳转到大模块，再根据具体的需求根据目录表格使用锚点定位查找具体的表格）</li><li>第三个项目是一个做了很久的项目，因为其功能特别特别的多，所以做的时间非常久，我来的时候，这个项目就已经在做了，有人在做，所以刚开始我并没有被分配到这个项目上，后续有人离职，所以我才加入了进来，它是一个添加案例，以及管理，后续还会有 lauch，测试等等，（每个人可以创建项目，在项目里面可以添加案例，案例的管理是通过 tree 进行的，也可以理解为 group，不同的组下有不同的嵌套文件夹，然后文件夹下对应各种各样的 case，嵌套的管理很复杂，因为要求不同的 group 下的案例可以整体的显示，然后点开不同的 group，就只显示当前 group 下的 case，非常非常的复杂，里面也参杂了权限，权限是根据项目 id 进行分配的）。我只参与了后续的 debug 的修改等一些小的 bug 修复，这个项目虽然已经开发了半年多，目前只完成一个模块中的一部分，还有很多并未实现，后续会有 stage3、stage4 等等</li></ul></blockquote><h2 id="对于项目中的难点"><a href="#对于项目中的难点" class="headerlink" title="对于项目中的难点"></a>对于项目中的难点</h2><blockquote><p>温箱项目：</p><ul><li>该项目之前是写过一遍的，只不过没有使用框架，后续主管为了更方便管理，让我用 vue3 重构了一遍，整体来说实现起来并不复杂，只不过功能都是实时的，在处理的过程中比较麻烦一点吧，因为需要避免各种功能之间的互相影响（比如修改了温度，按道理来说，修改之后，一旦提交这个请求，就会让机器按照修改的执行，但是由于上一次的任务可能还没有执行完毕，这时候就要做处理。以及由于部署环境的影响，一个项目的不同参数等等可能不只处于一个环境下，有一个出错，可能就会出错，导致不能运行，但是机器是硬件设施。命令也是对机器下发的不同的温度，这是如果不处理，可能会因为温度升高，导致损坏，所以这一切都是实时监督的，出错处理，以及出错修复以后，是按照新的执行，还是继续上一次的等等）</li></ul><p>pdf 生成项目：上面也叙述了这个功能的要求，其实现的困难点包括:</p><ul><li>如何能够一次性的生成（8000 页不中断）</li><li>如果能在合并 pdf 的过程中保留锚点定位功能</li><li>如何根据不同的模块生成对应的一级二级目录</li><li>当然在这里，处理以上这些，还需要对生成的 pdf 加上页眉、页脚、以及封页等</li></ul><p>testhub 项目：</p><ul><li>这个项目难点很多，首先先看明白就需要时间，由于我开的功能不多，这里不多阐述</li></ul></blockquote><pre><code>由于pdf生成的重要性，这里叙述以下整体的过程</code></pre><h3 id="起初选择的库以及出现的问题"><a href="#起初选择的库以及出现的问题" class="headerlink" title="起初选择的库以及出现的问题"></a>起初选择的库以及出现的问题</h3><blockquote><p>起初选择的库</p><ul><li>对于连续生成，也就是将 html 转为 pdf，我选择了 puppeteer 这个库，因为导航栏有一级导航、二级导航，只有点击对应的导航，才能显示对应的内容，所以我们需要模拟网页的点击事件，才能拿到对应的 html 内容，这个库可以很好的做到，并且也可以添加对应的页眉、页脚等</li><li>由于网站的整体架构是先分为上下，上面是 header，包括 logo、以及根据内容进行模糊搜索，还有分屏的功能等，然后下面部分又分为左右，左边导航栏，右边才是真正的内容，但是我们转 pdf 是不需要 header 以及导航的内容的，我们只需要内容部分，这就相当于划定范围的生成，这里肯定是需要处理 css 的，要不然转成的 pdf 样式结构肯定乱套了，puppeteer 这个库也可以很好的处理 css 问题</li><li>对于只生成划定范围的内容，puppeteer 这个库有两种方式可以做到，一种是调用其中的 setContent 方法，也就是将需要生成部分的的 html 传入即可，但是这种方式有很大的弊端，因为网站肯定是样式设定好的，但是你直接传入，那就相当于，你把宽度可能有 80%的右侧内容部分传入，那么它就占据了百分百的宽度，以及网站是先分上下的，它的上面肯定也有空间，而你简单的传入，样式已经乱套了，这个时候你只能通过类似 js 的方式书写 css 去解决这个问题，如果你学过前端，你就应该明白，使用 js 书写简单的或者少量的 css 是完全没有问题的，但是大量的书写是非常的恶心的，代码也没有可读性，所以这种方式尝试后就放弃了</li><li>第二种方式就是直接调用 pdf 方法去生成，但是直接调用 pdf，相当于传入的是这个网站的内容，这个时候，我们可以通过控制 css 的方式去控制样式（puppeteer 支持的非常好），这里需要注意的是，如果你把导航栏的 display 设定为 none 值，你就无法触发其内容的点击事件，这样也就无法实现连续生成的效果，这里的解决办法是使用 opacity：0 的方式，然后将其父元素的整体宽度设为 0 来实现的，既保留了点击事件的有效性，也可以只保留划定内容的显示。</li><li>对于生成后 pdf 的合成（因为是根据不同的模块生成的，每个 html 保存成了一个 pdf，后续需要所有的合并为一个 pdf），起初选择的是 pdf-lib，这个库也就久负盛名，其不仅可以指定合并的页数，还可以提取其中某一页的 pdf，或者不要某一页的 pdf，并且可以在合并的过程中，单独的对 pdf 进行处理，包括添加页码、加水印等等，非常的方便</li><li>对于大纲的生成，pdf-lib 这个库也可以做到，但是其生成的大纲对于样式的控制却不太灵活，后续放弃了这个库，使用了 python 的一个库，叫做 pymupdf</li></ul></blockquote><blockquote><p>出现的问题</p><ul><li>puppeteer 是模拟浏览器来进行的，其中有一个 brower 实例，也就是打开一个浏览器，然后其中有 page 方法，也就是打开一个页签，刚开始我以为打开一个页签，利用循环的方式，直接就可以连续生成了呢，结果不然，在连续生成的页面多了以后，就会报错，猜测可能是一个 page 的生成是有限制的，不能无限的生成（因为包含很多的页面，需要不停的切换，并且页面的表格也是动态生成的，我们需要确保页面中所有表格生成完毕才能执行 pdf 的生成）</li><li>上述问题的解决办法：第一次尝试在生成后关闭页面，然后在打开一个新的 page 实例，结果不行，因为你刚开始打开一个 brower 实例，一个 page 实例，生成后，你把 page 关闭，那就相当于你把 brower 唯一的 page 关了，那浏览器肯定也就关闭了，所以此法不通。后续是通过每次都打开关闭 brower 的方式实现的</li><li>上述也说过，pdf 除了连续生成很重要，其中的锚点定位更是重中之重，因为页面太多，每个页面包含的表格更是成百上千，没有锚点定位，查看很麻烦，但是采用 pdf-lib 合并 pdf 后，原 pdf 的锚点定位功能就被取消了，个人猜测原因如下：由于锚点定位用的还是浏览器的 hash 功能，所以内部肯定是通过代码处理的，但是 pdf-lib 可能是将内容转为 byte 的过程中，只保留了内容，功能部分的（很可能是 js）被丢弃了，所以锚点功能就没了。</li><li>锚点功能是绝对不能丢弃的。后续通过大量的百度等找到了另一个伟大的库：easy-pdf-merge，这个库非常的 nice，但是你通过 npm 的官网，会发现它的下载量不高，可能是因为大家一般都是简单的生成，并不需要保留什么功能吧，所以 pdf-lib 可能就相比之下更好用了。这个库非常的秀，它的底层是使用 java 开发的，所以使用它就需要有 java 环境。还有一点就是就像上面说的，锚点定位是相当于浏览器 hash 功能的，所以应该会有脚本对其处理，pdf-lib 合并后失去功能，很可能就是丢弃了脚本，但是 easy-pdf-merge 可能就是保留了脚本，所以它的合并可能是简单粗暴的（由于没看源码，一切都是自己猜测的），因为它合并的文件大小就相当于每个 pdf 文件大小的累加和，这样以来，就对生成的 pdf 大小是有很大的要求的，8000 多页的 pdf，累加起来的大小是非常大的</li><li>后续生成二点过程中我发现 puppeteer 这个库采用 headless: false 和 headless: true 相比，生成的文件大小只有其六分之一左右。headless: false 会打开浏览器，headless: true 不会打开浏览器，如果采用 headless: true 生成 8000 多页，后续合并后，整体的 pdf 大小超过了 1G，浏览器根本打不开这样的 pdf 文件，我也是后来才发现这个事情的，所以后续采用的是 headless: false 生成的，8000 页合并后整体大小为 150M 左右，不算大，因为页数确实多</li><li>然后对于大纲，我们采用了 pymupdf 这个 python 库实现的</li></ul></blockquote><p><strong>整体的实现相当于需要 nodejs、Java、python 三种环境才大功告成</strong></p><pre><code>目前为发现其他更好的解决办法，如果有可以联系我：[邮箱](fxh19980816@126.com)</code></pre><blockquote><p>除此之外，puppeteer 现在是不能下载内置的 chrome 浏览器的，需要自己电脑本机上下载，后续指定位置进行使用，所以安装 puppeteer 库的时候，需要先导出变量: <code>PUPPETEER_SKIP_DOWNLOAD=&#39;true&#39;</code>，然后在执行<code>npm i puppeteer</code><br>windows 导出变量不能使用 cmd 的，需要在 git 里面</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实习生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启实习生活</title>
      <link href="/post/90476360.html"/>
      <url>/post/90476360.html</url>
      
        <content type="html"><![CDATA[<h2 id="实习生活"><a href="#实习生活" class="headerlink" title="实习生活"></a>实习生活</h2><p>可能是因为感觉在学校生活没什么事情了，也许是感觉有份实习的经历会对后续找正式的工作有帮助，就在网上投递简历找了一份实习，实习的 base 是在杭州，刚来到这里，说实话，很难受，因为一个人到了一个不习惯的生活环境，没有认识的人，也没有找房子，公司如何，同事如何都不知道，心中还是十分忐忑的。第一天早早的起床，到公司八点半，发现大家都没去，规定是九点上班，下午六点下班，但并不强制，可以稍微晚点，那走的时候也就是相对晚点，主要看自己。实习生是有上下班打卡要求的（但是我老是忘记打下班卡），因为上班卡是早上第一次刷脸后就相当于打卡了，但是下班时通过钉钉进行打卡的，有范围限制，大概是 300 米以内。第一天见到同事啥的，感觉还行，实习生有五六个吧，前两天并没有给我安排工作，就是自己简单的熟悉一下。结果第二天中午我问实习生的负责人说我有啥工作吗，虽然当时没有，第二天中午就给我安排了，然后周五第一次参加工作汇报会议，发现有一个实习生比我报道时间都早，现在都还没有被安排工作，瞬间感觉可能是我自己问的了。哎，不过也没事，因为这份实习面试的时候就说过了的，不转正，所以就算是为了真的学点东西吧。</p><h2 id="自己真笨"><a href="#自己真笨" class="headerlink" title="自己真笨"></a>自己真笨</h2><p>刚进入公司分给我了一台电脑以及显示器，说实话，我之前在学校自己没有用过显示器，我都不知道怎么跟电脑连接的，尴尬的一批，线都不会接，还找了兄弟帮忙，感觉有点丢人，哈哈。然后被安排工作之后，搭建环境竟然也出问题了，感觉以前自己看视频学习也没有出过错啊，整了半天也没有弄明白，主要还是自己太自信了，因为我自己还是先百度了一波的，但是别人说的那种情况我觉得不太可能，就没尝试，然后无奈，又找了兄弟帮忙，真的是丢人，工作都整不明白了，结果他就是百度的，根据人家的弄好的，哎，自己脑子抽抽了？</p><h2 id="目前状况"><a href="#目前状况" class="headerlink" title="目前状况"></a>目前状况</h2><p>自己目前负责的这个工作，目前难度不高，后续还不清楚，但是我发现我在公司干活好像还不如我自己在租房子这里干的明白呢，不太懂，难道是在公司紧张？还是说还没有适应？希望后续正常点吧，工作汇报的时候，感觉别人负责的工作看起来好高大上啊，并且别人解决的问题也是高大上感觉，虽然有人安慰我说，其实都没啥，你要是做这方面，你会发现不难，就是来的时间久了点，习惯了而已，或许吧，我也希望我待了三四个月后，能够有这种感觉</p>]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实习生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（8-1）</title>
      <link href="/post/e2e2914e.html"/>
      <url>/post/e2e2914e.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>这次的面试也算是一个老的面试，是之前一个的二面，不太懂，现在都已经卷到这个程度了？实习生都有二面、三面了？好歹我还是先参加了线上的笔试才被安排面试的，哎… 这次的面试效果很不好，因为问的问题我个人觉得超出了实习的能力范围，问了一些和源码相关的东西，并且基本没有基础，全是和源码相关的，我觉得就算是正式的校招，你这个难度也有点过了啊</p><h2 id="vue-use-的原理，是怎么实现的"><a href="#vue-use-的原理，是怎么实现的" class="headerlink" title="vue.use 的原理，是怎么实现的"></a>vue.use 的原理，是怎么实现的</h2><pre><code>执行 Vue.use(myPlugin) 会调用 myPlugin.install(Vue)</code></pre><blockquote><p>Vue.use 方法的第一个参数只能接收对象与函数形式的参数，对象参数需要有 install 方法，当传入参数中是对象，且有 install 方法时，会自动执行其中的 install 方法，并且 install 方法中的 this 依然指向该对象<br>当参数为函数时，不需要有 install 方法（函数本身也没有），也会直接执行该传入的函数<br>传入该对象的 install 方法和函数中的第一个参数，必然是 Vue 对象本身，依然是源码的体现，Vue.use 中第二个参数之后的参数，会按第二个参数依次传入该对象的 install 方法或函数<br><strong>作用：1、注册全局组件（并不是 use 方法本身能注册全局组件，是此 install 方法或函数中的代码逻辑可以实现）2、在原型上增加一些东西</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 HelloWorld 注册为全局组件</span></span><br><span class="line"><span class="comment">// 在原型中添加$num= 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在components中新建components.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">install</span>: <span class="keyword">function</span> (<span class="params">Vue</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里的Vue就是你调用install方法时传递过来的</span></span><br><span class="line">    <span class="comment">// 可以在Vue原型中加一些东西</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$num</span> = <span class="number">123</span></span><br><span class="line">    <span class="comment">// 注册全局组件</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="title class_">HelloWorld</span>.<span class="property">name</span>, <span class="title class_">HelloWorld</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在main.js中调用</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> components <span class="keyword">from</span> <span class="string">&#x27;@/assets/components.js&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(components)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Helloworld.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是HelloWord<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; $num &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>该 js 为对象时，component.js 写法不一样，其他均一样</strong></p><h3 id="Vue-use-VueRouter-就是这么实现的"><a href="#Vue-use-VueRouter-就是这么实现的" class="headerlink" title="Vue.use(VueRouter)就是这么实现的"></a>Vue.use(VueRouter)就是这么实现的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">Vue</span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="title class_">HelloWorld</span>.<span class="property">name</span>, <span class="title class_">HelloWorld</span>);</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$num</span> = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">  <span class="comment">// 这一句是为了防止重复注册</span></span><br><span class="line">  <span class="keyword">if</span> (install.<span class="property">installed</span> &amp;&amp; _Vue === <span class="title class_">Vue</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  install.<span class="property">installed</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  _Vue = <span class="title class_">Vue</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> isDef = <span class="keyword">function</span> (<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> v !== <span class="literal">undefined</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> registerInstance = <span class="keyword">function</span> (<span class="params">vm, callVal</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> i = vm.<span class="property">$options</span>.<span class="property">_parentVnode</span>;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="title function_">isDef</span>(i) &amp;&amp;</span><br><span class="line">      <span class="title function_">isDef</span>((i = i.<span class="property">data</span>)) &amp;&amp;</span><br><span class="line">      <span class="title function_">isDef</span>((i = i.<span class="property">registerRouteInstance</span>))</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="title function_">i</span>(vm, callVal);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="attr">beforeCreate</span>: <span class="keyword">function</span> <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isDef</span>(<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_routerRoot</span> = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_router</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_router</span>.<span class="title function_">init</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property">util</span>.<span class="title function_">defineReactive</span>(<span class="variable language_">this</span>, <span class="string">&quot;_route&quot;</span>, <span class="variable language_">this</span>.<span class="property">_router</span>.<span class="property">history</span>.<span class="property">current</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_routerRoot</span> = (<span class="variable language_">this</span>.<span class="property">$parent</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">_routerRoot</span>) || <span class="variable language_">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">registerInstance</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">destroyed</span>: <span class="keyword">function</span> <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">registerInstance</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其核心就是使用Object.defineProperty的get在install方法中将$router和route挂载到Vue原型上</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;$router&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_routerRoot</span>.<span class="property">_router</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;$route&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_routerRoot</span>.<span class="property">_route</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;RouterView&quot;</span>, <span class="title class_">View</span>);</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;RouterLink&quot;</span>, <span class="title class_">Link</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> strats = <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">optionMergeStrategies</span>;</span><br><span class="line">  <span class="comment">// use the same hook merging strategy for route hooks</span></span><br><span class="line">  strats.<span class="property">beforeRouteEnter</span> =</span><br><span class="line">    strats.<span class="property">beforeRouteLeave</span> =</span><br><span class="line">    strats.<span class="property">beforeRouteUpdate</span> =</span><br><span class="line">      strats.<span class="property">created</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>官方对 Vue.use() 方法的说明：通过全局方法 Vue.use() 使用插件，Vue.use 会自动阻止多次注册相同插件，它需要在你调用 new Vue() 启动应用之前完成，Vue.use() 方法至少传入一个参数，该参数类型必须是 Object 或 Function，如果是 Object 那么这个 Object 需要定义一个 install 方法，如果是 Function 那么这个函数就被当做 install 方法。在 Vue.use() 执行时 install 会默认执行，当 install 执行时第一个参数就是 Vue，其他参数是 Vue.use() 执行时传入的其他参数。就是说使用它之后调用的是该组件的 install 方法</p></blockquote><h3 id="在-Vue-中引入使用第三方库，采用-Vue-use-操作，有的组件引入进来又进行了-Vue-prototype-something-x3D-something，那么它们之间有什么联系呢？"><a href="#在-Vue-中引入使用第三方库，采用-Vue-use-操作，有的组件引入进来又进行了-Vue-prototype-something-x3D-something，那么它们之间有什么联系呢？" class="headerlink" title="在 Vue 中引入使用第三方库，采用 Vue.use()操作，有的组件引入进来又进行了 Vue.prototype.$something &#x3D; something，那么它们之间有什么联系呢？"></a>在 Vue 中引入使用第三方库，采用 Vue.use()操作，有的组件引入进来又进行了 Vue.prototype.$something &#x3D; something，那么它们之间有什么联系呢？</h3><blockquote><p>先说一下 vue.prototype, 在 vue 项目中通常我们引入 axios 来进行请求接口数据，通过 pnpm 安装 axios 之后我们只需要在文件中导入 improt axios from ‘axios’就可以使用，有时候我们会加上一句 vue.prototype.$axios&#x3D;axios，其实是在vue的原型上增加了一个axios，通过在全局注册这个方法，然后在周后的文件中都可以通过$axios 直接来使用 axios</p></blockquote><h3 id="Vue-js-的插件，应该暴露一个-install-方法，这个方法的第一个参数是-Vue-构造器-第二个参数是一个可选的选项对象"><a href="#Vue-js-的插件，应该暴露一个-install-方法，这个方法的第一个参数是-Vue-构造器-第二个参数是一个可选的选项对象" class="headerlink" title="Vue.js 的插件，应该暴露一个 install 方法，这个方法的第一个参数是 Vue 构造器,第二个参数是一个可选的选项对象"></a>Vue.js 的插件，应该暴露一个 install 方法，这个方法的第一个参数是 Vue 构造器,第二个参数是一个可选的选项对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 含有一个就行，比如挂载到原型上</span></span><br><span class="line"><span class="title class_">MyPlugin</span>.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或 property</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property">myGlobalMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件选项</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params">methodOptions</span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-use-的源码中的逻辑"><a href="#Vue-use-的源码中的逻辑" class="headerlink" title="Vue.use() 的源码中的逻辑"></a>Vue.use() 的源码中的逻辑</h3><blockquote><p>在源码中首先限制了它传入的值的类型只能是 Function 或者 Object，然后判断了该插件是不是已经注册过，防止重复注册，然后调用了该插件的 install 方法，源码中也有介绍到 Vue.use()可以接受多个参数的，除第一个参数之后的参数我们都是以参数的形式传入到当前组件中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以注入uView这个第三方库为例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initUse</span>(<span class="params">Vue: GlobalAPI</span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property">use</span> = <span class="keyword">function</span> (<span class="params">plugin: <span class="built_in">Function</span> | <span class="built_in">Object</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> installedPlugins =</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_installedPlugins</span> || (<span class="variable language_">this</span>.<span class="property">_installedPlugins</span> = []);</span><br><span class="line">    <span class="keyword">if</span> (installedPlugins.<span class="title function_">indexOf</span>(plugin) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="title function_">toArray</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 这一句很重要，这里的this，就是Vue，把他添加到args数组的第一个元素</span></span><br><span class="line">    args.<span class="title function_">unshift</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">// 判断我们传递进来的“uView”，也即这里的&quot;plugin&quot;内部是否有一个叫&quot;install&quot;的方法</span></span><br><span class="line">    <span class="comment">// 如果有，就执行我们的“uView，也即&quot;plugin.install&quot;方法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin.<span class="property">install</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      plugin.<span class="property">install</span>.<span class="title function_">apply</span>(plugin, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      plugin.<span class="title function_">apply</span>(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    installedPlugins.<span class="title function_">push</span>(plugin);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toArray</span>(<span class="params">list, start</span>) &#123;</span><br><span class="line">  start = start || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> i = list.<span class="property">length</span> - start;</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="keyword">new</span> <span class="title class_">Array</span>(i);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    ret[i] = list[i + start];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// uView内部</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里我们定义了一个叫&quot;install&quot;的变量，它的内容是一个方法(函数)</span></span><br><span class="line"><span class="comment">// 它的第一个参数是Vue对象(上面有提到传进来的第一个参数就是Vue)，我们把$u挂载到了Vue.prototype中</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">install</span> = (<span class="params">Vue</span>) =&gt; &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$u</span> = $u;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里我们导出一个对象，内部有一个叫&quot;install&quot;的方法，给上面说的Vue.use调用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从上面我们可以看出，uView把&quot;$u&quot;挂载到了Vue.prototype上，所以我们在项目的内部可以使用this.$u.xxx这种形式</span></span><br></pre></td></tr></table></figure><h2 id="webpack-的-plugins-是怎么实现的，自己有没有写过-plugins"><a href="#webpack-的-plugins-是怎么实现的，自己有没有写过-plugins" class="headerlink" title="webpack 的 plugins 是怎么实现的，自己有没有写过 plugins"></a>webpack 的 plugins 是怎么实现的，自己有没有写过 plugins</h2><h3 id="plugin-的作用"><a href="#plugin-的作用" class="headerlink" title="plugin 的作用"></a>plugin 的作用</h3><blockquote><p>Webpack 中的插件是用来扩展 Webpack 功能的函数，加入自定义的构建行为，使 webpack 可以执行更广泛的任务，拥有更强的构建能力，它们在 Webpack 构建过程中被执行。Webpack 所有的插件都需要在 webpack.config.js 的 plugins 节点中配置<br>插件的作用</p><ul><li>优化打包结果：例如压缩代码、去除无用代码等，提高输出文件的性能和效率</li><li>注入环境变量：通过插件可以在代码中注入环境变量，例如环境配置、接口地址等</li><li>自动生成页面：例如自动将 HTML、CSS 等文件转换为 JavaScript 模块，并且插入前端代码中</li><li>生成版本号：例如将代码文件生成唯一的版本号或哈希值，用于静态资源版本控制</li><li>引入第三方库：例如将 jQuery 等第三方库通过插件自动引入到项目中</li><li>拆分代码：将公共模块提取出来打包成单独的文件，避免重复打包</li><li>多页应用打包：通过插件可以实现多个 HTML 和 JavaScript 文件打包成多页应用</li></ul></blockquote><h3 id="plugin-的工作原理"><a href="#plugin-的工作原理" class="headerlink" title="plugin 的工作原理"></a>plugin 的工作原理</h3><blockquote><ul><li>每个 Plugin 都是一个 JavaScript 类，其中必须提供一个 apply()方法，以向 Webpack 编译器注册自己</li><li>在 Webpack 编译过程中，每个 Plugin 都会被调用，并且能够监听到相应的事件。例如，在编译过程中，Webpack 会产生一系列的事件，如 compile、emit、done 等，而多数的 Plugin 都会在这些事件被触发时执行相应的处理</li><li>每个 Plugin 都可以通过 Webpack 提供的 API，来操控和修改 Webpack 构建流程中的各种原材料，例如输入的文件、输出的代码和其他资源等</li></ul></blockquote><blockquote><p>通常，一个 Webpack Plugin 的工作包括以下几个步骤：</p><ul><li>获取 Webpack 编译器中的数据</li><li>在合适的时机，监听 Webpack 的事件，如 compile、emit、done 等</li><li>在响应 Webpack 事件时，对编译期间的资源进行处理，例如对 JavaScript、CSS 等进行压缩、合并、优化等</li><li>在处理过程结束后，向 Webpack 编译器返回相应的处理结果，以便 Webpack 最终生成相应的文件</li></ul></blockquote><h3 id="Plugin-构建对象-Compiler-和-Compilation"><a href="#Plugin-构建对象-Compiler-和-Compilation" class="headerlink" title="Plugin 构建对象 Compiler 和 Compilation"></a>Plugin 构建对象 Compiler 和 Compilation</h3><blockquote><p>在 webpack 中，plugin 是一种用于自定义构建过程的工具，可以通过给定的钩子函数来实现自定义的构建。plugin 构建对象是 plugin 实现的主要方式，它包含两个重要的对象：Compiler 和 Compilation</p><ul><li>Compiler：Compiler 是 webpack 的核心对象，负责将整个应用程序编译成一个静态资源，Compiler 在 Webpack 初始化时被创建，它包含了 Webpack 环境的配置参数、option 参数、Webpack 既有的钩子函数和一些其它方法，同时在 Webpack 启动时实例化，贯穿了整个 Webpack 打包的生命周期。Compiler 主要负责处理文件的监听、编译、打包等任务</li></ul><p>举例说明：</p><ul><li><p>webpack-dev-server 插件使用了内置的 Compiler 对象，它可以在内存中启动一个 HTTP 服务器，并且自动监听文件变化并重新编译，方便开发者进行开发和调试</p></li><li><p>clean-webpack-plugin 插件在编译之前清除目标目录中的文件，就是通过在 Compiler 对象中监听 webpack 工作流程的钩子函数来实现的。</p></li><li><p>Compilation：Compilation 是 Compiler 的一个属性，其中包含了当前的模块资源、编译生成的资源、变化的文件等。当 Webpack 以开发模式(webpack –watch or webpack-dev-server)运行时，每当检测到一个文件发生了改变，重新打包时，就会生成一个新的 Compilation 对象，Compilation 对象代表的是一次新的编译过程，它可以理解为是“循环体”中的一个“循环次数”，每次循环中处理的内容都是在这个对象中进行的</p></li></ul><p>举例说明：</p><ul><li>html-webpack-plugin 插件通过在 Compilation 对象中的 html-webpack-plugin-before-html-processing 钩子函数中添加生成的 html 文件内容来实现自动输出 html 文件</li><li>uglify-webpack-plugin 插件在 Webpack 打包时，通过在 Compilation 对象中的 optimize-chunk-assets 钩子函数中来进行 JS 代码的压缩和混淆处理</li></ul></blockquote><h3 id="自定义一个-plugin"><a href="#自定义一个-plugin" class="headerlink" title="自定义一个 plugin"></a>自定义一个 plugin</h3><blockquote><p>创建一个新的 JavaScript 文件，起名为 CustomPlugin.js，例如：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CustomPlugin.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomPlugin</span> &#123;</span><br><span class="line">  <span class="title function_">apply</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line">    compiler.<span class="property">hooks</span>.<span class="property">done</span>.<span class="title function_">tap</span>(<span class="string">&quot;CustomPlugin&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CustomPlugin executed!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">CustomPlugin</span>;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码创建了一个名为 CustomPlugin 的类，它的 apply 方法接收 compiler 对象参数，该方法通过 compiler 对象注册了一个 done 钩子，当编译完成时该钩子会触发</p></blockquote><blockquote><p>在 webpack 配置文件中引入自定义的 plugin，例如：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CustomPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;./CustomPlugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">CustomPlugin</span>()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码在 plugins 数组中实例化了 CustomPlugin 类，并传递给该类的实例作为参数</p></blockquote><blockquote><p>运行 webpack，CustomPlugin 将会被调用，例如：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ webpack</span><br><span class="line"><span class="title class_">Hash</span>: 1a0d8a10f39a2c8e1fae</span><br><span class="line"><span class="title class_">Version</span>: webpack <span class="number">4.43</span><span class="number">.0</span></span><br><span class="line"><span class="title class_">Time</span>: 205ms</span><br><span class="line"><span class="title class_">Built</span> <span class="attr">at</span>: <span class="number">06</span>/<span class="number">10</span>/<span class="number">2023</span> <span class="number">9</span>:<span class="number">13</span>:<span class="number">42</span> <span class="variable constant_">PM</span></span><br><span class="line">     <span class="title class_">Asset</span>       <span class="title class_">Size</span>  <span class="title class_">Chunks</span>             <span class="title class_">Chunk</span> <span class="title class_">Names</span></span><br><span class="line">index.<span class="property">html</span>  <span class="number">347</span> bytes          [emitted]</span><br><span class="line">   main.<span class="property">js</span>   <span class="number">4.8</span> <span class="title class_">KiB</span>    main  [emitted]  main</span><br><span class="line"><span class="title class_">Entrypoint</span> main = main.<span class="property">js</span></span><br><span class="line"><span class="title class_">CustomPlugin</span> executed!</span><br><span class="line">[./src/index.<span class="property">js</span>] <span class="number">47</span> bytes &#123;main&#125; [built]</span><br><span class="line">[./src/styles.<span class="property">css</span>] <span class="number">1.64</span> <span class="title class_">KiB</span> &#123;main&#125; [built]</span><br><span class="line">    + <span class="number">1</span> hidden <span class="variable language_">module</span></span><br></pre></td></tr></table></figure><p><strong>讲述更为详细的 csdn 地址：<a href="https://blog.csdn.net/weixin_49592546/article/details/108082824">https://blog.csdn.net/weixin_49592546/article/details/108082824</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（6-2）</title>
      <link href="/post/ca5d5fd0.html"/>
      <url>/post/ca5d5fd0.html</url>
      
        <content type="html"><![CDATA[<h2 id="CDN-加速"><a href="#CDN-加速" class="headerlink" title="CDN 加速"></a>CDN 加速</h2><pre><code>CDN 是一种用来分发内容的网络拓扑结构</code></pre><h3 id="CDN-相关的两个名词"><a href="#CDN-相关的两个名词" class="headerlink" title="CDN 相关的两个名词"></a>CDN 相关的两个名词</h3><blockquote><p>节点</p><ul><li>让用户使用 CDN 网络之前，CDN 提供商会在全国&#x2F;全球部署多个节点。这里的节点可以看做机房，或者服务器集群，专业的称呼是 PoP（Point-of-Presence，入网点）或者边缘服务器（Origin Server）</li></ul><p>源服务器：源服务器就是你部署网站的服务器，它为整个 CDN 网络提供初始内容</p><ul><li>不使用 CDN 的话，用户的每次请求都会到达你的源服务器。用户和源服务器之间的距离越远，数据包转发的次数就越多，等待页面加载的时间就越长。另外，数据包的每次转发都有可能受到网络拥堵的影响，进一步延迟网页加载时间</li></ul></blockquote><h3 id="使用了-CDN-之后的网络请求流程"><a href="#使用了-CDN-之后的网络请求流程" class="headerlink" title="使用了 CDN 之后的网络请求流程"></a>使用了 CDN 之后的网络请求流程</h3><blockquote><p>如果你的网站使用了 CDN 加速，当用户请求你的网站时，CDN 会找到离用户最近的节点，看看这个节点中是否缓存了用户想要的内容</p><ul><li>如果节点缓存了用户想要的内容，就直接发送给用户，不用再去请求源服务器</li><li>如果节点没有缓存用户想要的内容，那么节点会自动请求源服务器获取想要的内容，然后再发送给用户；同时，节点也会把从源服务器获取的内容缓存起来，下次有用户再请求相同内容时，节点会直接发送给用户，而不用再去请求源服务器</li></ul></blockquote><blockquote><p>只有在用户第一次请求内容时，节点才会访问源服务器，以后用户（包括新用户和老用户）再去请求相同内容，因为节点已经缓存了，所以会直接发送给用户，不会再去访问源服务器，此时源服务器就被“屏蔽”了，它不会知道有用户请求内容<br><strong>页面从源服务器拉取内容的过程，专业术语叫做反向代理（Reverse Proxy），Nginx 就是一个著名的反向代理服务器</strong></p></blockquote><h3 id="CDN-具体加速步骤"><a href="#CDN-具体加速步骤" class="headerlink" title="CDN 具体加速步骤"></a>CDN 具体加速步骤</h3><blockquote><p>如果某个用户想要访问某视频网站的视频点播内容，那么具体的 cdn 加速原理步骤是：</p><ul><li>当用户点击 APP 上的内容，APP 会根据 URL 地址去本地 DNS（域名解析系统）寻求 IP 地址解析</li><li>本地 DNS 系统会将域名的解析权交给 CDN 专用 DNS 服务器</li><li>CDN 专用 DNS 服务器，将 CDN 的全局负载均衡设备 IP 地址返回用户</li><li>用户向 CDN 的负载均衡设备发起内容 URL 访问请求</li><li>CDN 负载均衡设备根据用户 IP 地址，以及用户请求的内容 URL，选择一台用户所属区域的缓存服务器</li><li>负载均衡设备告诉用户这台缓存服务器的 IP 地址，让用户向所选择的缓存服务器发起请求</li><li>用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端</li><li>如果这台缓存服务器上并没有用户想要的内容，那么这台缓存服务器就要网站的源服务器请求内容</li><li>源服务器返回内容给缓存服务器，缓存服务器发给用户，并根据用户自定义的缓存策略，判断要不要把内容缓存到缓存服务器上</li></ul><p><em>总之，CDN 就是采用更多的缓存服务器（CDN 边缘节点），布放在用户访问相对集中的地区或网络中。当用户访问网站时，利用全局负载技术，将用户的访问指向距离最近的缓存服务器上，由缓存服务器响应用户请求</em></p></blockquote><h3 id="CDN-加速的好处"><a href="#CDN-加速的好处" class="headerlink" title="CDN 加速的好处"></a>CDN 加速的好处</h3><blockquote><ul><li>极大提高网站访问速度</li><li>极大降低服务器压力</li><li>让全国&#x2F;全球用户都能访问你的网站</li><li>隐藏真实的服务器</li><li>避免网站服务器遭受黑客攻击</li><li>防盗链</li><li>降低网络带宽成本</li><li>负载均衡，流量低谷不浪费资源，流量高峰轻松应对</li></ul></blockquote><h3 id="CDN-包含三个方面的内容"><a href="#CDN-包含三个方面的内容" class="headerlink" title="CDN 包含三个方面的内容"></a>CDN 包含三个方面的内容</h3><blockquote><p>内容</p><ul><li>CDN 是用来处理内容的。什么内容？和网站有关的内容，这包括动态&#x2F;静态网页、CSS、JavaScript、图像、视频、音频、可下载的文件等</li></ul><p>分发</p><ul><li>CDN 会将内容分发到节点。如何分发？节点需要内容时自动从源服务器拉取，也即反向代理</li></ul><p>网络</p><ul><li>从 CDN 内部看，CDN 是一种网络拓扑结构，或者说是一种私有网络&#x2F;局域网。用户只和节点交换数据，并不知道 CDN 的内部网络结构，只有搭建 CDN 的机构才知道</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（7-5）</title>
      <link href="/post/9cd6b4cc.html"/>
      <url>/post/9cd6b4cc.html</url>
      
        <content type="html"><![CDATA[<h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><h3 id="什么是-websocket"><a href="#什么是-websocket" class="headerlink" title="什么是 websocket"></a>什么是 websocket</h3><blockquote><ul><li>WebSocket 是 HTML5 下一种新的协议（websocket 协议本质上是一个基于 tcp 的协议）</li><li>它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯的目的</li><li>Websocket 是一个持久化的协议</li></ul></blockquote><h3 id="websocket-的原理"><a href="#websocket-的原理" class="headerlink" title="websocket 的原理"></a>websocket 的原理</h3><blockquote><ul><li>websocket 约定了一个通信的规范，通过一个握手的机制，客户端和服务器之间能建立一个类似 tcp 的连接，从而方便它们之间的通信</li><li>在 websocket 出现之前，web 交互一般是基于 http 协议的短连接或者长连接</li><li>websocket 是一种全新的协议，不属于 http 无状态协议，协议名为”ws”</li></ul></blockquote><h3 id="websocket-与-http-的关系"><a href="#websocket-与-http-的关系" class="headerlink" title="websocket 与 http 的关系"></a>websocket 与 http 的关系</h3><blockquote><p>相同点</p><ul><li>都是基于 tcp 的，都是可靠性传输协议</li><li>都是应用层协议</li></ul></blockquote><blockquote><p>不同点</p><ul><li>WebSocket 是双向通信协议，模拟 Socket 协议，可以双向发送或接受信息</li><li>HTTP 是单向的</li><li>WebSocket 是需要浏览器和服务器握手进行建立连接的</li><li>而 http 是浏览器发起向服务器的连接，服务器预先并不知道这个连接</li></ul></blockquote><h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><blockquote><p>WebSocket 在建立握手时，数据是通过 HTTP 传输的。但是建立之后，在真正传输时候是不需要 HTTP 协议的</p></blockquote><h3 id="整个过程"><a href="#整个过程" class="headerlink" title="整个过程"></a>整个过程</h3><blockquote><ul><li>首先，客户端发起 http 请求，经过 3 次握手后，建立起 TCP 连接；http 请求里存放 WebSocket 支持的版本号等信息，如：Upgrade、Connection、WebSocket-Version 等；</li><li>然后，服务器收到客户端的握手请求后，同样采用 HTTP 协议回馈数据；</li><li>最后，客户端收到连接成功的消息后，开始借助于 TCP 传输信道进行全双工通信</li></ul></blockquote><h3 id="使用-js-创建-websocket-的基本流程"><a href="#使用-js-创建-websocket-的基本流程" class="headerlink" title="使用 js 创建 websocket 的基本流程"></a>使用 js 创建 websocket 的基本流程</h3><blockquote><ul><li>通过 JavaScript 中的 WebSocket 构造函数，创建 WebSocket 对象</li><li>监听 WebSocket 的事件：open、message 和 close。当 WebSocket 连接成功后，触发 open 事件；当接收到服务端发送的消息时，触发 message 事件；当 WebSocket 连接关闭时，触发 close 事件。通过监听这三个事件，我们可以完成双向通信</li><li>通过 WebSocket 对象的 send()方法发送消息到服务端</li><li>当接收到服务端发送的消息时，触发 message 事件。可以通过监听这个事件，将接收到的消息显示在页面上</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:3000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// WebSocket连接成功事件</span></span><br><span class="line">ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;open&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;WebSocket连接成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送消息到服务端</span></span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&quot;Hello Server!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到服务端发送消息事件</span></span><br><span class="line">ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;接收到服务端发送的消息：&quot;</span>, event.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> message = event.<span class="property">data</span>;</span><br><span class="line">  <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  li.<span class="property">innerText</span> = message;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#messages&quot;</span>).<span class="title function_">appendChild</span>(li);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// WebSocket连接关闭事件</span></span><br><span class="line">ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;close&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;WebSocket连接关闭！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><pre><code>前后端使用websocket的完整示例</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket简单聊天<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:3000&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;open&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;WebSocket连接成功！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将接收到的消息显示在页面上</span></span></span><br><span class="line"><span class="language-javascript">      ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> message = event.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        li.<span class="property">innerText</span> = message;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#messages&quot;</span>).<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 发送消息到服务端</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      form.<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 阻止表单默认跳转行为</span></span></span><br><span class="line"><span class="language-javascript">        event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> message = input.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 清空输入框</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        ws.<span class="title function_">send</span>(message);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&quot;ws&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocket</span>.<span class="title class_">Server</span>(&#123; <span class="attr">port</span>: <span class="number">3000</span> &#125;);</span><br><span class="line"></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;WebSocket连接成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接收到客户端发送的消息</span></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;接收到客户端发送的消息：&quot;</span>, message);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将消息广播给所有客户端</span></span><br><span class="line">    wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">        client.<span class="title function_">send</span>(message);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// WebSocket连接关闭</span></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;WebSocket连接关闭！&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（7-4）</title>
      <link href="/post/246ad3a9.html"/>
      <url>/post/246ad3a9.html</url>
      
        <content type="html"><![CDATA[<h2 id="js-设计模式用过哪些"><a href="#js-设计模式用过哪些" class="headerlink" title="js 设计模式用过哪些"></a>js 设计模式用过哪些</h2><blockquote><p>设计模式（Design Pattern）是一套被反复使用、多数人知晓的、 经过分类的、 代码设计经验的总结。总结起来就是解决问题的套路规范。模式的另一种解释就是一个我们如何解决问题的模板 - 那些可以在许多不同的情况里使用的模板</p></blockquote><blockquote><p>五大设计原则</p><ul><li>S（SRP）-单一职责原则：一个程序只做好一件事。如果功能过于复杂就拆分开，每个部分保持独立</li><li>O（LKP）-开放封闭原则：对扩展开放，对修改封闭。增加需求时，扩展新代码，而不是修改已有代码（这是软件设计终极目标）</li><li>L（LSP）-李氏置换原则：1）、子类覆盖父类。凡是父类能够出现的地方，子类也能够出现。Js 中使用较少（因为 js 是弱类型语言，继承使用较少）</li><li>I（ISP）-接口独立原则：1）、保持接口的单一独立，避免出现胖接口。（js 中没有接口，typescript 除外）使用较少。类似于单一职责原则，这里更关注的是接口</li><li>D（DIP）-依赖倒置原则：1）、面向接口编程，依赖于抽象，而不依赖于具体。使用方法只关注接口，而不关注具体类的实现。Js 中使用较少（没有接口，弱类型）</li></ul></blockquote><blockquote><p>1、工厂模式：工厂模式其实就是对 new（实例化）的一个封装，返回具体的一个实例<br>工厂模式是构造者和创建者分离的，所以符合开放封闭原则<br>使用场景：</p><ul><li>jquery 中的$(“div”)</li><li>React.createElement</li><li>vue 中的异步组件</li></ul><p>2、单例模式：1）、系统中被唯一使用 2）、一个类只有一个实例。如果是单例模式，则使用&#x3D;&#x3D;&#x3D;（强相等）必须为 true，要不然就不是单例模式。符合单一职责设计原则<br>使用场景：</p><ul><li>登录框</li><li>购物车</li><li>jquery 只有一个$</li><li>vuex 和 redux 中 store</li></ul><p>3、适配器模式：旧接口格式和使用者不兼容，所以需要中间加一个适配器转换接口，将旧接口与使用者分离。符合开放封闭原则<br>使用场景：</p><ul><li>自己封装的接口，和因为需要，需要改成的接口</li><li>vue 中的 computed，对展示的 message 做处理，也就是相当于适配器</li></ul><p>4、装饰器模式：为对象添加新功能，不改变其原有的结构和功能，将现有对象和装饰器进行分离，二者独立存在，符合开放封闭原则</p><p>5、代理模式：使用者无权访问目标对象，中间加代理，通过代理做授权和控制。代理类和目标类分离，隔离开目标类和使用者，符合开放封闭原则<br>使用场景：</p><ul><li>科学上网（翻墙）</li><li>网页事件代理</li><li>jquery 中$.proxy，遇到 this 指向问题时，除了外面赋值 this 的变量，然后再在里面使用外，还可以使用 proxy 代理</li><li>ES6 中的 proxy</li></ul><p>6、外观模式：为子系统中的一组接口提供了一个高层接口，使用者使用这个高层接口<br>7、观察者模式：发布&amp;订阅、一对多（也可以一对一）主题和观察者分离，不是主动触发而是被动监听，两者解耦，符合开放封闭原则<br>使用场景：</p><ul><li>网页事件绑定</li><li>Promise</li><li>jQuery callbacks</li><li>nodejs 自定义事件</li></ul><p>8、迭代器模式：顺序访问一个集合，使用者无需知道集合的内部结构（封装）<br>9、状态模式：一个对象有状态变化，每次状态变化都会触发一个逻辑，不能总是用 if else 控制。状态对象和主题对象分离，状态的变化逻辑单独处理，符合开放封闭原则</p></blockquote><p><strong>上述模式在 js 中使用还行，以下的这些模式在前端中不常用</strong></p><blockquote><p>10、原型模式：clone 自己，生成一个新对象，java 有默认的 clone 接口，不用自己实现下面的 getName 是需要在 prototype 中实现的<br>使用场景：</p><ul><li>js 中 Object.create</li></ul><p>11、桥接模式：用于把抽象化与实现化解耦，使得二者可以独立变化抽象和实现分离，符合开放封闭原则<br>12、组合模式：生成树形结构，表示“整体-部分”关系，让整体和部分都有一致二点操作方式。整体和单个节点的操作是一致的，整体和单个节点的数据结构也保持一致。将整体和单个节点的操作抽象出来，符合开放封闭原则<br>13、享元模式：共享内存（主要考虑内存，而非效率），相同的数据，共同使用。将相同的部分抽象出来，符合开放封闭原则<br>14、策略模式：不同策略分开处理，避免出现大量 if else 或者 switch case 不同策略，分开处理，而不是混合在一起，符合开放封闭原则<br>15、模板方法模式：如果一件事情需要几步处理，那就定义一个函数将需要的几步处理函数封装在里面，也就是只提供一个供外面使用<br>16、职责链模式：一步操作可能分为多个职责角色来完成，把这些角色都分开，然后再用一个链串起来，将发起者和各个处理者（处理者之间）隔离。发起者和处理者进行隔离，符合开放封闭原则<br>使用场景：</p><ul><li>jQuery 的链式操作</li><li>Promise.then 的链式操作</li></ul><p>17、命令模式：命令对象与执行对象分开，符合开放封闭原则<br>18、备忘录模式：随时记录一个对象的状态变化，随时可以恢复之前的某一个状态（如撤销功能）状态对象与使用者分开，解耦，符合开放封闭原则<br>19、中介者模式：将各关联对象通过中介者隔离，符合开放封闭原则<br>20、访问者模式：将数据结构和数据操作进行分离<br>21、 解释器模式：描述语言语法如何定义，如何解释和编译</p></blockquote><blockquote><p>对比<br>代理模式 VS 适配器模式：</p><ul><li>适配器模式：提供一个不同的接口（如不同版本的插头）</li><li>代理模式：提供一摸一样的接口（原本无权使用，通过代理使用）</li></ul><p>代理模式 VS 装饰器模式</p><ul><li>装饰器模式：扩展功能，原有功能不变且可直接使用</li><li>代理模式：显示原有功能，但是是经过限制或者阉割之后的</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（7-3）</title>
      <link href="/post/b9bdeb10.html"/>
      <url>/post/b9bdeb10.html</url>
      
        <content type="html"><![CDATA[<h2 id="map-中的键值可以是哪些类型"><a href="#map-中的键值可以是哪些类型" class="headerlink" title="map 中的键值可以是哪些类型"></a>map 中的键值可以是哪些类型</h2><pre><code>任意类型</code></pre><h2 id="webpack-打包以及常用的配置"><a href="#webpack-打包以及常用的配置" class="headerlink" title="webpack 打包以及常用的配置"></a>webpack 打包以及常用的配置</h2><pre><code>webpack是前端的打包工具</code></pre><blockquote><p>打包的工作内容是什么</p><ul><li>扫描项目，生成整个项目所有模块的依赖关系，根据配置对模块进行合并，生成一个单独的文件。修改 html 文件，让 html 文件引用生成后的文件</li><li>将浏览器无法直接识别的（less、sass、ts）文件，转换成浏览器可以实现的内容</li><li>将浏览器暂时无法支持的 JS 新的语法转换成浏览器可以支持的语法</li></ul></blockquote><blockquote><p>webpack 有两种打包模式</p><ul><li>(development)开发模式 :不会对打包生成的文件进行代码压缩和性能优化 打包速度快，适用于开发阶段使用</li><li>(production)生产模式: 会对打包生成的文件进行代码压缩和性能优化 打包速度很慢，仅适合在项目发布阶段使用不设置默认为 production 模式</li></ul></blockquote><blockquote><p>入口文件配置</p><ul><li>单一入口</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/mian.js&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><ul><li>多个入口</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: [<span class="string">&quot;./src/main.js&quot;</span>, <span class="string">&quot;./src/bus.js&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>出口文件配置</p><ul><li>单个出口文件</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./scr/mian.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;build.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><ul><li>多个出口文件</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: [<span class="string">&quot;./src/main.js&quot;</span>, <span class="string">&quot;./src/bus.js&quot;</span>],</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>module 配置：当 webpack 遇到不能解析的模块时，webpack 会找到 module 对象下面的 rules，去匹配对应的规则。如果有对应的 loader 匹配时，我们就使用对应的规则解析</p><ul><li>示例：当我们直接导入一个文字作为变量时，这时候是不能被浏览器直接解析的，我们可以使用 raw-loader</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">entry</span>:<span class="string">&#x27;./src/mian.js&#x27;</span>,</span><br><span class="line"><span class="attr">output</span>:&#123;</span><br><span class="line"><span class="attr">filename</span>:<span class="string">&#x27;build.js&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;dist&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">module</span>:&#123;</span><br><span class="line"><span class="comment">// 使用raw-loader，用来处理txt文本文件</span></span><br><span class="line"><span class="attr">rules</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">test</span>:<span class="regexp">/\.txt$/</span>,</span><br><span class="line"><span class="attr">use</span>:<span class="string">&#x27;raw-loader&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 使用file-loader,用来处理图片文件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">test</span>:<span class="string">&#x27;/\.(png|jpg|jpe?g)$/&#x27;</span>,</span><br><span class="line"><span class="attr">use</span>:&#123;</span><br><span class="line"><span class="attr">loader</span>:<span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line"><span class="attr">options</span>:&#123;</span><br><span class="line"><span class="comment">// 打包后的文件名</span></span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;[name]_[contenthash].[ext]&#x27;</span>,</span><br><span class="line"><span class="comment">// 打包后存放目录，相对于打包文件夹dist</span></span><br><span class="line"><span class="attr">outputPath</span>:<span class="string">&#x27;./images&#x27;</span>,</span><br><span class="line"><span class="comment">// 打包后引入文件URL,相对于config文件</span></span><br><span class="line"><span class="attr">publicPath</span>:<span class="string">&#x27;./dist/iamges&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line"><span class="comment">// 同一类loader中执行顺序，先下后上，先右后左。先执行css-loader-&gt;style-loader</span></span><br><span class="line"><span class="attr">use</span>:[</span><br><span class="line"><span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">loader</span>:<span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line"><span class="attr">options</span>:&#123;</span><br><span class="line"><span class="comment">// 是否启用URL</span></span><br><span class="line"><span class="attr">url</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 是否启用@import</span></span><br><span class="line"><span class="keyword">import</span>：<span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 是否启用sourceMap</span></span><br><span class="line"><span class="attr">sourceMap</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>插件 - html-webpack-plugin：该插件可以在每次打包时都创建一个用于测试用的 html 文件</p><ul><li>在默认配置下创建的 index.html 文件的内容是由 html-webpack-html 自动生成的。里面除了引入了 js 外，最基本的 html 结构都没有</li><li>可以为 html-webpack-html 传入一个参数，让 html-webpack-html 插件，参照某个文件的内容生成 html 文件</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack配置</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 插件配置</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// ---------------- 传入配置参数</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// js插入位置</span></span><br><span class="line">            <span class="attr">inject</span>: <span class="string">&#x27;body&#x27;</span>,</span><br><span class="line">            <span class="comment">// 生成的html文件名</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">            <span class="comment">// 指定参照这个html文件进行生成</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./public/index.html&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">​</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打包不同类型文件，要使用不同的 loader，loader 的作用：</p><ul><li>读取文件内容</li><li>对文件内容进行特定的处理</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack配置</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="comment">// 打包模式</span></span><br><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line"><span class="comment">// 配置打包入口文件</span></span><br><span class="line"><span class="attr">entry</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;index.js&#x27;</span>),</span><br><span class="line"><span class="comment">// 配置打包输出位置，及文件名</span></span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line"><span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line"><span class="comment">// 输出文件名</span></span><br><span class="line"><span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 扩展文件加载模块 - css模块加</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line"><span class="comment">// 由于可以加载多种文件，每种文件对应一种loader，所以是数组</span></span><br><span class="line"><span class="attr">rules</span>: [</span><br><span class="line"><span class="comment">// 由于是多种文件，所以使用扩展名进行区分，再应用不同的loader</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 正则判断文件类型</span></span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line"><span class="comment">// css-loader是将css代码从css文件中读取到内存中，而style-loader是将读取到的css代码设置到index.html文件的style标签内</span></span><br><span class="line"><span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 判断less文件</span></span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.less$/i</span>,</span><br><span class="line"><span class="comment">// less使用到的loader</span></span><br><span class="line"><span class="attr">use</span>: [</span><br><span class="line"><span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line"><span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line"><span class="string">&quot;less-loader&quot;</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 webpacke5.0 中无需下载安装图片对应的 loader(模块)，因为内嵌了对象图片资源处理的模块，可以直接使用内置的资源模块进行处理(asset&#x2F;modules) 内置了四种处理图片的资源模块</p><ul><li>asset&#x2F;resource：将图片文件单独打包成一个文件，保存到打包目录，再使用 url(file:&#x2F;&#x2F;&#x2F;d:&#x2F;xxx&#x2F;xxx) 就相当于将原图片，复制到了另个新的位置，改了名，url 再指向新的位置即可。 之前是通过 file-loader 实现</li><li>asset&#x2F;inline：将图片读取成 base64 格式，使用时通过 url(data:image&#x2F;png;base64,xxxxx)进行引用 之前是通过 url-loader 实现</li><li>asset&#x2F;source：主要用于字体文件 通过 data:font&#x2F;woff2;base64,xxxxxoxxox 之前是通过 raw-loader 实现</li><li>asset：在 asset&#x2F;resource 与 asset&#x2F;inline 之间自动选择，之前是通过 url-loader，并配置资源体积限制实现</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack配置</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 扩展文件加载模块 - css模块加</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 由于可以加载多种文件，每种文件对应一种loader，所以是数组</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 由于是多种文件，所以使用扩展名进行区分，再应用不同的loader</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 正则判断文件类型</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        <span class="comment">// 这种类型文件使用以下loader</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 判断less文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 加载图片资料模板</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|jpeg|gif|svg)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 加载字体文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(eot|ttf|otf|woff2)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>目前为此，每次调整配置，都需要手动重新打包一次。为了解决这个麻烦，webpack 内置 watch 模块，通过配置可以实现自动打包</p><ul><li><code>&quot;script&quot;:&#123; &quot;watch&quot;:&quot;webpack --config webpack.config.js&quot;&#125;</code></li></ul></blockquote><blockquote><p>但是 watch 仍然需要手动打开 index.html 页面，重新打包后，html 页面也不会自动刷新，所以我们会使用 webpack-dev-serve 这个插件来代替这种模式<br>webpack-dev-server，还会附带了一个很有用的功能，HMR(hot module replacement) 传送门：模块热替换 在程序运行的过程(不重新启动服务器)，动态的添加，替换删除某个模块，而无需重新加载整个页面。 例如：index.less 内容修改了，只对这个 less 模块重新加载，不影响其他模块</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack配置</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// webpack-dev-server配置</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 配置站点根目录，默认为输出位置</span></span><br><span class="line">    <span class="attr">static</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="comment">// 设置端口号</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">    <span class="comment">// 自动打开浏览器，访问index.html</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 热替换配置，true启用，false禁用，默认为true</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>打包后的代码与原代码的所在的文件名，位置都不相同了，如果出错，可能会很难追踪到错误和警告在源代码中的原始位置。可以使用 source map，source map 可以将错误在源代码中的显示给我们。<strong>只在开发阶段使用，上线一定要移除</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack配置</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 配置source-map</span></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="for-in-和-for-of-的区别"><a href="#for-in-和-for-of-的区别" class="headerlink" title="for..in 和 for.. of 的区别"></a>for..in 和 for.. of 的区别</h2><blockquote><ul><li>遍历对象 for..in 可以，for..of 不可以</li><li>遍历 Map、Set for..of 可以，for..in 不可以</li><li>遍历 generator for..of 可以，for..in 不可以</li><li>for..in 用于可枚举数据，如对象、数组、字符串，得到 key</li><li>for..of 用于可迭代数据，如数组、字符串、Map、Set，得到 value</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（7-2）</title>
      <link href="/post/1018c75.html"/>
      <url>/post/1018c75.html</url>
      
        <content type="html"><![CDATA[<h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><blockquote><p>在 vue 中，渲染普通文本有 2 种方式：<code>&#123;&#123;&#125;&#125;</code>与 v-text。但是，需要注意的是，在使用<code>&#123;&#123;&#125;&#125;</code>展示或更新页面数据时：当网速比较慢时，会出现一个不好的过度现象，会让用户先看到我们的表达式（上面页面中的<code>&#123;&#123;msg&#125;&#125;</code>），然后才看到 data 中的值（欢迎 Vue!）——-&gt;即所谓的闪烁问题！</p></blockquote><blockquote><p>针对上述问题的解决办法：</p><ul><li>v-text 默认 v-text 是没有闪烁问题，<code>&#123;&#123;&#125;&#125;</code>存在闪烁的问题。v-text 会覆盖掉元素中原本的内容，但是<code>&#123;&#123;&#125;&#125;</code>只会替换自己的这个占位符</li><li>使用 v-cloak 指令，然后为其设置 css 样式 display:none; 即上述代码可修改为</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">msg</span>: <span class="string">&#x27;欢迎Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明：但有时添加完毕后变量仍会显示（即闪烁问题没解决），这是怎么回事呢？原来是 v-cloak 的 display 属性被优先级别高的样式覆盖所导致，所以最好再添加一个 !important ，将其优先级设置为最高，防止被其他优先级高的 dispaly:none 样式所覆盖</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue-自定义指令-与-指令的生命周期"><a href="#vue-自定义指令-与-指令的生命周期" class="headerlink" title="vue 自定义指令 与 指令的生命周期"></a>vue 自定义指令 与 指令的生命周期</h2><pre><code>这里定义一个名为appendText的指令，使用时要像这样去用：v-append-text</code></pre><blockquote><p>指令的周期： 5 个 (bind、inserted、update、componentUpdated、unbind)</p><ul><li>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</li><li>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</li><li>update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)</li><li>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用</li><li>unbind：只调用一次，指令与元素解绑时调用</li></ul></blockquote><h3 id="注册全局指令——Vue-directive-方法"><a href="#注册全局指令——Vue-directive-方法" class="headerlink" title="注册全局指令——Vue.directive() 方法"></a>注册全局指令——Vue.directive() 方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">// 注册一个全局自定义指令 `v-focus`</span><br><span class="line">Vue.directive(&quot;focus&quot;, &#123;</span><br><span class="line">  // 当被绑定的元素插入到 DOM 中时……</span><br><span class="line">  inserted: function (el) &#123;</span><br><span class="line">    // 聚焦元素</span><br><span class="line">    el.focus();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="注册局部指令——directives-属性"><a href="#注册局部指令——directives-属性" class="headerlink" title="注册局部指令——directives 属性"></a>注册局部指令——directives 属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="attr">directives</span>: &#123;</span><br><span class="line">        <span class="attr">focus</span>: &#123;</span><br><span class="line">            <span class="comment">// 指令的定义</span></span><br><span class="line">            <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">                el.<span class="title function_">focus</span>()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义指令的案例"><a href="#自定义指令的案例" class="headerlink" title="自定义指令的案例"></a>自定义指令的案例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">// 注册一个局部的自定义指令v-append-text：不替换原来的内容，直接插入其后。</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;show = !show&quot;&gt;&#123;&#123; show ? &quot;销毁&quot; : &quot;插入&quot; &#125;&#125;&lt;/button&gt;</span><br><span class="line">    &lt;button v-if=&quot;show&quot; v-append-text=&quot;`hello $&#123;number&#125;`&quot; @click=&quot;number++&quot;&gt;</span><br><span class="line">      按钮</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  directives: &#123;</span><br><span class="line">    // 这里定义一个名为appendText的指令，使用时要像这样去用：v-append-text</span><br><span class="line">    appendText: &#123;</span><br><span class="line">      /**</span><br><span class="line">       * 指令的生命周期 (bind、inserted、update、componentUpdated和unbind)</span><br><span class="line">       **/</span><br><span class="line">      bind() &#123;</span><br><span class="line">        console.log(&quot;bind&quot;);</span><br><span class="line">      &#125;,</span><br><span class="line">      inserted(el, binding) &#123;</span><br><span class="line">        el.appendChild(document.createTextNode(binding.value));</span><br><span class="line">        console.log(&quot;inserted&quot;, el, binding);</span><br><span class="line">      &#125;,</span><br><span class="line">      update() &#123;</span><br><span class="line">        console.log(&quot;update&quot;);</span><br><span class="line">      &#125;,</span><br><span class="line">      componentUpdated(el, binding) &#123;</span><br><span class="line">        el.removeChild(el.childNodes[el.childNodes.length - 1]);</span><br><span class="line">        el.appendChild(document.createTextNode(binding.value));</span><br><span class="line">        console.log(&quot;componentUpdated&quot;);</span><br><span class="line">      &#125;,</span><br><span class="line">      unbind() &#123;</span><br><span class="line">        console.log(&quot;unbind&quot;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      number: 1,</span><br><span class="line">      show: true,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（7-1）</title>
      <link href="/post/13b4239b.html"/>
      <url>/post/13b4239b.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>虽然前两天面试成功了一个，好像是个国企，在广州，但是工资 3000 多，说实话太少了，一周五天，一个月 22 天左右，相当于一天 150，少的可怜。所以我又接着面了几个。有一个大厂我很想进，面试了，口头和共享屏幕答算法题我都写出来了，但是他还是觉得我六个月实习太短（我很无语啊，实习生就算给转正机会，半年也不短了吧，大三或者研二难道有人愿意冒着毕不了业的风险给你实习一年？再说了，真实习一年，你也给了转正机会，那毕不了业你还愿意要吗）。然后我又面试了几个。</p><h2 id="vue-中兄弟组件通信的方式"><a href="#vue-中兄弟组件通信的方式" class="headerlink" title="vue 中兄弟组件通信的方式"></a>vue 中兄弟组件通信的方式</h2><pre><code>Vue 组件间通信主要指以下 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信</code></pre><blockquote><ul><li>props &#x2F; $emit 适用 父子组件通信</li><li>ref 与 $parent &#x2F; $children 适用 父子组件通信，children是一个数组，因为子组件可能有多个，通过parent和$children 可以直接修改父子组件的 data。示例：this.$children[0].childMsg &#x3D; ‘changed’</li><li>EventBus ($emit&#x2F;$on) 适用于 父子、隔代、兄弟组件通信。这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件：使用 EventBus 我们需要实例化一个空的不具备 DOM 的 Vue，为方便使用，可以把其挂在项目将实例的 Vue 的原型上</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`main.js`</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$EventBus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"></span><br><span class="line"><span class="string">`CompnentA`</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">methods</span>:&#123;</span><br><span class="line">     <span class="title function_">testA</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">$EventBus</span>.$emit(<span class="string">&#x27;cmaFunction&#x27;</span>,params)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`ComponentB`</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">$EventBus</span>.$on(<span class="string">&#x27;cmaFunction&#x27;</span>,<span class="function">(<span class="params">params</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(params)</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>$attrs&#x2F;$listeners 适用于 隔代组件通信。$attrs包含了父作用域中不作为prop被识别(且获取)的特性绑定(class和style除外),并且可以通过v−bind&#x3D;”$attrs”继续向下传递,通常配合 inheritAttrs 选项一起使用(inheritAttrs&#x3D;true 的时候，传递的属性会加到子组件的根元素上)。listeners：包含了父作用域中的(不含.native 修饰器的)v−on 事件监听器。它可以通过 v−on&#x3D;”listeners” 传入内部组件</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`Parent.vue`</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Child</span> name=<span class="string">&quot;jack&quot;</span> age=<span class="string">&quot;18&quot;</span> weight=<span class="string">&quot;135&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">`Child.vue`</span></span><br><span class="line"></span><br><span class="line">/可以将$attrs继续传向后代组件</span><br><span class="line">&lt;<span class="title class_">GrandSon</span> v-bind=<span class="string">&quot;$attrs&quot;</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">props</span>:[<span class="string">&#x27;weight&#x27;</span>],</span><br><span class="line">   <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="comment">//这里&#x27;weight&#x27;已经被作为props识别了，所以¥attrs上不再包含weight属性</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$attrs</span>) <span class="comment">// &#123;name:&#x27;jack&#x27;,age:&#x27;18&#x27;&#125;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`GrandSon.vue`</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$attrs</span>)  <span class="comment">//&#123;name:&#x27;jack&#x27;,age:&#x27;18&#x27;&#125;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>provide &#x2F; inject 适用于 隔代组件通信</li><li>Vuex 适用于 父子、隔代、兄弟组件通信</li></ul></blockquote><h2 id="vue-指令用过哪些"><a href="#vue-指令用过哪些" class="headerlink" title="vue 指令用过哪些"></a>vue 指令用过哪些</h2><blockquote><ul><li>v-text 指令，会把该元素下面的所有内容替换掉</li><li>v-model 指令，用于表单输入</li><li>v-on 指令，用于事件绑定</li><li>v-bind 指令，用于动态绑定一个值和传入变量</li><li>v-once 指令，事件只能用一次，不管点击几次，履行一次以后都不会再履行</li><li>v-html 指令，会将 span 的内容替换成 rawHtml 的属性值，直接作为 HTML 代码解析</li><li>v-for 指令，与 HTML 标签结合使用，用于数据的遍历摆放</li><li>v-if 指令，用来进行条件判断的，直接操作 dom</li><li>v-else 指令，用来进行条件判断的，与 v-if 指令连用，意义为条件不成立时履行</li><li>v-show 指令，根据真假切换元素的显示状态</li><li>v-slot 插槽</li></ul></blockquote><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="linux-目录结构"><a href="#linux-目录结构" class="headerlink" title="linux 目录结构"></a>linux 目录结构</h3><table><thead><tr><th align="center">目录</th><th align="left">内容</th></tr></thead><tbody><tr><td align="center">&#x2F;bin</td><td align="left">bin 是 Binary 的缩写, 这个目录存放着最经常使用的命令，由系统、系统管理员和用户共享</td></tr><tr><td align="center">&#x2F;boot</td><td align="left">这里存放的是启动 Linux 时使用的一些核心文件，包括一些链接文件以及镜像文件</td></tr><tr><td align="center">&#x2F;dev</td><td align="left">dev 是 Device(设备)的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的</td></tr><tr><td align="center">&#x2F;etc</td><td align="left">大多数重要的系统配置文件都在&#x2F;etc 目录下，该目录包含的数据类似于 Windows 控制面板中的数据</td></tr><tr><td align="center">&#x2F;home</td><td align="left">普通用户的家目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</td></tr><tr><td align="center">&#x2F;lib</td><td align="left">b 库文件，包括系统和用户所需要的各种程序的文件</td></tr><tr><td align="center">&#x2F;lost+found</td><td align="left">每个分区在其上目录中都有一个 lost+found。故障期间保存的文件在这里</td></tr><tr><td align="center">&#x2F;media</td><td align="left">linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下</td></tr><tr><td align="center">&#x2F;mnt</td><td align="left">外部文件系统的标准挂载点，例如 CD-ROM(光驱)或数码相机</td></tr><tr><td align="center">&#x2F;opt</td><td align="left">通常包含额外的和第三方软件。这是给主机额外安装的大型应用程序所放置的目录</td></tr><tr><td align="center">&#x2F;proc</td><td align="left">包含有关系统资源信息的虚拟文件系统。这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里, 我们也可以直接修改里面的某些文件</td></tr><tr><td align="center">&#x2F;root</td><td align="left">该目录为系统管理员，也称作超级权限者的用户家目录。注意根目录 &#x2F; 和根用户的主目录 &#x2F;root 之间的区别</td></tr><tr><td align="center">&#x2F;sbin</td><td align="left">s 就是 Super User 的意思，这里存放的是系统管理员 root 使用的系统管理程序</td></tr><tr><td align="center">&#x2F;tmp</td><td align="left">系统使用的临时空间，在重新启动时清理，所以不要使用它来保存任何工作!该目录对于所有用户都可以访问，不要把重要文件放置于该目录</td></tr><tr><td align="center">&#x2F;usr</td><td align="left">这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与 windows 下的 program files 目录</td></tr><tr><td align="center">&#x2F;var</td><td align="left">用户创建的所有可变文件和临时文件的存储空间，如日志文件(一般是&#x2F;var&#x2F;log)、邮件队列、打印假脱机程序区、从 Internet 下载的文件的临时存储空间，或在刻录 CD 之前保存它的映像。</td></tr></tbody></table><h3 id="linux-基本命令操作"><a href="#linux-基本命令操作" class="headerlink" title="linux 基本命令操作"></a>linux 基本命令操作</h3><h4 id="目录操作命令-cd、pwd、ls、mkdir、rmdir、du"><a href="#目录操作命令-cd、pwd、ls、mkdir、rmdir、du" class="headerlink" title="目录操作命令 cd、pwd、ls、mkdir、rmdir、du"></a>目录操作命令 cd、pwd、ls、mkdir、rmdir、du</h4><blockquote><ul><li>cd 切换到另一个目录</li><li>pwd 打印当前所在目录 (print working directory)</li></ul><p>ls 系列</p><ul><li><p>ls -l 列出的文件以长格式输出，一个文件显示一行（可简写为 ll）</p></li><li><p>ls -a 显示以 “.”开头的文件，“.”开头的为隐藏文件，默认不显示</p></li><li><p>ls -d 显示目录本身而不显示目录下的文件，默认 ls 后面的参数如果是目录，则会显示目录下的文件，如：ls &#x2F;root</p></li><li><p>ls -lh 长格式输出的文件字节数转换为 K,M,G 的形式方便人来阅读</p></li><li><p>ls -t 列出的文件按照修改时间的晚和早排序（最近修改的先显示）</p></li><li><p>ls -tr 列出的文件按照修改时间的早和晚排序（最近修改的后显示）</p></li><li><p>ls -R 列出当前目录下的所有文件，如果有目录遍历所有目录及其子目录下的文件</p></li><li><p>mkdir 创建目录，使用 -p 选项可以级联创建目录</p></li><li><p>rmdir 删除空目录，必须是空目录，否则用 rm -rf filename 删除</p></li></ul><p>du：统计目录下每个文件字节数</p><ul><li>du -s 只显示所有文件字节数总数</li><li>du -h 转换字节数为 K、M、G 的形式，便于阅读</li></ul></blockquote><blockquote><p>以 <code>ls -l</code> 长格式输出字段说明：以 <code>-rw-r--r--. 1 root root 46478 8 月 13 2018 install.log</code> 为例</p></blockquote><blockquote><ul><li><p>第一字段第一位：&#96;<font color='red' weight="900"><strong>-</strong></font>rw-r–r–. 1 root root 46478 8 月 13 2018 install.log</p><p>第一位代表文件类型：（以下为可选值）</p></li><li><p>“-”：代表普通文件</p></li><li><p>“d”：代表目录</p></li><li><p>“l”：链接文件（符号链接；小写的 L）或软链接</p></li><li><p>“c”：字符设备文件</p></li><li><p>“b”：块设备文件</p></li><li><p>“s”：套接字文件</p></li><li><p>“p”：命名管道文件</p></li><li><p>第一字段后 9 位：-<font color='red' weight="900"><strong>rw-r–r–</strong></font>. 1 root root 46478 8 月 13 2018 install.log 代表相关用户、组、其他用户的权限</p></li></ul></blockquote><blockquote><ul><li><p>第二字段：-rw-r–r–. <font color='red' weight="900"><strong>1</strong></font> root root 46478 8 月 13 2018 install.log</p></li><li><p>如果文件是普通文件：硬链接的个数（访问该文件的路径数）dr-xr-xr-x. 25 root root 4096 8 月 13 2018 &#x2F; 如果文件是目录：目录下的一级子目录的个数</p></li></ul></blockquote><blockquote><ul><li>第三字段：-rw-r–r–. 1 <font color='red' weight="900"><strong>root</strong></font> root 46478 8 月 13 2018 install.log 文件的属主（文件所属的用户名）</li></ul></blockquote><blockquote><ul><li>第四字段：-rw-r–r–. 1 root <font color='red' weight="900"><strong>root</strong></font> 46478 8 月 13 2018 install.log 文件的属组（文件所属的用户组名）</li></ul></blockquote><blockquote><ul><li>第五字段：-rw-r–r–. 1 root root <font color='red' weight="900"><strong>46478</strong></font> 8 月 13 2018 install.log 文件的字节数（大小）</li></ul></blockquote><blockquote><ul><li>第六字段：-rw-r–r–. 1 root root 46478 <font color='red' weight="900"><strong>8 月 13 2018</strong></font> install.log 文件最近一次的修改日期</li></ul></blockquote><blockquote><ul><li>第七字段：-rw-r–r–. 1 root root 46478 8 月 13 2018 <font color='red' weight="900"><strong>install.log</strong></font> 文件名称</li></ul></blockquote><h4 id="文件操作命令-which、touch、cp、mv、rm、file"><a href="#文件操作命令-which、touch、cp、mv、rm、file" class="headerlink" title="文件操作命令 which、touch、cp、mv、rm、file"></a>文件操作命令 which、touch、cp、mv、rm、file</h4><blockquote><ul><li>which：which 后面的命令字在磁盘的什么位置。例如：which cd、which ls、which date</li><li>touch：创建一个空文件，如果文件已经存在修改文件的修改日期。例如：&#x2F;root 目录下创建 aaa、bbb、ccc 三个空文件；touch &#x2F;root&#x2F;aaa &#x2F;root&#x2F;bbb &#x2F;root&#x2F;ccc</li></ul><p>cp 复制文件</p><ul><li>复制 &#x2F;root&#x2F;install.log 文件到 &#x2F;tmp：cp &#x2F;root&#x2F;install.log &#x2F;tmp</li><li>复制 &#x2F;root&#x2F;install.log 文件到 &#x2F;tmp 并改名为 abc.log：cp &#x2F;root&#x2F;install.log &#x2F;tmp&#x2F;abc.log</li></ul><p>cp 复制目录</p><ul><li>例如：复制整个 &#x2F;root 目录到 &#x2F;tmp：cp -R &#x2F;root &#x2F;tmp</li><li>例如：复制整个 &#x2F;root 目录到 &#x2F;tmp 并改名为 abc：cp -R &#x2F;root &#x2F;tmp&#x2F;abc</li></ul><p>mv 移动文件或目录</p><ul><li>例如：移动 &#x2F;root&#x2F;install.log.bak 文件到 &#x2F;tmp：mv &#x2F;root&#x2F;install.log.bak &#x2F;tmp</li></ul><p>mv 给文件或目录改名</p><ul><li>例如：给&#x2F;tmp 下的 root 目录改名为 root1：mv &#x2F;tmp&#x2F;root &#x2F;tmp&#x2F;root1</li></ul><p>rm 删除文件</p><ul><li>例如：删除&#x2F;root&#x2F;install.log.bak：rm &#x2F;root&#x2F;install.log.bak</li></ul><p>rm 删除目录 （root 用户操作一定要小心）</p><ul><li>例如：给&#x2F;tmp 下的 root1 目录：rm -rf &#x2F;tmp&#x2F;root1</li></ul><p>常用选项：</p><ul><li>-r 级联删除目录下的所有文件</li><li>-f 不提示（不用用户键入’y’或’n’进行确认）</li><li>file file 查看文件的类型</li></ul></blockquote><h4 id="查看登录用户命令-who、w"><a href="#查看登录用户命令-who、w" class="headerlink" title="查看登录用户命令 who、w"></a>查看登录用户命令 who、w</h4><blockquote><ul><li>who 当前用户登录的信息</li><li>w 当前用户登录的信息，以什么程序登录的</li></ul></blockquote><h4 id="文件内容查看命令-cat、tac、more、less、tail、head"><a href="#文件内容查看命令-cat、tac、more、less、tail、head" class="headerlink" title="文件内容查看命令 cat、tac、more、less、tail、head"></a>文件内容查看命令 cat、tac、more、less、tail、head</h4><blockquote><ul><li>cat 查看文本文件内容，将文本文件内容全部打印到标准输出；选项 -n 输出结果带行号</li><li>tac 查看文本文件内容，倒序输出；按照行号倒序打印文本文件的内容</li><li>more 分页显示文件内容，例如：more &#x2F;root&#x2F;install.log；默认显示进度百分比；空格往下翻页，b 往上翻页，f 往下翻页，q 退出</li><li>less 分页显示文件内容，例如：less &#x2F;root&#x2F;install.log；选项 -m 显示进度百分比；可以用“&#x2F;”后跟关键字搜索文件内容；空格往下翻页，b 往上翻页，f 往下翻页，q 退出</li><li>tail 查看文件尾部 10 行，例如：tail &#x2F;root&#x2F;install.log；选项-N （N 为正整数）可以指定显示末尾 N 行内容</li><li>head 查看文件头部 10 行，例如：head &#x2F;root&#x2F;install.log；选项-N （N 为正整数）可以指定显示头部 N 行内容</li></ul></blockquote><h4 id="系统管理类命令-shutdown、reboot、lscpu"><a href="#系统管理类命令-shutdown、reboot、lscpu" class="headerlink" title="系统管理类命令 shutdown、reboot、lscpu"></a>系统管理类命令 shutdown、reboot、lscpu</h4><blockquote><ul><li>shutdown 关机命令 shutdown -h now 立刻关机；shutdown -h +10 “10 分钟后关机”，每个登录用户收到“10 分钟后关机”的消息，并于 10 分钟后关机；shutdown -c 取消关机</li><li>reboot 重启系统</li><li>lscpu 查看系统 cpu 信息</li></ul></blockquote><h4 id="日期时间管理类命令-date、clock"><a href="#日期时间管理类命令-date、clock" class="headerlink" title="日期时间管理类命令 date、clock"></a>日期时间管理类命令 date、clock</h4><blockquote><ul><li>date 打印操作系统时钟；date -s 20190101 按照指定日期重新设定日期和时间</li><li>clock 打印硬件时钟（主板中依靠纽扣电池保存在芯片中的时钟）；clock -s 按照硬件时钟设置操作系统时钟；clock -w 按照操作系统时钟设置硬件时钟</li></ul></blockquote><h3 id="bash-通配符介绍"><a href="#bash-通配符介绍" class="headerlink" title="bash 通配符介绍"></a>bash 通配符介绍</h3><blockquote><ul><li><ul><li>匹配任意长度的任意字符</li></ul></li><li>? 匹配任意单个字符</li><li>[] 匹配指定字符范围内的任意单个字符，简化写法[a-z]不区分大小写</li><li>[[:upper:]] 大写字母</li><li>[[:lower:]] 小写字母</li><li>[[:alpha:]] 大小写所有字母</li><li>[[:digit:]] 匹配数字，可以写成[0-9]</li><li>[[:alnum:]] 字母+数字</li><li>[[:space:]] 空格</li><li>[[:punct:]] 标点符号 特殊字符</li><li>[^] 匹配指定字符范围外的任意单个字符</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列出a开头的所有文件</span></span><br><span class="line">ls a*</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出a开头一共3个字母的文件</span></span><br><span class="line">ls a??</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出三个大写字母文件名的文件</span></span><br><span class="line">ls [[:<span class="attr">upper</span>:]][[:<span class="attr">upper</span>:]][[:<span class="attr">upper</span>:]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出一个字母后跟三个数字的文件</span></span><br><span class="line">ls [a-z][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出不以a字母开头后跟三个数字的文件</span></span><br><span class="line">ls [^a][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]</span><br></pre></td></tr></table></figure><h3 id="Bash-中的组合键"><a href="#Bash-中的组合键" class="headerlink" title="Bash 中的组合键"></a>Bash 中的组合键</h3><blockquote><ul><li>Ctrl+A 将光标移动到命令行开头</li><li>Ctrl+C 结束正在运行的程序并返回提示符</li><li>Ctrl+D 退出当前 shell 会话，相当于键入 exit 或 logout</li><li>Ctrl+E 将光标移动到命令行末尾</li><li>Ctrl+H Generate backspace character</li><li>Ctrl+L Clear this terminal</li><li>Ctrl+R 查询命令历史记录</li><li>Ctrl+Z 暂停一个程序</li><li>ArrowLeft and ArrowRight 将光标在命令行上向左或向右移动一个位置，这样就可以在其他位置插入字符，而不仅仅是在开头和结尾</li><li>ArrowUp and ArrowDown 浏览历史。转到要重复的行，如果需要编辑详细信息，按 Enter 键以节省时间</li><li>Shift+PageUp and Shift+PageDown 浏览终端缓冲区(查看已“滚屏”的文本)</li><li>Tab 命令或文件名补全;当有多种选择时，系统会发出声音或视觉铃声，如果选择太多，则会询问你是否都想看</li><li>Tab Tab 显示文件或命令补全的可能性</li></ul></blockquote><h3 id="用户和权限管理"><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h3><h4 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h4><blockquote><ul><li>存放文件：&#x2F;etc&#x2F;group；文件中一个组一行记录；一个用户可以属于多个用户组；一个用户组可以包含多个用户</li><li>组文件格式，共 4 个字段：第一字段：组名；第二字段：组密码位；第三字段：gid 组编号；第四字段：以本组作为附加组的用户名，用逗号分隔</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建用户组 groupadd grpname</span></span><br><span class="line">groupadd g1 cat /etc/group</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户组 groupdel grpname</span></span><br><span class="line">groupdel g1 cat /etc/group</span><br></pre></td></tr></table></figure><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><blockquote><ul><li>存放文件：&#x2F;etc&#x2F;passwd；文件中一个用户一行记录</li><li>用户文件格式，共 7 个字段；第一字段：用户名；第二字段：用户密码位；第三字段：uid 用户编号；第四字段：gid 主组编号；第五字段：用户备注信息；第六字段：家目录位置；第七字段：用户使用 shell 解释器的位置，若为&#x2F;sbin&#x2F;nologin，用户不能登录；例如： <code>linux1:x:1000:1000:linux1:/home/linux1:/bin/bash</code></li></ul></blockquote><h4 id="用户类型"><a href="#用户类型" class="headerlink" title="用户类型"></a>用户类型</h4><blockquote><ul><li>超级用户 root 权限特别大；uid&#x3D;0，gid&#x3D;0 生产环境建议不要使用</li><li>普通用户 uid&gt;&#x3D;500 一般权限系统管理，权限有限</li><li>程序用户 1&lt;&#x3D;uid&lt;500 仅仅使用系统服务资源，不能登录系统</li><li>判定程序用户能否登录到操作系统：不能登录：shell 为&#x2F;sbin&#x2F;nologin；可以登录：shell 为&#x2F;bin&#x2F;bash</li></ul></blockquote><h4 id="添加用户-useradd"><a href="#添加用户-useradd" class="headerlink" title="添加用户 useradd"></a>添加用户 useradd</h4><blockquote><p>useradd [-u UID] [-g GID] [-d HOME] [-s] [-c] 用户名</p><ul><li>-u 自定义 UID 用户编号，不指定系统自动编号</li><li>-g 自定义主组 GID 组编号或组名，前提是这个组已经存在，若不指定主组系统会创建一个和用户名一样的组作为用户主组</li><li>-G 自定义附加组 GID 组编号或组名，用逗号隔开，前提是这些组已经存在</li><li>-d 指定家目录，若不指定默认为&#x2F;home&#x2F;用户名</li><li>-s 自定义 shell，若不指定默认为&#x2F;bin&#x2F;bash</li><li>-c 用户备注信息，若不指定默认为空</li><li>示例：创建 wang 用户主组为 g1，附加组为 zhang 和 root：useradd -u 600 -g g1 -G zhang,root wang</li></ul></blockquote><h4 id="查看用户信息-id-用户名"><a href="#查看用户信息-id-用户名" class="headerlink" title="查看用户信息 id 用户名"></a>查看用户信息 id 用户名</h4><blockquote><ul><li>查看当前登录用户信息：id</li><li>查看指定用户信息：id zhang、id wang</li></ul></blockquote><h4 id="修改用户-usermod"><a href="#修改用户-usermod" class="headerlink" title="修改用户 usermod"></a>修改用户 usermod</h4><blockquote><p>usermod [-u UID] [-g GID] [-d HOME] [-s] [-l] 用户名</p><ul><li>示例：usermod -l wang wang1</li></ul></blockquote><h4 id="删除用户-userdel-r-用户名"><a href="#删除用户-userdel-r-用户名" class="headerlink" title="删除用户 userdel [-r] 用户名"></a>删除用户 userdel [-r] 用户名</h4><blockquote><p>-r 选项，在删除用户的同时删除其家目录和相关系统邮件</p></blockquote><h4 id="切换用户-su-用户名"><a href="#切换用户-su-用户名" class="headerlink" title="切换用户 su - 用户名"></a>切换用户 su - 用户名</h4><blockquote><p>可以添加选项 “-”，会执行要切换用户的相关环境变量</p></blockquote><h4 id="给用户设置登录密码-passwd-用户名"><a href="#给用户设置登录密码-passwd-用户名" class="headerlink" title="给用户设置登录密码 passwd [用户名]"></a>给用户设置登录密码 passwd [用户名]</h4><blockquote><ul><li>修改当前用户登录密码 passwd（如果普通用户设置密码需要较高密码复杂度）</li><li>修改指定用户登录密码 passwd zhang（root 用户操作）</li></ul></blockquote><h4 id="密码文件"><a href="#密码文件" class="headerlink" title="密码文件"></a>密码文件</h4><blockquote><p>&#x2F;etc&#x2F;passwd 文件，由于该文件允许所有用户读取，易导致用户密码泄露，因此 Linux 系统将用户的密码信息从 &#x2F;etc&#x2F;passwd 文件中分离出来，并单独放到了&#x2F;etc&#x2F;shadow 文件中。&#x2F;etc&#x2F;shadow 文件只有 root 用户拥有读权限，其他用户没有任何权限，这样就保证了用户密码的安全性。<br>存放位置 &#x2F;etc&#x2F;shadow 每一行对应一个用户的密码信息，共 9 字段；字段说明：用户名：加密密码：最后一次修改时间：最小修改时间间隔：密码有效期：密码需要变更前的警告天数：密码过期后的宽限时间:账号失效时间：保留字段</p></blockquote><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><blockquote><p>权限类别：权限分为三种，分别是读、写、执行：r (read)、w (write) 、x (execute)<br>权限作用对象：文件 （Linux 一切皆文件）<br>显示文件的权限：ls -l 或 ll (redhat 系列发行版 linux，默认为 ls -l 创建了别名 ll)<br>用户的不拥有某位权限，则使用 “ - ” 占位；例如：r-x 表示读和执行的权限；r–表示只读权限；rw-表示读写权限<br>Linux 使用 UGO 权限模型进行权限控制；U 代表文件所属用户；G 代表文件所属用户组；O 代表所属用户和所属用户组的用户之外的其他用户<br>ls -l 文件属性信息第一字段后 9 位代表权限；9 位权限 3 位 1 组可以分成 3 组，分别对应文件的 UGO；例如：<code>-rw-rw-r--. 1 wang  g1  0 11月 20 14:35 wangfile</code> 文件的所属用户是 wang(U)，其权限是 rw- 文件的所属用户组是 g1(G)，其权限是 rw- 文件的属主 wang 和 g1 组的用户以外的其他用户(O)，其权限是 r–<br>规定 4 代表 r ；2 代表 w ；1 代表 x；0 代表 - 这样不同的权限组合可以用 1 个 8 进制 0 到 7 的数字来表示，文件对应 UGO 的权限可以用 3 个数字来表示；例如：<code>-rw-rw-r--. 1 wang  g1   0 11月 20 14:35 wangfile</code> 其权限为： 6 6 4<br>修改权限使用 chmod 命令字：提供作用相同的三种方式</p><ul><li>赋值法：chmod u&#x3D;rwx,g&#x3D;rw,o&#x3D; filename；chmod a&#x3D;rwx filename</li><li>加减法：chmod u+r,u-x,g+w,g-x,o+r filename；chmod a+x filename</li><li>权重法：chmod 755 filename；chmod 664 filename；chmod 777 filename；chmod 000 filename</li></ul><p>可以使用-R 选项级联修改目录下的所有文件的权限；例如：修改 &#x2F;u01 下所有目录及文件的权限为 750 <code>chmod -R 750 /u01</code><br>修改文件的属主和属组使用 chown 命令字：只能 root 用户来做</p><ul><li>chown [-R] UserName[{:|.}GroupName] FILENAME 选项-R 级联修改目录下的所有文件的属主和属组</li><li>例如：修改 &#x2F;root&#x2F;install.log 的属主为 zhang ，属组为 g1：chown zhang:g1 &#x2F;root&#x2F;install.log</li><li>例如：仅修改 &#x2F;root&#x2F;install.log 的属主为 root，属组不变：chown root: &#x2F;root&#x2F;install.log</li></ul><p>权限对于目录和非目录文件有所区别；创建目录默认权限为 755，普通文件为 644； 目录至少要有 r 和 x 权限才能正常进入目录</p></blockquote><table><thead><tr><th align="center">权限</th><th align="center">对于文件</th><th align="center">对于目录</th></tr></thead><tbody><tr><td align="center">r（读）</td><td align="center">可以使用内容查看类的命令来显示其相关内容；可以复制文件</td><td align="center">可以使用 ls 命令查看目录下的文件，如果对目录没有 x 权限，不能使用 cd 命令进入目录</td></tr><tr><td align="center">w（写）</td><td align="center">可以使用编辑器修改内容</td><td align="center">但必须同时对目录有 x 权限 ，可以在目录下 创建（touch）、删除（rm）、改名（mv）文件</td></tr><tr><td align="center">x（执行）</td><td align="center">可以将其内容发起一个进程（内容当成命令字来运行）</td><td align="center">必须同时对目录有 r 权限，可以使用 cd 命令进去目录，可以使用 ls 命令查看目录下的文件</td></tr></tbody></table><h3 id="压缩与解压缩命令"><a href="#压缩与解压缩命令" class="headerlink" title="压缩与解压缩命令"></a>压缩与解压缩命令</h3><h4 id="压缩与解压缩命令-zip-unzip"><a href="#压缩与解压缩命令-zip-unzip" class="headerlink" title="压缩与解压缩命令 zip unzip"></a>压缩与解压缩命令 zip unzip</h4><blockquote><p>zip 压缩文件或目录 -r 压缩目录 -y 把软链接作为文件压缩，但不压缩软链接所指向的文件；</p><ul><li>示例：压缩&#x2F;etc 下的所有文件到&#x2F;tmp 下的 etc.zip 文件中：<code>zip -ry /tmp/etc.zip /etc</code></li></ul><p>unzip 解压缩 zip 压缩的文件 -d 指定解压缩的路径；</p><ul><li>示例：解压缩&#x2F;tmp 下 etc.zip 到&#x2F;root：<code>unzip -d /root /tmp/etc.zip</code></li></ul></blockquote><h4 id="压缩与解压缩命令-gzip-gunzip"><a href="#压缩与解压缩命令-gzip-gunzip" class="headerlink" title="压缩与解压缩命令 gzip gunzip"></a>压缩与解压缩命令 gzip gunzip</h4><blockquote><p>gzip 压缩文件或目录 -N N 为数字 1 到 9，为压缩率，9 最高，默认 6 -r 压缩目录；默认压缩之后不会保留源文件，源文件变为*.gz 格式；</p><ul><li>示例：压缩&#x2F;root&#x2F;install.log 文件：<code>gzip /root/install.log</code> <code>ls /root/install.log*</code></li></ul><p>gunzip 解压缩 gzip 压缩的文件</p><ul><li>示例：解压缩&#x2F;root 下 install.log.gz：<code>gunzip /root /install.log.gz</code></li></ul></blockquote><h4 id="压缩与解压缩命令-bzip2-bunzip2"><a href="#压缩与解压缩命令-bzip2-bunzip2" class="headerlink" title="压缩与解压缩命令 bzip2 bunzip2"></a>压缩与解压缩命令 bzip2 bunzip2</h4><blockquote><p>bzip2 压缩文件（压缩率比 gzip 高）-N N 为数字 1 到 9，为压缩率，9 最高，默认 6；默认压缩之后不会保留源文件，源文件变为*.bz2 格式</p><ul><li>示例：压缩&#x2F;root&#x2F;install.log 文件：<code>bzip2 /root/install.log</code> <code>ls /root/install.log*</code></li></ul><p>bunzip2 解压缩 bzip2 压缩的文件</p><ul><li>示例：解压缩&#x2F;root 下 install.log.bz2：<code>bunzip2 /root /install.log.bz2</code></li></ul></blockquote><h3 id="归档命令-tar"><a href="#归档命令-tar" class="headerlink" title="归档命令 tar"></a>归档命令 tar</h3><blockquote><p>tar 将多个离散文件或目录进行打包为一个普通文件</p><ul><li>归档： tar 选项 归档文件名 源文件名或目录</li><li>释放归档： tar 选项 归档文件名 -C 目标目录</li></ul><p>常用选项：</p><ul><li>-f 如果使用 tar 命令，必须要用 -f 选项，而且要放到最后面</li><li>-c 创建新归档</li><li>-x 释放归档 extract</li><li>-z 使用 gzip 的方式进行压缩或解压缩</li><li>-j 使用 bzip2 的方式进行压缩或解压缩</li><li>-v 归档进度可视化 (verbose)</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将/etc整个目录归档为/tmp/etc.tar文件</span></span><br><span class="line">tar -cvf /tmp/etc.tar /etc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将/etc整个目录归档为/tmp/etc.tar.gz文件，用gzip压缩文件</span></span><br><span class="line">ar -zcvf /tmp/etc.tar.gz /etc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将/etc整个目录归档为/tmp/etc.tar.bz2文件，用bzip2压缩文件</span></span><br><span class="line">tar -jcvf /tmp/etc.tar.bz2 /etc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将归档文件/tmp/etc.tar还原到/root目录下</span></span><br><span class="line">tar -xvf /tmp/etc.tar -C /root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将归档文件/tmp/etc.tar.gz还原到/root目录下</span></span><br><span class="line">tar -zxvf /tmp/etc.tar.gz -C /root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将归档文件/tmp/etc.tar.bz2还原到/root目录下</span></span><br><span class="line">tar -jxvf /tmp/etc.tar.bz2 -C /root</span><br></pre></td></tr></table></figure><h3 id="链接命令-ln"><a href="#链接命令-ln" class="headerlink" title="链接命令 ln"></a>链接命令 ln</h3><blockquote><p>ln 命令用来给文件或目录创建链接文件，类似于 windows 系统的快捷方式<br>常用选项:</p><ul><li>-s 创建软链接</li><li>-v 可视化</li><li>示例：在&#x2F;root 下为目录&#x2F;var 创建软链接 link_var：<code>ln -sv /var /root/link_var</code></li></ul></blockquote><h3 id="测试网络连通性命令-ping"><a href="#测试网络连通性命令-ping" class="headerlink" title="测试网络连通性命令 ping"></a>测试网络连通性命令 ping</h3><blockquote><p>ping 命令可以用来测试网络的连通性<br>常用选项:</p><ul><li>-c 次数</li><li>-w 等待秒数，优先级高于-c</li><li>示例：测试百度网址的连通性，发生 4 个 ping 包：<code>ping -c 4 www.baidu.com</code></li><li>示例：测试百度网址的连通性，发生 4 个 ping 包，2 秒后停止 ping：<code>ping -c 4 -w 2 www.baidu.com</code></li></ul></blockquote><h3 id="vi-编辑器-（最常用）"><a href="#vi-编辑器-（最常用）" class="headerlink" title="vi 编辑器 （最常用）"></a>vi 编辑器 （最常用）</h3><blockquote><p>vi 三种模式：</p><ul><li>一般模式（normal mode），默认即为一般模式</li><li>插入模式（insert mode）</li><li>末行模式（last line mode）</li></ul></blockquote><blockquote><p>三种模式的切换：一般模式 –&gt; 插入模式</p><ul><li>i：当前光标处输入内容</li><li>I：在当前光标所在行的行首</li><li>a：在当前光标所在处的后面</li><li>A: 在当前光标所在行的行尾输入</li><li>o：在光标所在行的下方新增一行空白行</li><li>O：在光标所在行的上方新增一行空白行</li></ul><p>三种模式的切换：插入模式 –&gt; 一般模式</p><ul><li>使用：ESC 键</li></ul><p>三种模式的切换：一般模式 –&gt; 末行模式</p><ul><li>使用：“:”（英文状态下）</li></ul><p>三种模式的切换：末行模式 –&gt; 一般模式</p><ul><li>使用：ESC 键</li></ul></blockquote><blockquote><p>退出编辑器：末行模式下，输入下述内容可退出：</p><ul><li>q！：强制退出，不保存并退出</li><li>wq：保存修改并退出</li><li>x：保存并退出</li></ul></blockquote><blockquote><p>vi 操作流程</p><ul><li><ol><li>新建或编辑文件：vi filename</li></ol></li><li><ol start="2"><li>i 或 insert 键，即可进入插入模式。</li></ol></li><li><ol start="3"><li>编辑内容。</li></ol></li><li><ol start="4"><li>ESC 键，退出到一般模式。</li></ol></li><li><ol start="5"><li>键入英文“:”进入末行模式，按 wq（保存并修改）后回车。</li></ol></li><li><ol start="6"><li>查看编辑内容是否正确：cat filename</li></ol></li></ul></blockquote><blockquote><p>拓展 在一般模式下：</p><ul><li>d 删除。dd 删除一行</li><li>y 复制。yy 复制一行</li><li>p 粘贴</li><li>x 清除</li><li>g 行跳转；gg 行跳转：如 10gg，表示跳转到第 10 行。</li><li>&#x2F;或？ 查找</li><li>n&#x2F;N 上下翻</li><li>v 可视化模式。可视化模式中，可移动光标选择文本。键入 y 复制选中文本，键入 d 删除选中文本，键入 v 回到一般模式。</li><li>u 撤销之前的操作</li></ul></blockquote><h3 id="安装应用程序-rpm"><a href="#安装应用程序-rpm" class="headerlink" title="安装应用程序 rpm"></a>安装应用程序 rpm</h3><blockquote><p>redhat、centos、oracle linux 使用 rpm 命令字安装制作为 rpm 格式的应用程序<br>rpm 命令安装 rpm 软件包：rpm -i [选项] 包名<br>常用选项：</p><ul><li>-v 显示安装过程中的详细信息</li><li>-h 以 # 显示安装进度</li><li>-U 升级包（如没安装就安装）</li><li>-F 升级包（没安装放弃安装）</li><li>–test 测试能否被安装 try run</li><li>–nodeps 忽略包之间的依赖关系</li><li>常用安装命令：rpm -ivh 包名 1 包名 2 ……</li><li>示例：rpm -ivh zsh-4.3.11-4.el6.centos.2.x86_64.rpm</li></ul></blockquote><blockquote><p>查询 RPM 包 ：rpm -q[子选项] 包名关键字<br>常用选项：</p><ul><li>a 已安装的所有软件包</li><li>i 查看指定软件的详细信息</li><li>l 查询软件包的安装目录</li><li>f 查询文件或目录属于哪个程序包安装生成的</li><li>p 尚未安装的包做查询操作</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有已安装rpm包</span></span><br><span class="line">rpm -qa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有已安装rpm包中有没有mysql</span></span><br><span class="line">rpm -qa | grep mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装的mysql-libs-5.1.73-7.el6.x86_64包的信息</span></span><br><span class="line">rpm -qi mysql-libs-5.1.73-7.el6.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看mysql-libs-5.1.73-7.el6.x86_64包中文件安装位置</span></span><br><span class="line">rpm -ql mysql-libs-5.1.73-7.el6.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看/bin/ls和根目录“/”是由哪些包安装的</span></span><br><span class="line">rpm -qf /bin/ls</span><br><span class="line">rpm -qf /</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装光盘中mysql-server-5.1.73-7.el6.x86_64.rpm的信息</span></span><br><span class="line">rpm -qip /media/CentOS_6.8_Final/Packages/mysql-server-5.1.73-7.el6.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装光盘中mysql-5.1.73-7.el6.x86_64.rpm的内容</span></span><br><span class="line">rpm -qlp /media/CentOS_6.8_Final/Packages/mysql-5.1.73-7.el6.x86_64.rpm</span><br></pre></td></tr></table></figure><blockquote><p>删除 RPM 包：rpm -e 包名<br>示例：删除刚刚安装的 zsh 包</p><ul><li>首先需要获得准确完整的包名：rpm -qa | grep zsh</li><li>然后删除该包：rpm -e zsh-4.3.11-4.el6.centos.2.x86_64</li><li>再次查询确认：rpm -qa | grep zsh</li></ul></blockquote><blockquote><p>RPM 命令安装软件包存在的问题：rpm 包和包存在一定的依赖关系<br>可能的情况：</p><ul><li>安装包 A，提示需要先安装包 B，安装包 B，提示先要先装包 C，安装包 C，提示需要先装包 D…….，导致安装过程漫长不顺利</li><li>安装包 A，提示需要先安装包 B，安装包 B，提示先要先装包 C，安装包 C，提示需要先装包 A。最后只能包 A、B、C 一起安装</li><li>以上情况导致 rpm 安装软件过程复杂繁琐，因而后来推出了 yum 方式安装软件包，解决了包间相互依赖的问题。推荐使用 yum 方式安装软件包</li></ul></blockquote><h3 id="安装应用程序-yum"><a href="#安装应用程序-yum" class="headerlink" title="安装应用程序 yum"></a>安装应用程序 yum</h3><blockquote><p>相对于 rpm 安装方式 yum 解决 rpm 包间依赖关系使安装方便和快捷；安装 rpm 包时仍然使用 rpm</p></blockquote><blockquote><p>yum 原理</p><ul><li>仓库配置文件：&#x2F;etc&#x2F;yum.repos.d&#x2F;*.repo</li><li>根据*.repo 后缀的 yum 配置文件中指定的 RPM 包来源构建本地缓存（数据库），包含包间的依赖关系</li><li>安装软件包时检查安装包所依赖的相关包，先安装依赖包，最后再装目标软件包</li><li>注：网络 yum 源可以考虑使用网速快的 yum 源，如：aliyun</li></ul></blockquote><blockquote><p>yum 用法:</p><ul><li><p>选项：</p></li><li><p>-y 自动回应 yes 不用手工输入‘Y’</p></li><li><p>-q 静默模式 不显示包安装进度条等信息</p></li><li><p>安装：yum [选项] install 包 1 包 2….</p></li><li><p>卸载：yum [选项] remove 包 1 包 2….</p></li><li><p>更新：yum [选项] update 包 1 包 2….</p></li><li><p>检查更新：yum check-update</p></li><li><p>查看指定特性（可以是文件） 由哪个程序包提供：：yum provides *&#x2F;关键字</p></li><li><p>清除缓存：yum clean all</p></li><li><p>构建缓存：yum makecache</p></li><li><p>模糊搜索：yum search 关键字</p></li><li><p>查看指定包依赖的包关系：yum deplist 包 1 包 2…..</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html 相关知识（4）</title>
      <link href="/post/1b93659f.html"/>
      <url>/post/1b93659f.html</url>
      
        <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><blockquote><p>同源：协议、域名、端口，三者必须一致<br>要求：ajax 请求时，要求当前网页必须和 server 符合同源策略<br>img、css、js 可无视同源策略</p></blockquote><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><blockquote><p>JSONP 的基本实现原理：</p><ul><li><code>&lt;script&gt;</code>可绕过跨域限制（可无视同源策略）</li><li>服务器可以任意动态拼接数据返回</li><li>所以，<code>&lt;script&gt;</code>可以获得跨域的数据，只要服务端愿意返回</li></ul><p>基本实现：</p><ul><li>可以使用 script 的 src 向后端发送请求，请求中携带和后端商量好的 callback 函数名，后端收到请求，就会返回对应的数据，然后将 callback 挂载到 Window 上，这样就会执行，获取后端返回的数据</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jsonp 演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>一段文字 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">abc</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:5500/data/jsonp.js?callback=abc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="cookie-的缺点"><a href="#cookie-的缺点" class="headerlink" title="cookie 的缺点"></a>cookie 的缺点</h2><blockquote><ul><li>存储大小，最大 4kb</li><li>http 请求时，需要发送到服务端，增加请求数据量</li><li>只能用 document.cookie &#x3D; ‘’ 来修改，过于简陋</li></ul></blockquote><h2 id="localstorage-和-sessionstorage"><a href="#localstorage-和-sessionstorage" class="headerlink" title="localstorage 和 sessionstorage"></a>localstorage 和 sessionstorage</h2><blockquote><ul><li>LocalStorage 数据会永久存储，除非代码删除或者手动删除</li><li>SessionStorage 数据只存在于当前会话，浏览器关闭，则自动删除</li></ul></blockquote><h2 id="Cookie、localstorage、sessionstorage-的区别"><a href="#Cookie、localstorage、sessionstorage-的区别" class="headerlink" title="Cookie、localstorage、sessionstorage 的区别"></a>Cookie、localstorage、sessionstorage 的区别</h2><blockquote><ul><li>容量：cookie 只有 4kb 大小，后两者大小为 5M</li><li>API 易用性：cookie 只能用 document.cookie &#x3D; ‘’，后两者 get、set，易用</li></ul></blockquote><h2 id="http-状态码以及常用的状态码"><a href="#http-状态码以及常用的状态码" class="headerlink" title="http 状态码以及常用的状态码"></a>http 状态码以及常用的状态码</h2><blockquote><p>http 状态码</p><ul><li>1xx：表示服务器收到了请求，但是还没有返回</li><li>2xx：请求成功</li><li>3xx：重定向</li><li>4xx：客户端错误（请求了一个资源不存在的地址）</li><li>5xx：服务端错误</li></ul><p>常见状态码</p><ul><li>200：请求成功</li><li>301：永久重定向（配合 location（服务器给的新的访问地址），浏览器会自动处理（浏览器会记住这个地址，下次就直接使用这个，以前的不用了，比如更换域名了））</li><li>302：临时重定向（配合 location（服务器给的新的访问地址），浏览器会自动处理（浏览器不会记住这个地址，下次浏览器还是使用之前的地址访问，等待返回 302，然后使用新的临时地址访问）））</li><li>304：资源未被修改（这个资源被请求过，没有发生更改，可以使用缓存）</li><li>403：没有权限访问</li><li>404：资源路径不存在</li><li>500：服务器错误</li><li>504: 网关超时（服务器可能有很多台，访问的服务在内部进行跳转时，可能会超时）</li></ul></blockquote><h2 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h2><blockquote><p>传统的 API：把每个 url 当作一个功能；Restful API：把每个 url 当作一个唯一的资源<br>不使用 url 参数：传统的 API：&#x2F;api&#x2F;list?pageIndex&#x3D;2；Restful API：&#x2F;api&#x2F;list&#x2F;2<br>用 method 表示操作类型：</p><ul><li>传统 API 设计：1）、post 请求：&#x2F;api&#x2F;create-blog&#x2F;；2）、post 请求：&#x2F;api&#x2F;update-blog?id&#x3D;2；3）get 请求：&#x2F;api&#x2F;get-blog?id&#x3D;2；</li><li>Restful API 设计：1）post 请求：&#x2F;api&#x2F;blog&#x2F;；2）、patch 请求：&#x2F;api&#x2F;blog&#x2F;100；3）、get 请求：&#x2F;api&#x2F;blog&#x2F;100；虽然 patch 和 get 看起来 url 一样，但是操作类型不一样</li></ul></blockquote><h2 id="http-headers"><a href="#http-headers" class="headerlink" title="http headers"></a>http headers</h2><blockquote><p>Request Headers：</p><ul><li>Accept：浏览器可接收的数据格式</li><li>Accept-Encoding：浏览器接收的压缩算法，如 gzip</li><li>Accept-Language：浏览器可接收的语言，如 zh-CN</li><li>Connect：keep-alive 一次连接，重复使用</li><li>cookie：浏览器自带，不需要管</li><li>Host：请求的域名</li><li>User-Agent：（简称 UA）浏览器信息（标识浏览器的）</li><li>Content-type：发送数据的格式，如 application&#x2F;json</li><li>Content-length：返回数据的大小，多少字节</li><li>Content-Encoding：返回数据的压缩算法，如 gzip</li><li>Set-Cookie：服务器修改 cookie 的时候使用的</li></ul><p>Response Headers</p><ul><li>Cache-control：过期时间（服务器觉得可能有些资源可以缓存的时候，就会加上这个）这个就是控制强制缓存的逻辑；例如：Cache-Control：max-age：35000（秒）</li><li>Last-Modified：资源的最后修改时间；If-Modified-Since 就代表 Last-Modified，主要判断资源的过期时间；If-None-Match 就代表 Etag，主要判断资源是否被修改过</li></ul></blockquote><pre><code>Last-Modified 和 Etag 会优先使用 Etag，Last-Modified 只能精确到秒级，如果资源被重复生成，而内容不变，则 Etag 更为准确</code></pre><blockquote><p>Cache-Control 的值：</p><ul><li>max-age：最大过期时间</li><li>no-cache：不需要强制缓存，直接使用服务器，服务器如何处理不管</li><li>no-store：不用本地缓存、也不用服务端缓存；4）、private：只允许最终用户做缓存；5）、public：也允许中间的代理做缓存</li></ul></blockquote><pre><code>Expires 也在 Response Headers 中，也是控制过期时间，已经被 Cache-Control 代替</code></pre><blockquote><p>协商缓存（对比缓存）：</p><ul><li>服务端缓存策略（不是东西缓存在服务端，二十服务端告诉你你请求的东西可能已经在本地缓存过了，你可以直接用本地的，这样服务端就不用返回东西了，节省了网络）</li><li>服务端判断客户端和服务端资源是否一致（如果一样，就不需要返回新数据了，节省网络）</li><li>如果 2）判断结果不一样，则返回 200 和最新资源，如果一样，则返回 304</li></ul></blockquote><h2 id="常用的刷新操作"><a href="#常用的刷新操作" class="headerlink" title="常用的刷新操作"></a>常用的刷新操作</h2><blockquote><ul><li><p>正常操作：地址栏输入 url、跳转连接、前进后退</p></li><li><p>手动刷新：F5、点击刷新按钮、右击菜单刷新</p></li><li><p>强制刷新：ctrl + F5</p></li><li><p>正常刷新：强制缓存、协商缓存有效</p></li><li><p>手动刷新：强制缓存失效，协商缓存有效</p></li><li><p>强制刷新：强制缓存、协商缓存都失效</p></li></ul></blockquote><h2 id="常用-git-命令"><a href="#常用-git-命令" class="headerlink" title="常用 git 命令"></a>常用 git 命令</h2><blockquote><ul><li>git init：在当前目录新建一个 git 仓库</li><li>git add . &#x2F; 文件名：把文件缓存到本地（暂存区），. 代表所有，也可以只缓存某一个文件</li><li>git checkout -b 分支名：新建一个分支，并且切换到该分支</li><li>git checkout 分支名：切换分支</li><li>git commit -m “备注内容”：提交时的备注信息</li><li>git push origin 分支名：推送到远端</li><li>git pull origin 分支名：从远端拉取</li><li>git branch：查看分支</li><li>git merge 分支名：将某分支和当前分支合并</li><li>git diff：可用来查看修改文件的具体修改，不是新添加的文件，时修改过的文件</li><li>git log：可用来查看提交记录</li><li>git config user.name：用来配置提交的用户名</li><li>git config user.email：用来配置提交用户的邮箱，以便于知道谁提交的</li><li>git show “id”：可用来查看某次提交的具体内容，id 时给 git log 中的，每次提交都会有一个</li><li>git checkout . 或者 git checkout 文件名：可用来撤销修改</li><li>git fetch：可用来把所有分支拉取到本地</li><li>如果忘了新建分支，直接在 master 分支上进行了修改，又不想撤回修改，可以使用 git stash 这个命令可以将修改的内容单独放到一个地方，然后再创建新分支，再使用 git stash pop 开放出来，在进行提交，这样就可以将修改的内容放到新分支上了</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html 相关知识（3）</title>
      <link href="/post/86445d26.html"/>
      <url>/post/86445d26.html</url>
      
        <content type="html"><![CDATA[<h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><blockquote><p>原型关系</p><ul><li>每个 class 都有显示原型 prototype</li><li>每个实例都有隐式原型 <code>__proto__</code></li><li>实例的 <code>__proto__</code> 指向对应 class 的 prototype<br>基于原型的执行规则</li><li>当获取属性或执行方法时：首先在自身属性和方法中寻找，如果找不到，则自动取 <code>__proto__</code>中去找</li></ul></blockquote><h2 id="自由变量、闭包"><a href="#自由变量、闭包" class="headerlink" title="自由变量、闭包"></a>自由变量、闭包</h2><blockquote><p>所有自由变量的查找，是在<strong>函数定义</strong>的地方，向上级作用域查找，不是在执行的地方</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数作为返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="title function_">create</span>();</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">200</span>;</span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数作为参数被传递</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">200</span>;</span><br><span class="line">  <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="title function_">print</span>(fn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a1 = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a2 = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> a3 = <span class="number">300</span>;</span><br><span class="line">      <span class="keyword">return</span> a + a1 + a2 + a3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 600</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn3</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// undefined</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn3</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn3</span>());</span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><blockquote><p>this 取什么值，是在执行的时候确定的，不是在定义的时候确定的<br>this 的不同应用场景如何取值</p><ul><li>作为普通函数被调用，this 就是 window</li><li>使用 call、apply、bind，传入什么，this 就是什么（一般是第一个参数，如果我们传入的第一个参数为 null，函数体内的 this 会默认指向宿主对象，在浏览器中则是 window）</li><li>作为对象方法被调用，this 就是对象本身</li><li>构造函数调用， 此时 this 指向 实例对象</li><li>通过事件绑定的方法， 此时 this 指向 绑定事件的对象</li><li><strong>如果是箭头函数，this 指向是定义时所在的对象，而不是执行时的，箭头函数的 this 指向固定</strong> 箭头函数不会创建自己的 this，它只会从自己的作用域链的上一层继承 this（父级指向谁，当前箭头函数就指向谁）</li><li>在以下三种特殊情况下，this 指向 window：1）、立即执行函数（IIFE）2）、setTimeout 中传入的函数 3）、setInterval 中传入的函数</li></ul></blockquote><h2 id="手写-bind"><a href="#手写-bind" class="headerlink" title="手写 bind"></a>手写 bind</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种：参数通过 arguments 取到</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 将参数拆解为数组</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取 this（数组第一项）</span></span><br><span class="line">  <span class="keyword">const</span> t = args.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fn1.bind(...)中的 fn1</span></span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> self.<span class="title function_">apply</span>(t, args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;this is fn1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn2 = fn1.<span class="title function_">bind1</span>(&#123;<span class="attr">x</span>: <span class="number">100</span>&#125;, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">fn2</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">// res结果</span></span><br><span class="line"><span class="variable language_">this</span> &#123;<span class="attr">x</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="number">10</span> <span class="number">20</span> <span class="number">30</span></span><br><span class="line"><span class="variable language_">this</span> is fn1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种：参数显示的传递（在函数参数那里）</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">myBind2</span>(<span class="params">context, ...bindArgs</span>) &#123;</span><br><span class="line">  <span class="comment">// context 就是 bind 传入的 this</span></span><br><span class="line">  <span class="comment">// bindArgs 就是 bind 传入的参数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// fn1.bind(...)中的 fn1</span></span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span>；</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newArgs = bindArgs.<span class="title function_">concat</span>(args);</span><br><span class="line">    <span class="keyword">return</span> self.<span class="title function_">apply</span>(context, newArgs);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这个调用中 bindArgs 就是 10、20，args 里是 30</span></span><br><span class="line">fn3 = add.<span class="title function_">myBind2</span>(<span class="literal">null</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn3</span>(<span class="number">30</span>));</span><br></pre></td></tr></table></figure><h2 id="实际开发中闭包的作用"><a href="#实际开发中闭包的作用" class="headerlink" title="实际开发中闭包的作用"></a>实际开发中闭包的作用</h2><blockquote><p>隐藏数据：闭包隐藏数据，只提供 API</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCache</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 闭包中的数据，被隐藏，不被外界访问</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">key, val</span>) &#123;</span><br><span class="line">      daa[key] = val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> data[key];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="title function_">createCache</span>();</span><br><span class="line">c.<span class="title function_">set</span>(<span class="string">&quot;a&quot;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="title function_">get</span>(<span class="string">&quot;a&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="关于作用域的问题"><a href="#关于作用域的问题" class="headerlink" title="关于作用域的问题"></a>关于作用域的问题</h2><blockquote><p>如果是在 for 外面声明 i，那么每次点击都是 10，因为 for 循环很快就执行完了，所以 i 就是 10，如果声明在里面，这样每次点击，才是对应的序号</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  a.<span class="property">innerHTML</span> = i + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  a.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js-如何执行"><a href="#js-如何执行" class="headerlink" title="js 如何执行"></a>js 如何执行</h2><blockquote><ul><li>从前往后，一行一行执行</li><li>如果某一行出错，则停止下面的代码的执行</li><li>先把同步代码执行完，在执行异步代码</li></ul></blockquote><h2 id="event-loop（事件轮询-x2F-事件循环）"><a href="#event-loop（事件轮询-x2F-事件循环）" class="headerlink" title="event loop（事件轮询 &#x2F; 事件循环）"></a>event loop（事件轮询 &#x2F; 事件循环）</h2><blockquote><ul><li>同步代码：一行一行放在 call stack 中执行</li><li>异步代码：会先“记录”下等待时机（因为可能是定时器时间还不到，或者定义的点击事件啥的），时机到了，就移动到 callback queue 中</li><li>如果 call stack 为空（即同步代码执行完）event loop 开始工作</li><li>轮询查找 call queue，如果有，则移动到 call stack 中执行，然后继续轮询</li></ul><p>事件轮询的执行顺序是：同步代码、微任务、DOM 渲染、宏任务</p><ul><li>微任务：promise、async&#x2F;await</li><li>宏任务：setTimeout、setInterval、DOM 事件</li></ul></blockquote><h2 id="promise-的状态"><a href="#promise-的状态" class="headerlink" title="promise 的状态"></a>promise 的状态</h2><blockquote><p>promise 一共有三种状态：pending（过程中，还没有结果）、resolve（成功）、reject（失败）<br>pending -&gt; resolve pending -&gt; reject 状态一旦发生变化，就不可逆了<br>then 和 catch 改变状态：then 正常返回 resolve，里面有错则返回 reject；catch 正常返回 resolve，里面有错则返回 reject</p></blockquote><h2 id="async-x2F-await-和-promise-的关系"><a href="#async-x2F-await-和-promise-的关系" class="headerlink" title="async&#x2F;await 和 promise 的关系"></a>async&#x2F;await 和 promise 的关系</h2><blockquote><ul><li>执行 async 函数，返回的是 promise 对象</li><li>await 相当于 promise 的 then</li><li>try…catch 可捕获异常，代替了 promise 的 catch</li></ul></blockquote><h2 id="手写简易的-ajax"><a href="#手写简易的-ajax" class="headerlink" title="手写简易的 ajax"></a>手写简易的 ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHTTPRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params">resObj</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(resObj));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ajax</span>(<span class="string">&quot;/data/test.json&quot;</span>, cb);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html 相关知识（2）</title>
      <link href="/post/3ef83a43.html"/>
      <url>/post/3ef83a43.html</url>
      
        <content type="html"><![CDATA[<h2 id="盒模型宽度的计算"><a href="#盒模型宽度的计算" class="headerlink" title="盒模型宽度的计算"></a>盒模型宽度的计算</h2><blockquote><ul><li>offsetWidth &#x3D; 内容宽度(width) + 内边距(padding) + 边框(border)，不包含外边距</li><li>clientWidth &#x3D; 内容宽度(width) + 内边距(padding)</li></ul></blockquote><blockquote><p>设置 box-sizing：border-box，就可以将一个 div 的上述 offsetwidth 变为原 width 的宽度、设置以后，width 的宽度将会比之前有所减少(因为它将 width、padding、border 的总体宽度缩放到设定的宽度值)</p></blockquote><h2 id="border-box-和-content-box-的区别"><a href="#border-box-和-content-box-的区别" class="headerlink" title="border-box 和 content-box 的区别"></a>border-box 和 content-box 的区别</h2><blockquote><p>border-box：怪异盒模型；会根据设定的宽度值缩放，到达设定的宽度值<br>content-box： 标准盒模型；盒子宽度 &#x3D; 内容的宽度 + 左右内间距 + 左右边框的宽度</p></blockquote><h2 id="margin-的纵向重叠问题"><a href="#margin-的纵向重叠问题" class="headerlink" title="margin 的纵向重叠问题"></a>margin 的纵向重叠问题</h2><blockquote><p>相邻元素的 margin-top 和 margin-bottom 会发生重叠，空白内容的 p 标签也会发生重叠，最终的 margin 值就是 margin-top 和 margin-bottom 中较大的</p></blockquote><h2 id="margin-的负值问题"><a href="#margin-的负值问题" class="headerlink" title="margin 的负值问题"></a>margin 的负值问题</h2><blockquote><p>对 margin 的 left、top、bottom、right 设定为负值会发生什么问题</p><ul><li>margin-top 和 margin-left 设置为负值会向上、向左移动（正常逻辑）</li><li>margin-right 设定为负值，该元素的右侧元素会发生左移，本身不受影响</li><li>margin-bottom 设定为负值，该元素的下方元素会发生上移，本身不受影响</li></ul></blockquote><h2 id="BFC-理解与应用：什么时候会发生-BFC，如何应用"><a href="#BFC-理解与应用：什么时候会发生-BFC，如何应用" class="headerlink" title="BFC 理解与应用：什么时候会发生 BFC，如何应用"></a>BFC 理解与应用：什么时候会发生 BFC，如何应用</h2><blockquote><p>BFC: block format context 块级格式化上下文<br>一块独立渲染区域，内部元素渲染不会影响边界以外的元素<br>形成 BFC 的常见条件：1）、float 不是 none 2）、position：absolute&#x2F;fiexed 3）、overflow 不是 visible 4）、display： inline-block&#x2F;flex<br>常见应用：清除浮动：就是对于使用了 float 的元素，可能会影响父元素或者兄弟元素，这时候可以对父元素或者兄弟元素使用 BFC，具体就是能够形成 BFC 的条件之一即可，影响了谁，谁就用 BFC，常用的一般是 .bfc { overflow: hidden; }，也可以使用 clear：both</p></blockquote><h2 id="position-的属性值以及区别"><a href="#position-的属性值以及区别" class="headerlink" title="position 的属性值以及区别"></a>position 的属性值以及区别</h2><blockquote><p>position 一共包含 static、relative、absolute、fixed 四个属性</p><ul><li>static：默认值，没有定位，元素出现在正常的文档流中</li><li>relative：依据自身进行定位，不会对外界元素产生影响</li><li>absolute：相对于 static 定位以外的第一个父元素进行定位，可通过 z-index 进行层次分级</li><li>fixed：生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。可通过 z-index 进行层次分级</li></ul></blockquote><h2 id="水平居中、垂直居中"><a href="#水平居中、垂直居中" class="headerlink" title="水平居中、垂直居中"></a>水平居中、垂直居中</h2><blockquote><p>水平居中</p><ul><li>行内元素（inline）：text-align：center</li><li>块状元素（block）：margin：auto</li><li>定位元素（absolute）：left：50%；margin-left：负值一半的宽度进行居中</li><li>定位元素（absolute）：left：50%；transform：translateX(-50%)</li></ul><p>垂直居中</p><ul><li>行内元素（inline）：line-height 值等于 height 值</li><li>absolute 元素：top：50%；margin-top：负值一半进行居中（需要指导元素的尺寸）</li><li>absolute 元素：top：50%；transform：translateY(-50%)</li><li>absolute 元素：top、left、bottom、right &#x3D; 0；margin：auto；</li></ul></blockquote><h2 id="line-height-继承问题"><a href="#line-height-继承问题" class="headerlink" title="line-height 继承问题"></a>line-height 继承问题</h2><blockquote><ul><li>如果继承的是具体的数值，则直接继承</li><li>如果是比例数值，比如 1、1.5、2，则是和自身的 font-size 相乘得到的具体数值</li><li>如果是百分比，则是和继承对象的 font-size 值相乘得到的具体数值</li></ul></blockquote><h2 id="rem、px、em、vh-x2F-vw"><a href="#rem、px、em、vh-x2F-vw" class="headerlink" title="rem、px、em、vh&#x2F;vw"></a>rem、px、em、vh&#x2F;vw</h2><blockquote><ul><li>px：绝对长度单位</li><li>em：相对长度单位，相对于父元素</li><li>rem：相对长度单位，相对于根元素，常用于响应式布局。弊端：阶梯性，因为需要使用@media 根据不同的屏幕大小决定根元素 font-size</li><li>网页视口尺寸：1）、window.screen.height 屏幕高度；2）、window.innerHeight 网页视口高度（就是属于网页的部分（也就是第一屏除了导航之外的））；3）、dowucment.body.clientHeight body 高度（网页的全部，就是包括滚动的）</li><li>vh 网页视口高度的 1&#x2F;100，vw 网页视口宽度的 1&#x2F;100 vmax 就是 vh、vw 两者的最大值，vmin 就是 vh、vw 两者的最小值</li></ul><p>响应式布局的常用方案</p><ul><li>Media-query：根据不同的屏幕宽度设置根元素的 font-size</li><li>rem：基于根元素的相对单位</li></ul></blockquote><h2 id="typeof-能识别哪些类型"><a href="#typeof-能识别哪些类型" class="headerlink" title="typeof 能识别哪些类型"></a>typeof 能识别哪些类型</h2><blockquote><ul><li>识别所有值类型。值类型包括：undefined、string、number、symbol、boolean 等</li><li>识别函数</li><li>识别是否是引用类型，但是不能确定是哪种引用类型</li></ul></blockquote><h2 id="何时使用-x3D-x3D-、何时使用-x3D-x3D-x3D"><a href="#何时使用-x3D-x3D-、何时使用-x3D-x3D-x3D" class="headerlink" title="何时使用&#x3D;&#x3D;、何时使用&#x3D;&#x3D;&#x3D;"></a>何时使用&#x3D;&#x3D;、何时使用&#x3D;&#x3D;&#x3D;</h2><blockquote><p>&#x3D;&#x3D; 会隐式的做一些类型转换，让比较两者尝试相等，所以一般除了 null 和 undefined 可以使用 &#x3D;&#x3D;，其余一律使用 &#x3D;&#x3D;&#x3D;<br>强制类型转换：parseInt、parseFloat，toString<br>隐式类型转换：if、逻辑运算、&#x3D;&#x3D;、+拼接字符串</p></blockquote><h2 id="值类型和引用类型的区别"><a href="#值类型和引用类型的区别" class="headerlink" title="值类型和引用类型的区别"></a>值类型和引用类型的区别</h2><blockquote><p>值类型赋值给其他变量，其他变量改变，不会影响之前的值，但是引用类型会</p></blockquote><h2 id="手写深拷贝"><a href="#手写深拷贝" class="headerlink" title="手写深拷贝"></a>手写深拷贝</h2><blockquote><ul><li>注意判断是值类型还是引用类型，如果是值类型就直接返回了，如果是引用类型还需要再往下判断是数组还是对象</li><li>注意判断是数组还是对象</li><li>递归</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化返回结果</span></span><br><span class="line">  <span class="keyword">let</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    res = [];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// 保证 key 不是原型的属性</span></span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      res[key] = <span class="title function_">deepCopy</span>(obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写-jquery"><a href="#手写-jquery" class="headerlink" title="手写 jquery"></a>手写 jquery</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">jQuery</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selector);</span><br><span class="line">    <span class="keyword">const</span> length = res.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>[i] = res[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = length;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">selector</span> = selector;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[index];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">each</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">this</span>[i];</span><br><span class="line">      <span class="title function_">fn</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">type, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="function">(<span class="params">elem</span>) =&gt;</span> &#123;</span><br><span class="line">      elem.<span class="title function_">addEventListener</span>(type, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插件扩展</span></span><br><span class="line">jQuery.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">dialog</span> = <span class="keyword">function</span> (<span class="params">info</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(info);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 造轮子</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myJQuery</span> <span class="keyword">extends</span> <span class="title class_ inherited__">jQuery</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(selector);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addClass</span>(<span class="params">className</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> $p = <span class="keyword">new</span> <span class="title function_">jQuery</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">$p.<span class="title function_">get</span>(<span class="number">1</span>);</span><br><span class="line">$p.<span class="title function_">each</span>(<span class="function">(<span class="params">elem</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(elem.<span class="property">nodeName</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$p.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（6-1）</title>
      <link href="/post/d8e8f03e.html"/>
      <url>/post/d8e8f03e.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>今天下午面试了另一家公司，总体来说，他问的东西不算很难，但是通常这种问题就是没有固定的答案的那种，所以究竟如何，我也不知道^^</p><h3 id="http-和-https"><a href="#http-和-https" class="headerlink" title="http 和 https"></a>http 和 https</h3><pre><code>背景</code></pre><blockquote><ul><li>HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了 Web 浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP 协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。端口 80，无状态连接</li><li>安全套接字层超文本传输协议 HTTPS，为了数据传输的安全，HTTPS 在 HTTP 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密.。<strong>HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL</strong> HTTPS 协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。端口 443</li></ul></blockquote><pre><code>区别</code></pre><blockquote><ul><li>https 协议需要到 CA（Certificate Authority，数字证书认证机构）申请证书，一般免费证书较少，因而需要一定费用</li><li>http 是明文传输，数据未加密，安全性差；https 则是具有安全性的 ssl 加密传输协议，安全性好</li><li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443</li><li>http 页面响应速度比 https 快，因为 http 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 https 除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包</li><li>https&#x3D;SSL&#x2F;TLS+http，所以，https 比 http 要更耗费服务器资源</li></ul></blockquote><pre><code>https的请求过程</code></pre><blockquote><p>客户端发起 HTTPS 请求：就是用户在浏览器里输入一个 https 网址，然后连接到 server 的 443 端口<br>采用 HTTPS 协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请，区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl 就是个不错的选择，有 1 年的免费服务)。<em>这套证书其实就是一对公钥和私钥，如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。</em><br>传送证书：这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等<br>客户端解析证书：这部分工作是有客户端的 TLS 来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密，就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容<br>传送加密信息：这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了<br>服务端解密信息：服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密，所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全<br>传输加密后的信息：这部分信息是服务段用私钥加密后的信息，可以在客户端被还原<br>客户端解密信息：客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容，整个过程第三方即使监听到了数据，也束手无策</p></blockquote><h3 id="vue2-和-vue3-的区别"><a href="#vue2-和-vue3-的区别" class="headerlink" title="vue2 和 vue3 的区别"></a>vue2 和 vue3 的区别</h3><blockquote><ul><li>生命周期函数钩子不同</li><li>数据双向绑定原理不同</li><li>定义变量和方法不同</li><li>指令和插槽的使用不同</li><li>API 类型不同</li><li>是否支持碎片</li><li>父子之间传参不同</li><li>main.js 文件中部分设置不同</li></ul></blockquote><pre><code>具体不同</code></pre><blockquote><ul><li>生命周期钩子不同：1）、vue2：beforeCreate 组件创建之前、created 组件创建之后、beforeMount 组件挂载到页面之前执行、mounted 组件挂载到页面之后执行、beforeUpdate 组件更新之前、updated 组件更新之后；2）、vue3：setup 开始创建组件、onBeforeMount 组件挂载到页面之前执行、onMounted 组件挂载到页面之后执行、onBeforeUpdate 组件更新之前、onUpdated 组件更新之后</li><li>数据双向绑定原理不同：vue2：利用 ES5 的 Object.defineProperty 对数据进行劫持，然后结合订阅&#x2F;发布实现；vue3：利用 ES6 的 proxy API 对数据进行代理</li><li>vue3 的 proxy 代理的优势在于：1）、defineProperty 只能监听某个属性，不能对全对象监听；2）、可以省去 for…in，闭包等内容来提升效率（直接绑定整个对象即可）；3）、可以监听数组，不再单独的对数组做特异性处理。可以检测到数组内部数据的变化；</li><li>定义变量和方法不同：1）、vue2：在 data 中定义变量，在 methods 中创建方法；2）、vue3：使用一个新的 setup 方法，使用 ref 和 reactive 来声明响应式数据</li><li>指令和插槽的使用不同：1）、vue2：不建议将 v-for 和 v-if 写在一起使用，允许直接使用 slot；2）、vue3：将 v-if 当作 v-for 大的一个判断语句，不会相互冲突；移除 keyCode 作为 v-on 的修饰符，不支持 config.keyCodes；移除 v-on.native 修饰符；移除过滤器 filter；不允许直接使用 slot，正确格式为 v-slot</li><li>API 类型不同：1）、vue2：选项型 api（在代码中分割不同属性：data，computed，methods 等；2）、vue3：组合型 api（使用方法进行分隔，显得更加简便整洁）</li><li>是否支持碎片：1）、vue2：不支持，每个组件只能有一个根节点；2）、vue3：支持，每个组件可以有多个根节点</li><li>父子传参不同：1）、vue2：父传子 子组件通过 prop 接收；子传父 子组件中通过$emit 向父组件触发一个监听方法，传递一个参数；2）、vue3：使用 setup()中的第二个参数 content 对象中有 emit，只需要在 setup()接收第二个参数中使用分解对象法取出 emit 就可以在 setup 方法中随意使用了，第一个参数时 prop</li><li>main.js 文件不同：1）、vue2：使用 prototype（原型）的形式进行操作，引入的是构造函数；2）、vue3：需要使用结构的形式进行操作，引入的是工厂函数；vue3 中 app 组件中可以没用根标签</li></ul></blockquote><pre><code>关于插槽的修改：使用的每一个slot都需要一个 template 包裹，且 slot=“名称” 修改为 v-slot:名称</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改前</span></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-bar-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">tab-bar-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../src/assets/img/tabbar/home.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="comment">// 父组件，子组件无需修改</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">tab-bar-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:item-icon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../src/assets/img/tabbar/home.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="ES6-中的新增的方法和具体的使用"><a href="#ES6-中的新增的方法和具体的使用" class="headerlink" title="ES6 中的新增的方法和具体的使用"></a>ES6 中的新增的方法和具体的使用</h3><p>这个之前的 ES6 中有详细的说明，在这里就不重复了</p><h3 id="数组的去重（包括数字、和根据数组中对象的名称进行的去重）"><a href="#数组的去重（包括数字、和根据数组中对象的名称进行的去重）" class="headerlink" title="数组的去重（包括数字、和根据数组中对象的名称进行的去重）"></a>数组的去重（包括数字、和根据数组中对象的名称进行的去重）</h3><blockquote><ul><li>如果是数字的去重的话，直接使用 ES6 中新增的 Set 即可</li><li>如果是数组中是一个个的对象，需要根据对象的名称去重的话，我当时回答的是使用 map，对数组进行遍历，然后用名称作为键值，如果不包含，则存入，包含不用管，继续即可</li></ul></blockquote><p>其他的根据对象中名称或者 id 进行去重的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">  arr = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张一&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张一&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;张二&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、通过forEach再通过some方法判断数组是否包含当前对象id，不包含则添加</span></span><br><span class="line"><span class="title function_">some</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">some</span>: any = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!some.<span class="title function_">some</span>(<span class="function"><span class="params">e</span> =&gt;</span> e.<span class="property">id</span> == el.<span class="property">id</span>)) &#123;</span><br><span class="line">      some.<span class="title function_">push</span>(el);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%c [ some去重结果 ]-43&#x27;</span>, <span class="string">&#x27;font-size:13px; background:pink; color:#bf2c9f;&#x27;</span>, some);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、通过forEach再通过find方法判断数组是否包含当前对象id，不包含则添加</span></span><br><span class="line"><span class="title function_">find</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">find</span>: any = [];</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!find.<span class="title function_">find</span>(<span class="function"><span class="params">e</span> =&gt;</span> e.<span class="property">id</span> == el.<span class="property">id</span>)) &#123;</span><br><span class="line">      find.<span class="title function_">push</span>(el);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%c [ find去重 ]-51&#x27;</span>, <span class="string">&#x27;font-size:13px; background:pink; color:#bf2c9f;&#x27;</span>, find);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、通过reduce方法，通过定义的obj，判断obj[next.id] 是否存在，存在设置为“”，不存在则push</span></span><br><span class="line"><span class="title function_">reduce</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> reduce = [];</span><br><span class="line">  reduce = <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">item, next</span>) &#123;</span><br><span class="line">    <span class="comment">//item为没有重复id的数组，next为当前对象</span></span><br><span class="line">    obj[next.<span class="property">id</span>] ? <span class="string">&#x27;&#x27;</span> : (obj[next.<span class="property">id</span>] = <span class="literal">true</span> &amp;&amp; item.<span class="title function_">push</span>(next));</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reduce);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vue-中父子声明周期的执行顺序"><a href="#vue-中父子声明周期的执行顺序" class="headerlink" title="vue 中父子声明周期的执行顺序"></a>vue 中父子声明周期的执行顺序</h3><p>这个之前面试也遇到过，前面的面试博客中也有总结，这里不重复了</p><h3 id="this-的指向问题（包括箭头函数的）"><a href="#this-的指向问题（包括箭头函数的）" class="headerlink" title="this 的指向问题（包括箭头函数的）"></a>this 的指向问题（包括箭头函数的）</h3><blockquote><ul><li>如果是普通函数，this 指向 window；如果是对象中的方法被调用，那就指向对象；如果使用 call、apply、bind 的话，传入什么就指向什么（指向第一个参数）；构造函数调用， 此时 this 指向 实例对象；通过事件绑定的方法， 此时 this 指向 绑定事件的对象；</li><li>当使用 call 或者 apply 的时候，如果我们传入的第一个参数为 null，函数体内的 this 会默认指向宿主对象，在浏览器中则是 window。bind()创建的是一个新的函数（称为绑定函数），与被调用函数有相同的函数体，当目标函数被调用时 this 的值绑定到 bind()的第一个参数上</li><li><strong>如果是箭头函数，this 指向是定义时所在的对象，而不是执行时的，箭头函数的 this 指向固定</strong> 箭头函数不会创建自己的 this，它只会从自己的作用域链的上一层继承 this（父级指向谁，当前箭头函数就指向谁）</li><li>在以下三种特殊情况下，this 指向 window：1）、立即执行函数（IIFE）2）、setTimeout 中传入的函数 3）、setInterval 中传入的函数</li></ul></blockquote><h3 id="let、var、const-的区别"><a href="#let、var、const-的区别" class="headerlink" title="let、var、const 的区别"></a>let、var、const 的区别</h3><p>这个问题之前也遇到并总结过，这里不重复了</p><h3 id="input-前一次输入比后一次返回晚，如何解决"><a href="#input-前一次输入比后一次返回晚，如何解决" class="headerlink" title="input 前一次输入比后一次返回晚，如何解决"></a>input 前一次输入比后一次返回晚，如何解决</h3><h3 id="如何判断是一个数组"><a href="#如何判断是一个数组" class="headerlink" title="如何判断是一个数组"></a>如何判断是一个数组</h3><blockquote><ul><li>a instanceof Array instanceof 运算符用于检验构造函数的 prototype 属性是否出现在对象的原型链中的任何位置，返回一个布尔值。但是 prototype 可以被修改。比如存在多个全局环境（iframe）</li><li>Array.isArray(a) 简单好用，而且对于多全局环境，Array.isArray() 同样能准确判断，但有个问题，Array.isArray() 是在 ES5 中提出，也就是说在 ES5 之前可能会存在不支持此方法的情况。解决办法如下</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="property">isArray</span>) &#123;</span><br><span class="line">  <span class="title class_">Array</span>.<span class="property">isArray</span> = <span class="keyword">function</span> (<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arg) === <span class="string">&quot;[object Array]&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>a.constructor &#x3D;&#x3D;&#x3D; Array 实例的构造函数属性 constructor 指向构造函数，那么通过 constructor 属性也可以判断是否为一个数组，问题和 instanceof 一样</li><li>Object.prototype.toString.call(a) &#x3D;&#x3D;&#x3D; ‘[object Array]’ Object.prototype.toString().call()可以获取到对象的不同类型，它强大的地方在于不仅仅可以检验是否为数组，比如是否是一个函数，是否是数字等等。<strong>甚至对于多全局环境时， Object.prototype.toString().call()也能符合预期处理判断</strong></li></ul></blockquote><h3 id="js-中的数据类型"><a href="#js-中的数据类型" class="headerlink" title="js 中的数据类型"></a>js 中的数据类型</h3><p>这个前面都总结过，也比较简单，这里不重复了</p><h3 id="冒泡和捕获"><a href="#冒泡和捕获" class="headerlink" title="冒泡和捕获"></a>冒泡和捕获</h3><pre><code>概念</code></pre><blockquote><ul><li>事件由子元素传递到父元素的过程叫做冒泡（false）冒泡就是子元素的点击事件会冒泡到父元素，就是相当于点击了多次，顺序是从子元素到父元素</li><li>事件由父元素传递到子元素的过程叫做事件捕获（ture）捕获就是子元素的点击事件会父元素执行到子元素，就是相当于点击了多次，顺序是从父元素到子元素</li></ul></blockquote><pre><code>区别</code></pre><blockquote><ul><li>在捕获事件触发的前提，我们需要使用事件监听 document.addEventListener(‘event’, funciton() {}, true) <strong>这里的 true 是布尔值判断是否为捕获事件，当为 true 时，这里为捕获事件，如果为 false 时，这里就是冒泡事件</strong></li></ul></blockquote><pre><code>预防</code></pre><blockquote><ul><li>e.stoppropagation(); 来阻止冒泡</li><li>e.preventDefault() 方法来阻止默认</li><li>return false; 既阻止冒泡又阻止默认</li></ul></blockquote><h3 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h3><blockquote><ul><li>git init 初始化 在工作路径上创建主分支</li><li>git clone 地址 克隆远程仓库</li><li>git clone -b 分支名 地址 克隆分支的代码到本地</li><li>git status 查看状态</li><li>git add . 将文件保存到本地</li><li>git checkout -b branch1 新创建分支 （如果当前分支存在就是切换，如果不存在就是创建）</li><li>git checkout master 切换到主分支</li><li>git commit -m “备注内容” 提交时使用，为了规范化</li><li>git push origin master 推送到远端</li><li>git pull origin master 从远端拉取</li><li>git branch 查看分支（就是显示创建的分支）</li><li>git merge xxx 可用来将某分支和当前分支进行合并</li><li>git diff 可用来查看修改文件的具体修改，不是新添加的，是修改的</li><li>git log 可用来查看提交记录</li><li>config user.name 用来配置提交的用户名</li><li>git config user.email 用来配置提交用户的邮箱，以便于知道谁提交的</li><li>git show “id” 可用来查看某次提交的具体内容 id 是 git log 中的，每次提交都有一个</li><li>checkout . 或者 git checkout 具体文件名 可用来撤销修改</li><li>git fetch 可用来把所有分支拉到本地</li><li>git blame 文件名 查看该文件的修改历史</li><li>git blame -L 100,10 文件名 从 100 行开始，到 110 行 逐行查看文件的修改历史</li><li>git mv a b 把 a 文件名字改成 b 并且直接放入 git add 后的暂存区</li><li>git mv b .&#x2F;demos&#x2F; 把 b 文件移动到 demos 文件夹下</li></ul></blockquote><h3 id="v-for-的渲染为何要加个-key"><a href="#v-for-的渲染为何要加个-key" class="headerlink" title="v-for 的渲染为何要加个 key"></a>v-for 的渲染为何要加个 key</h3><blockquote><ul><li>diff 算法中通过 tag 和 key 来判断，是否是 sameNode</li><li>减少渲染次数，提高渲染性能</li></ul></blockquote><h3 id="二维数组扁平化"><a href="#二维数组扁平化" class="headerlink" title="二维数组扁平化"></a>二维数组扁平化</h3><p>如果是二维的，可以使用 concat，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattern</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    res = res.<span class="title function_">concat</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">7</span>], <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flattern</span>(arr2));</span><br></pre></td></tr></table></figure><p>如果是多维的，递归遍历即可，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattern3</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)) &#123;</span><br><span class="line">      <span class="keyword">const</span> tmp = <span class="title function_">flattern3</span>(item);</span><br><span class="line">      <span class="comment">/* </span></span><br><span class="line"><span class="comment">        因为这一步返回的是数组，所以可以直接使用concat，因为concat自动扁平化一级的嵌套数组</span></span><br><span class="line"><span class="comment">        或者可以使用循环，然后push</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      res = res.<span class="title function_">concat</span>(tmp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">7</span>, [<span class="number">8</span>]]]], <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flattern3</span>(arr3));</span><br></pre></td></tr></table></figure><h3 id="如何删除数组中第二个位置的元素，并在第二个位置添加-3-个元素"><a href="#如何删除数组中第二个位置的元素，并在第二个位置添加-3-个元素" class="headerlink" title="如何删除数组中第二个位置的元素，并在第二个位置添加 3 个元素"></a>如何删除数组中第二个位置的元素，并在第二个位置添加 3 个元素</h3><blockquote><p>数组的 splice 方法<code>arrayObject.splice(index,howmany,item1,.....,itemX)</code> 该方法对数组直接进行修改</p><ul><li>index 必需。整数，规定添加&#x2F;删除项目的位置，使用负数可从数组结尾处规定位置</li><li>howmany 必需。要删除的项目数量。如果设置为 0，则不会删除项目</li><li>item1, …, itemX 可选。向数组添加的新项目</li></ul></blockquote><h3 id="使用-function-声明的函数和使用变量接收的函数有什么区别"><a href="#使用-function-声明的函数和使用变量接收的函数有什么区别" class="headerlink" title="使用 function 声明的函数和使用变量接收的函数有什么区别"></a>使用 function 声明的函数和使用变量接收的函数有什么区别</h3><blockquote><ul><li>使用 function 声明的函数，其 this 指向 window；<strong>function fn(){}这种形式声明的函数，会被提升到作用域的最最顶部</strong></li><li>使用变量接收的函数，其 this 指向函数</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="title function_">getName</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="title function_">getName</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述两者相同就是因为 function fn()&#123;&#125;这种形式声明的函数，会被提升到作用域的最最顶部</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncaught TypeError: fn is not a function</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（4-3）</title>
      <link href="/post/3f2999be.html"/>
      <url>/post/3f2999be.html</url>
      
        <content type="html"><![CDATA[<h2 id="总的概括-vue-的双向绑定原理"><a href="#总的概括-vue-的双向绑定原理" class="headerlink" title="总的概括 vue 的双向绑定原理"></a>总的概括 vue 的双向绑定原理</h2><blockquote><p>由于上一节的双向绑定原理是分开讲的，可能我们看每一部分都理解，再最后自己统一的串起来的时候，又有点迷糊了，所以写这一节，整的描述概括一下<br>整的一个思路是没有变的，还是分为以下几个步骤去思考</p><ul><li>输入框以及文本节点与 data 中的数据绑定</li><li>输入框内容变化时，data 中的数据同步变化。即 view &#x3D;&gt; model 的变化</li><li>data 中的数据变化时，文本节点的内容同步变化。即 model &#x3D;&gt; view 的变化</li></ul></blockquote><blockquote><p>整体过程描述如下：首先初始化的过程中，需要使用 data 中的属性数据替换 html 中的变量值，所以需要使用一个 compile 编译函数，在编译 HTML 过程中，为每个与 data 关联的节点生成一个 Watcher，Watcher 会执行 update 方法，该方法首先执行 get 去获取 data 中对应 name 的值，由于 vue 的双向绑定核心使用了 Object.defineProperty，它会对 data 中的所有属性在 get 时进行劫持，然后给其添加一个订阅者（只有进行编译触发 watcher 的 update 方法，然后触发 get 的时候，才会进入到 Object.defineProperty 的 get 方法，这时候添加的 Dep.target 就是 watcher，因为 watcher 中 Dep.target &#x3D; this）到 Dep 主题对象中，之后比如触发 dom 的各种事件对 data 中的属性值进行修改的时候，Object.defineProperty 中在 set 的时候（这时候先对比值是否变化了，变化了的话，先更新值，然后通知进行重新），就会触发 Dep 的发布通知，然后执行 update 方法，这个 update 也就是 watcher 中的 update，然后触发 get 重新获取新值，然后对该节点的值进行更新</p></blockquote><p>针对以下的 dom 元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dom = <span class="title function_">nodeToFragment</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nodeToFragment</span>(<span class="params">node, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="variable language_">document</span>.<span class="title function_">createFragment</span>();</span><br><span class="line">  <span class="keyword">let</span> child;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ((child = node.<span class="property">firstChild</span>)) &#123;</span><br><span class="line">    flag.<span class="title function_">appendChild</span>(child);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、对节点进行编译</span></span><br><span class="line">  <span class="title function_">compile</span>(flag, vm);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>).<span class="title function_">appendChild</span>(dom);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compile</span>(<span class="params">node, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果节点类型为元素</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> attrs = node.<span class="property">attributes</span>;</span><br><span class="line">    <span class="comment">// 解析属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; attrs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (attrs[i].<span class="property">nodeName</span> === <span class="string">&quot;v-model&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取v-model绑定的属性名</span></span><br><span class="line">        <span class="keyword">let</span> name = attrs[i].<span class="property">nodeValue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听input事件</span></span><br><span class="line">        node.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">          vm.<span class="property">data</span>[name] = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将data中声明的对应名称的值赋值给改节点</span></span><br><span class="line">        <span class="comment">// node.value = vm.data[name];</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、在编译 HTML 过程中，为每个与 data 关联的节点生成一个 Watcher</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, node, name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为text</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(node.<span class="property">nodeValue</span>)) &#123;</span><br><span class="line">      <span class="comment">// 获取匹配到的字符串</span></span><br><span class="line">      <span class="keyword">var</span> name = <span class="title class_">RegExp</span>.<span class="property">$1</span>;</span><br><span class="line">      name = name.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">      <span class="comment">// node.nodeValue = vm.data[name];</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4、在编译 HTML 过程中，为每个与 data 关联的节点生成一个 Watcher</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, node, name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Watcher</span>(<span class="params">vm, node, name</span>) &#123;</span><br><span class="line">  <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">node</span> = node;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">  <span class="comment">// 5、触发update</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">update</span>();</span><br><span class="line">  <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Watcher</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 6、触发get</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">get</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">nodeValue</span> = <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 7、在这一步才会触发到Object.defineProperty中的get方法，也就是这时候，将watcher(订阅者)添加到了Dep主题对象中</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">vm</span>.<span class="property">data</span>[<span class="variable language_">this</span>.<span class="property">name</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dep</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subs</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dep</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">addSub</span>: <span class="keyword">function</span> (<span class="params">sub</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">notify</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">sub</span>) &#123;</span><br><span class="line">      <span class="comment">// 10、接收通知、并执行update方法，因为这里面的sub就是watcher，所以会执行watcher中的update方法</span></span><br><span class="line">      sub.<span class="title function_">update</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 8、添加订阅者watcher到主题对象Dep（因为在编译的时候，会添加一个watcher，然后Dep.targte=this，this就是watcher）</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal === val) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在这一步对值进行了更新，然后触发通知，然后执行watcher的update操作，然后触发其中的get，就又回到了Object.defineProperty中的get方法，然后循环了就</span></span><br><span class="line">      vm.<span class="property">data</span>[key] = newVal;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 9、作为发布者发出通知</span></span><br><span class="line">      dep.<span class="title function_">notify</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj, vm</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="title function_">defineReactive</span>(vm, key, obj[key]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span> = options.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> data = <span class="variable language_">this</span>.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、首先使用Object.defineProperty对Vue实例中data的所有属性进行数据劫持，在get的时候绑定订阅者，在set的时候接收通知</span></span><br><span class="line">  <span class="title function_">observe</span>(data, <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> id = options.<span class="property">el</span>;</span><br><span class="line">  <span class="comment">// 2、将元素转换为节点并进行编译</span></span><br><span class="line">  <span class="keyword">var</span> dom = <span class="title function_">nodeToFragment</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id), <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 编译完成后，将dom返回到app中</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="title function_">appendChild</span>(dom);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（5-3）</title>
      <link href="/post/f4754a1b.html"/>
      <url>/post/f4754a1b.html</url>
      
        <content type="html"><![CDATA[<h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="comment">// 检查用户是否已登录</span></span><br><span class="line">    !isAuthenticated &amp;&amp;</span><br><span class="line">    <span class="comment">// ❗️ 避免无限重定向</span></span><br><span class="line">    to.<span class="property">name</span> !== <span class="string">&quot;Login&quot;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 将用户重定向到登录页面</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上所有都同 async 函数 和 Promise 工作方式一样</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// canUserAccess() 返回 `true` 或 `false`</span></span><br><span class="line">  <span class="keyword">const</span> canAccess = <span class="keyword">await</span> <span class="title function_">canUserAccess</span>(to);</span><br><span class="line">  <span class="keyword">if</span> (!canAccess) <span class="keyword">return</span> <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="全局解析守卫"><a href="#全局解析守卫" class="headerlink" title="全局解析守卫"></a>全局解析守卫</h3><blockquote><p>这和 router.beforeEach 类似，因为它在每次导航时都会触发，不同的是，解析守卫刚好会在导航被确认之前、所有组件内守卫和异步路由组件被解析之后调用 router.beforeResolve 是获取数据或执行任何其他操作（如果用户无法进入页面时你希望避免执行的操作）的理想位置。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeResolve</span>(<span class="keyword">async</span> (to) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresCamera</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">askForCameraPermission</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">NotAllowedError</span>) &#123;</span><br><span class="line">        <span class="comment">// ... 处理错误，然后取消导航</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 意料之外的错误，取消导航并把错误传给全局处理器</span></span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h3><blockquote><p>不会接受 next 函数也不会改变导航本身<br>它们对于分析、更改页面标题、声明页面等辅助功能以及许多其他事情都很有用<br>它们也反映了 navigation failures 作为第三个参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">sendToAnalytics</span>(to.<span class="property">fullPath</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, failure</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!failure) <span class="title function_">sendToAnalytics</span>(to.<span class="property">fullPath</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h3><blockquote><p>你可以直接在路由配置上定义 beforeEnter 守卫</p><ul><li>beforeEnter 守卫 只在进入路由时触发，不会在 params、query 或 hash 改变时触发。例如，从 &#x2F;users&#x2F;2 进入到 &#x2F;users&#x2F;3 或者从 &#x2F;users&#x2F;2#info 进入到 &#x2F;users&#x2F;2#projects。它们只有在 从一个不同的 路由导航时，才会被触发</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/users/:id&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserDetails</span>,</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// reject the navigation</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h3><blockquote><p>你可以为路由组件添加以下配置：</p><ul><li>beforeRouteEnter</li><li>beforeRouteUpdate</li><li>beforeRouteLeave</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">UserDetails</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`...`</span>,</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被验证前调用</span></span><br><span class="line">    <span class="comment">// 不能获取组件实例 `this` ！</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行时，组件实例还没被创建！</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 `/users/:id`，在 `/users/1` 和 `/users/2` 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 `UserDetails` 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 因为在这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 在导航离开渲染该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 与 `beforeRouteUpdate` 一样，它可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>beforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用，因此即将登场的新组件还没被创建<br>不过，你可以通过传一个回调给 next 来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数：<br>注意 beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持 传递回调，因为没有必要了<br>这个 离开守卫 通常用来预防用户在还未保存修改前突然离开。该导航可以通过返回 false 来取消。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">  <span class="comment">// just use `this`</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = to.<span class="property">params</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> answer = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;Do you really want to leave? you have unsaved changes!&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!answer) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由元信息（meta）"><a href="#路由元信息（meta）" class="headerlink" title="路由元信息（meta）"></a>路由元信息（meta）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/posts&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">PostsLayout</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;new&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">PostsNew</span>,</span><br><span class="line">        <span class="comment">// 只有经过身份验证的用户才能创建帖子</span></span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;:id&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">PostsDetail</span></span><br><span class="line">        <span class="comment">// 任何人都可以阅读文章</span></span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">false</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 而不是去检查每条路由记录</span></span><br><span class="line">  <span class="comment">// to.matched.some(record =&gt; record.meta.requiresAuth)</span></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresAuth</span> &amp;&amp; !auth.<span class="title function_">isLoggedIn</span>()) &#123;</span><br><span class="line">    <span class="comment">// 此路由需要授权，请检查是否已登录</span></span><br><span class="line">    <span class="comment">// 如果没有，则重定向到登录页面</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="comment">// 保存我们所在的位置，以便以后再来</span></span><br><span class="line">      <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: to.<span class="property">fullPath</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（5-2）</title>
      <link href="/post/4cc92d7e.html"/>
      <url>/post/4cc92d7e.html</url>
      
        <content type="html"><![CDATA[<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><h3 id="路由传参的几种形式"><a href="#路由传参的几种形式" class="headerlink" title="路由传参的几种形式"></a>路由传参的几种形式</h3><pre><code>静态路由</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面中定义和使用的方式</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--使用 router-link 组件进行导航 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--通过传递 `to` 来指定链接 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--`&lt;router-link&gt;` 将呈现一个带有正确 `href` 属性的 `&lt;a&gt;` 标签--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Go to Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>Go to About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// js文件中定义</span></span><br><span class="line"><span class="language-xml">// 1. 定义路由组件，也可以从其他文件导入</span></span><br><span class="line"><span class="language-xml">const Home = &#123; template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27; &#125;</span></span><br><span class="line"><span class="language-xml">const About = &#123; template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>About<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27; &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 2. 定义一些路由，每个路由都需要映射到一个组件</span></span><br><span class="line"><span class="language-xml">const routes = [</span></span><br><span class="line"><span class="language-xml">  &#123; path: &#x27;/&#x27;, component: Home &#125;,</span></span><br><span class="line"><span class="language-xml">  &#123; path: &#x27;/about&#x27;, component: About &#125;,</span></span><br><span class="line"><span class="language-xml">]</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 3. 创建路由实例并传递 `routes` 配置</span></span><br><span class="line"><span class="language-xml">const router = VueRouter.createRouter(&#123;</span></span><br><span class="line"><span class="language-xml">  // 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。</span></span><br><span class="line"><span class="language-xml">  history: VueRouter.createWebHashHistory(),</span></span><br><span class="line"><span class="language-xml">  // `routes: routes` 的缩写</span></span><br><span class="line"><span class="language-xml">  routes,</span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 5. 创建并挂载根实例</span></span><br><span class="line"><span class="language-xml">const app = Vue.createApp(&#123;&#125;)</span></span><br><span class="line"><span class="language-xml">// 确保 _use_ 路由实例使，整个应用支持路由。</span></span><br><span class="line"><span class="language-xml">app.use(router)</span></span><br><span class="line"><span class="language-xml">app.mount(&#x27;#app&#x27;)</span></span><br></pre></td></tr></table></figure><blockquote><p>通过调用 app.use(router)，我们会触发第一次导航且可以在任意组件中以 this.$router 的形式访问它，并且以 this.$route 的形式访问当前路由：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">username</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 我们很快就会看到 `params` 是什么</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">username</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">goToDashboard</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isAuthenticated) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/dashboard&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre><code>动态路由</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这些都会传递给 `createRouter`</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// 动态字段以冒号开始</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/users/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>你可以在同一个路由中设置有多个 路径参数，它们会映射到 $route.params 上的相应字段。例如：</p><table><thead><tr><th>匹配模式</th><th align="center">匹配路径</th><th>$route.params</th></tr></thead><tbody><tr><td>&#x2F;users&#x2F;:username</td><td align="center">&#x2F;users&#x2F;eduardo</td><td>{ username: ‘eduardo’ }</td></tr><tr><td>&#x2F;users&#x2F;:username&#x2F;posts&#x2F;:postId</td><td align="center">&#x2F;users&#x2F;eduardo&#x2F;posts&#x2F;123</td><td>{ username: ‘eduardo’, postId: ‘123’ }</td></tr></tbody></table><p>除了 $route.params 之外，$route 对象还公开了其他有用的信息，如 $route.query（如果 URL 中存在参数）、$route.hash 等</p></blockquote><pre><code>你也可以通过使用 ? 修饰符(0 个或 1 个)将一个参数标记为可选：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// 匹配 /users 和 /users/posva</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/users/:userId?&quot;</span> &#125;,</span><br><span class="line">  <span class="comment">// 匹配 /users 和 /users/42</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/users/:userId(\\d+)?&quot;</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><pre><code>嵌套路由</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要将组件渲染到这个嵌套的 router-view 中，我们需要在路由中配置 children：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/profile 匹配成功</span></span><br><span class="line">        <span class="comment">// UserProfile 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;profile&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">UserProfile</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/posts 匹配成功</span></span><br><span class="line">        <span class="comment">// UserPosts 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;posts&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">UserPosts</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>此时，按照上面的配置，当你访问 &#x2F;user&#x2F;eduardo 时，在 User 的 router-view 里面什么都不会呈现，因为没有匹配到嵌套路由。也许你确实想在那里渲染一些东西。在这种情况下，你可以提供一个空的嵌套路径：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">// 当 /user/:id 匹配成功</span></span><br><span class="line">      <span class="comment">// UserHome 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserHome</span> &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ...其他子路由</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><pre><code>嵌套的命名路由</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="comment">// 请注意，只有子路由具有名称</span></span><br><span class="line">    <span class="attr">children</span>: [&#123; <span class="attr">path</span>: <span class="string">&quot;&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserHome</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><ul><li>声明式路由：<router-link :to="..."></li><li>编程式路由：router.push(…)</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&quot;/users/eduardo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有路径的对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/users/eduardo&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由，并加上参数，让路由建立 url</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&quot;eduardo&quot;</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，结果是 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&quot;private&quot;</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带 hash，结果是 /about#team</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>, <span class="attr">hash</span>: <span class="string">&quot;#team&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path ：</span></span><br><span class="line"><span class="keyword">const</span> username = <span class="string">&quot;eduardo&quot;</span>;</span><br><span class="line"><span class="comment">// 我们可以手动建立 url，但我们必须自己处理编码 -&gt; /user/eduardo</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// 同样 -&gt; /user/eduardo</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span> &#125;);</span><br><span class="line"><span class="comment">// 如果可能的话，使用 `name` 和 `params` 从自动 URL 编码中获益  -&gt; /user/eduardo</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>, <span class="attr">params</span>: &#123; username &#125; &#125;);</span><br><span class="line"><span class="comment">// `params` 不能与 `path` 一起使用   -&gt; /user</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>, <span class="attr">params</span>: &#123; username &#125; &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 横跨历史</span></span><br><span class="line"><span class="comment">// 向前移动一条记录，与 router.forward() 相同</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一条记录，与 router.back() 相同</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前进 3 条记录</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有那么多记录，静默失败</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">100</span>);</span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><pre><code>router.push、router.replace 和 router.go 是 window.history.pushState、window.history.replaceState 和 window.history.go 的翻版命名路由</code></pre><blockquote><p>除了 path 之外，你还可以为任何路由提供 name。这有以下优点：</p><ul><li>没有硬编码的 URL</li><li>params 的自动编码&#x2F;解码</li><li>防止你在 url 中出现打字错误</li><li>绕过路径排序（如显示一个）</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:username&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要链接到一个命名的路由，可以向 router-link 组件的 to 属性传递一个对象：</span></span><br><span class="line">&lt;router-link :to=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123; username: &#x27;erina&#x27; &#125;&#125;&quot;</span>&gt;</span><br><span class="line">  <span class="title class_">User</span></span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这跟代码调用 router.push() 是一回事：</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;erina&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两种情况下，路由将导航到路径 /user/erina</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>重定向：<code>const routes = [&#123; path: &#39;/home&#39;, redirect: &#39;/&#39; &#125;]</code></li><li>重定向的目标也可以是一个命名的路由：const routes &#x3D; [{ path: ‘&#x2F;home’, redirect: { name: ‘homepage’ } }]</li><li>甚至是一个方法，动态返回重定向目标：</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// /search/screens -&gt; /search?q=screens</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/search/:searchText&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 方法接收目标路由作为参数</span></span><br><span class="line">      <span class="comment">// return 重定向的字符串路径/路径对象</span></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">path</span>: <span class="string">&quot;/search&quot;</span>, <span class="attr">query</span>: &#123; <span class="attr">q</span>: to.<span class="property">params</span>.<span class="property">searchText</span> &#125; &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/search&quot;</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><pre><code>相对重定向</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 将总是把/users/123/posts重定向到/users/123/profile。</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/users/:id/posts&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 该函数接收目标路由作为参数</span></span><br><span class="line">      <span class="comment">// 相对位置不以`/`开头</span></span><br><span class="line">      <span class="comment">// 或 &#123; path: &#x27;profile&#x27;&#125;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;profile&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>别名</p><blockquote><ul><li>通过别名，你可以自由地将 UI 结构映射到一个任意的 URL，而不受配置的嵌套结构的限制。使别名以 &#x2F; 开头，以使嵌套路径中的路径成为绝对路径。你甚至可以将两者结合起来，用一个数组提供多个别名：</li><li>如果你的路由有参数，请确保在任何绝对别名中包含它们</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: <span class="title class_">Homepage</span>, <span class="attr">alias</span>: <span class="string">&quot;/home&quot;</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/users&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UsersLayout</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">// 为这 3 个 URL 呈现 UserList</span></span><br><span class="line">      <span class="comment">// - /users</span></span><br><span class="line">      <span class="comment">// - /users/list</span></span><br><span class="line">      <span class="comment">// - /people</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserList</span>, <span class="attr">alias</span>: [<span class="string">&quot;/people&quot;</span>, <span class="string">&quot;list&quot;</span>] &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/users/:id&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UsersByIdLayout</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">// 为这 3 个 URL 呈现 UserDetails</span></span><br><span class="line">      <span class="comment">// - /users/24</span></span><br><span class="line">      <span class="comment">// - /users/24/profile</span></span><br><span class="line">      <span class="comment">// - /24</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;profile&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserDetails</span>, <span class="attr">alias</span>: [<span class="string">&quot;/:id&quot;</span>, <span class="string">&quot;&quot;</span>] &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="路由组件传参"><a href="#路由组件传参" class="headerlink" title="路由组件传参"></a>路由组件传参</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述可以替换为</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="comment">// 请确保添加一个与路由参数完全相同的 prop 名</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;id&quot;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;User &#123;&#123; id &#125;&#125;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;];</span><br></pre></td></tr></table></figure><pre><code>布尔模式：当 props 设置为 true 时，route.params 将被设置为组件的 props。命名视图：对于有命名视图的路由，你必须为每个命名视图定义 props 配置</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="attr">default</span>: <span class="title class_">User</span>, <span class="attr">sidebar</span>: <span class="title class_">Sidebar</span> &#125;,</span><br><span class="line">    <span class="attr">props</span>: &#123; <span class="attr">default</span>: <span class="literal">true</span>, <span class="attr">sidebar</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><pre><code>对象模式</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/search&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">SearchUser</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="function">(<span class="params">route</span>) =&gt;</span> (&#123; <span class="attr">query</span>: route.<span class="property">query</span>.<span class="property">q</span> &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//  /search?q=vue 将传递 &#123;query: &#x27;vue&#x27;&#125; 作为 props 传给 SearchUser 组件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（5-1）</title>
      <link href="/post/5e7c8290.html"/>
      <url>/post/5e7c8290.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>今天下午进行了又一个面试，今天的这个面试主要针对的是 vue，vue 部分我觉得回答的还可以，但是后面又被问到 vue-router（路由），这个还没有复习到，就是凭感觉回答了一点，很不好，然后就结束了，可能又凉了</p><h3 id="vue-的生命周期，父子生命周期的执行顺序"><a href="#vue-的生命周期，父子生命周期的执行顺序" class="headerlink" title="vue 的生命周期，父子生命周期的执行顺序"></a>vue 的生命周期，父子生命周期的执行顺序</h3><blockquote><p>挂载阶段记住，其他的比较容易记：父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p></blockquote><h3 id="ES6-的一些新增方法，列举四五个"><a href="#ES6-的一些新增方法，列举四五个" class="headerlink" title="ES6 的一些新增方法，列举四五个"></a>ES6 的一些新增方法，列举四五个</h3><blockquote><p>let、const、解构赋值、filter、箭头函数</p></blockquote><h3 id="const-定义的对象中的属性值能否修改"><a href="#const-定义的对象中的属性值能否修改" class="headerlink" title="const 定义的对象中的属性值能否修改"></a>const 定义的对象中的属性值能否修改</h3><p>const 定义的基础变量是不能修改的，对象可以，因为 const 的变量指向的是对象的内存地址</p><h3 id="vue-的双向数据绑定原理"><a href="#vue-的双向数据绑定原理" class="headerlink" title="vue 的双向数据绑定原理"></a>vue 的双向数据绑定原理</h3><p>这个问题上午刚被问过，然后中午我总结了以下，回答的还可以，这个问题可以在面试的 4-2 去看，解释的很详细</p><h3 id="vue-访问服务端，在哪个生命周期"><a href="#vue-访问服务端，在哪个生命周期" class="headerlink" title="vue 访问服务端，在哪个生命周期"></a>vue 访问服务端，在哪个生命周期</h3><p>这个问题问的挺多的，mounted</p><h3 id="promise-的-all-和-race，以及在哪些场景使用"><a href="#promise-的-all-和-race，以及在哪些场景使用" class="headerlink" title="promise 的 all 和 race，以及在哪些场景使用"></a>promise 的 all 和 race，以及在哪些场景使用</h3><blockquote><p>promise.all 可以将多个 Promise 实例包装成一个新的 Promise 实例。用于将多个 Promise 实例，包装成一个新的 Promise 实例</p><ul><li>它接受一个数组作为参数</li><li>数组可以是 Promise 对象，也可以是其它值，只有 Promise 会等待状态改变</li><li>当所有的子 Promise 都完成，该 Promise 完成，返回值是全部值的数组</li><li>如果有任何一个失败，该 Promise 失败，返回值是第一个失败的子 Promise 的结果</li><li><strong>使用场景：需要从不同的接口获取数据，并且两部分数据需要同时获得展示</strong></li></ul><p>类似于 Promise.all() ,区别在于 它有任意一个返回成功后，就算完成，但是 进程不会立即停止。常见使用场景：把异步操作和定时器放到一起，如果定时器先触发，认为超时，告知用户</p><ul><li><strong>使用场景：点击按钮发请求，当后端的接口超过一定时间，假设超过三秒，没有返回结果，我们就提示用户请求超时</strong></li></ul></blockquote><h3 id="vue-中父子通信的方式"><a href="#vue-中父子通信的方式" class="headerlink" title="vue 中父子通信的方式"></a>vue 中父子通信的方式</h3><pre><code>props 和 $emit、.async 修饰符、$refs（父组件访问子组件的数据和方法）、$parent（子组件访问父组件的数据和方法）、provide + inject、$attrs + $listeners</code></pre><blockquote><ul><li>props 和 $emit：父组件向子组件传递数据 :toods&#x3D;”todos” 传递函数 :deleteTodo&#x3D;”deleteTodo” 子组件接收：props: [‘todos’, ‘deleteTodo’]，也可以在接收的时候声明类型 props: { deleteTodo: { type: Function, required: true }}</li></ul></blockquote><p>props 的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串数组形式：</span></span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;likes&#x27;</span>, <span class="string">&#x27;isPublished&#x27;</span>, <span class="string">&#x27;commentIds&#x27;</span>, <span class="string">&#x27;author&#x27;</span>]</span><br><span class="line"><span class="comment">// 指定 props 值类型：</span></span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">likes</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">isPublished</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  <span class="attr">commentIds</span>: <span class="title class_">Array</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="title class_">Object</span>,</span><br><span class="line">  <span class="attr">callback</span>: <span class="title class_">Function</span>,</span><br><span class="line">  <span class="attr">contactsPromise</span>: <span class="title class_">Promise</span>,</span><br><span class="line">  <span class="attr">propE</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">    <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">    <span class="attr">default</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义验证函数</span></span><br><span class="line">  <span class="attr">propF</span>: &#123;</span><br><span class="line">    <span class="attr">validator</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="父子组件通信方式：props-和-emit-使用"><a href="#父子组件通信方式：props-和-emit-使用" class="headerlink" title="父子组件通信方式：props 和 $emit 使用"></a>父子组件通信方式：props 和 $emit 使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ChildrenDemo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeParentTitle&quot;</span>&gt;</span>点击更改父组件title<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">changeParentTitle</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 第一个参数是提交的事件名，后面的参数可以是多个需要传递给父组件的参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;childEvent&quot;</span>, <span class="string">&quot;子组件传给父组件的title&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件title值：&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">    <span class="tag">&lt;<span class="name">ChildrenDemo</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span> @<span class="attr">childEvent</span>=<span class="string">&quot;changeTitle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ChildrenDemo</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&lt;script&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">ChildrenDemo</span> <span class="keyword">from</span> <span class="string">&quot;@/views/components/ChildrenDemo&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">ChildrenDemo</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">title</span>: <span class="string">&quot;My Journey with Vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">changeTitle</span>: <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">title</span> = str</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="父子组件通信方式：-async-修饰符使用"><a href="#父子组件通信方式：-async-修饰符使用" class="headerlink" title="父子组件通信方式：.async 修饰符使用"></a>父子组件通信方式：.async 修饰符使用</h3><blockquote><ul><li>一般情况下，子组件不能直接修改从父组件接收的属性值，否则会报错，如果子组件需要接收值后处理再使用，可以将接收的值赋值给子组件本身的属性，如 data 中的属性或计算属性。如果希望子组件 prop 父组件中的值改变时，将变化同步到父组件中，可使用事件监听或**.async 修饰符**</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;h1&gt;父组件title值：&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ChildrenDemo</span> <span class="attr">:title.async</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ChildrenDemo</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ChildrenDemo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;childTitle&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 接收的父组件的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&quot;title&quot;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 在computed中处理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">childTitle</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">title</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 更新父组件中的title</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.$emit(<span class="string">&quot;update:title&quot;</span>, val);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><ul><li>如果要将一个对象的所有 property 都作为 prop 传入，你可以使用不带参数的 v-bind 比如 post: {id: 1,title: ‘My Journey with Vue’} 传递给子组件 <blog-post v-bind="post"></blog-post></li></ul></blockquote><h3 id="父子组件通信方式：-refs（父组件访问子组件的数据和方法）使用"><a href="#父子组件通信方式：-refs（父组件访问子组件的数据和方法）使用" class="headerlink" title="父子组件通信方式：$refs（父组件访问子组件的数据和方法）使用"></a>父子组件通信方式：$refs（父组件访问子组件的数据和方法）使用</h3><blockquote><ul><li>父组件使用 $refs 可以访问子组件的数据和方法，使用时需在调用子组件时给子组件定义一个 ref 名</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;<span class="title class_">ChildrenDemo</span> ref=<span class="string">&quot;childrenDemo&quot;</span>&gt;&lt;/<span class="title class_">ChildrenDemo</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getChildData&quot;</span>&gt;</span>点击获取子组件数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="attr">getChildData</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取子组件实例</span></span><br><span class="line">  <span class="keyword">let</span> child = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">childrenDemo</span></span><br><span class="line">  <span class="comment">// 访问子组件属性</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">value</span>);</span><br><span class="line">  <span class="comment">// 调用子组件的childFn()方法</span></span><br><span class="line">  child.<span class="title function_">childFn</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>$refs 只会在组件渲染完成之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的“逃生舱”——你应该避免在模板或计算属性中访问 $refs。</li><li>由于 ref 需要在 dom 渲染完成后才会有，在使用的时候确保 dom 已经渲染完成。比如在生命周期 mounted(){} 钩子中调用，或者在 this.$nextTick(()&#x3D;&gt;{}) 中调用。</li></ul></blockquote><h3 id="父子组件通信方式：-parent（子组件访问父组件的数据和方法）使用"><a href="#父子组件通信方式：-parent（子组件访问父组件的数据和方法）使用" class="headerlink" title="父子组件通信方式：$parent（子组件访问父组件的数据和方法）使用"></a>父子组件通信方式：$parent（子组件访问父组件的数据和方法）使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;button @click=<span class="string">&quot;getParentData&quot;</span>&gt;点击获取父组件数据&lt;/button&gt;</span><br><span class="line"><span class="title function_">getParentData</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 获取父组件实例</span></span><br><span class="line">  <span class="keyword">let</span> parent = <span class="variable language_">this</span>.<span class="property">$parent</span></span><br><span class="line">  <span class="comment">// 访问父组件属性</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(parent.<span class="property">parentValue</span>)</span><br><span class="line">  <span class="comment">// 调用父组件的方法parentFn()</span></span><br><span class="line">  parent.<span class="title function_">parentFn</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="父子组件通信方式：provide-inject-使用"><a href="#父子组件通信方式：provide-inject-使用" class="headerlink" title="父子组件通信方式：provide + inject 使用"></a>父子组件通信方式：provide + inject 使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Child</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">provide</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;周帅帅&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">inject</span>: [<span class="string">&#x27;name&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="父子组件通信方式：-attrs-listeners-使用"><a href="#父子组件通信方式：-attrs-listeners-使用" class="headerlink" title="父子组件通信方式：$attrs + $listeners 使用"></a>父子组件通信方式：$attrs + $listeners 使用</h3><blockquote><ul><li>我们在父组件(Parent.vue)中向子组件(Child.vue)传递 name 和 age，我们在父组件(Parent.vue)中定义了一个 parentName 事件监听器</li><li>我们在子组件(Child.vue)中可以通过 $listeners 获取到父组件(Parent.vue)中的 parentName，这样我们就能执行父组件(Parent.vue)中绑定的事件处理函数(changeName)。然后我们在子组件(Child.vue)里面引入孙子组件(GrandChild.vue)，将父组件(Parent.vue)传递给子组件(Child.vue)的 name 和 age 通过 v-bind&#x3D;”$attrs” 传递给孙子组件(GrandChild.vue)。</li><li>这样我们在孙子组件(GrandChild.vue)中就可以接收子组件(Child.vue)传递过来的 name 和 age 了。然后通过 $attrs.name 和 $attrs.age 来使用。</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;age&quot;</span> @<span class="attr">parentName</span>=<span class="string">&quot;changeName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Child</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;周帅帅&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">age</span>: <span class="number">24</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;小夏&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$listeners.parentName&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    // $attrs相当于子组件向孙子组件传递:name=&quot;name&quot; :age=&quot;age&quot;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">GrandChild</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">GrandChild</span> <span class="keyword">from</span> <span class="string">&#x27;./GrandChild.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">GrandChild</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 孙子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>孙子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：&#123;&#123; $attrs.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123; $attrs.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 如果不加这个属性，我们发现div中会携带name和age这两个属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">inheritAttrs</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（4-2）</title>
      <link href="/post/8795fedb.html"/>
      <url>/post/8795fedb.html</url>
      
        <content type="html"><![CDATA[<h2 id="理解-vue-的双向绑定原理"><a href="#理解-vue-的双向绑定原理" class="headerlink" title="理解 vue 的双向绑定原理"></a>理解 vue 的双向绑定原理</h2><pre><code>使用以下代码，理解 vue 双向绑定原理</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123; text &#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;hello world&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>首先将该任务分成几个子任务：</p><ul><li>输入框以及文本节点与 data 中的数据绑定</li><li>输入框内容变化时，data 中的数据同步变化。即 view &#x3D;&gt; model 的变化</li><li>data 中的数据变化时，文本节点的内容同步变化。即 model &#x3D;&gt; view 的变化</li></ul></blockquote><blockquote><ul><li>要实现任务一，需要对 DOM 进行编译，这里有一个知识点：DocumentFragment</li><li>DocumentFragment（文档片段）可以看作节点容器，它可以包含多个子节点，当我们将它插入到 DOM 中时，只有它的子节点会插入目标节点，所以把它看作一组节点的容器。使用 DocumentFragment 处理节点，速度和性能远远优于直接操作 DOM。Vue 进行编译时，就是将挂载目标的所有子节点劫持（真的是劫持，通过 append 方法，DOM 中的节点会被自动删除）到 DocumentFragment 中，经过一番处理后，再将 DocumentFragment 整体返回插入挂载目标。</li></ul></blockquote><pre><code>具体过程如下代码所示：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> dom = <span class="title function_">nodeToFragment</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">nodeToFragment</span>(<span class="params">node</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> flag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> child;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">while</span>(child = node.<span class="property">firstChild</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      flag.<span class="title function_">appendChild</span>(child);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> flag;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>).<span class="title function_">appendChild</span>(dom);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><pre><code>接下来是进行数据的初始化绑定:</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compile</span>(<span class="params">node, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为元素</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> attr = ndoe.<span class="property">attributes</span>;</span><br><span class="line">    <span class="comment">// 解析属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; attr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (attr[i].<span class="property">nodeName</span> == <span class="string">&quot;v-model&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取v-model绑定的属性名</span></span><br><span class="line">        <span class="keyword">var</span> name = attr[i].<span class="property">nodeValue</span>;</span><br><span class="line">        <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">        node.<span class="property">value</span> = vm.<span class="property">data</span>[name];</span><br><span class="line"></span><br><span class="line">        node.<span class="title function_">removeAttribute</span>(<span class="string">&quot;v-model&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为text</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(node.<span class="property">nodeValue</span>)) &#123;</span><br><span class="line">      <span class="comment">// 获取匹配到的字符串</span></span><br><span class="line">      <span class="keyword">var</span> name = <span class="title class_">RegExp</span>.<span class="property">$1</span>;</span><br><span class="line">      name = name.<span class="title function_">trim</span>();</span><br><span class="line">      <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">      node.<span class="property">nodeValue</span> = vm.<span class="property">data</span>[name];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">nodeToFragment</span>(<span class="params">node, vm</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">    <span class="keyword">var</span> child;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((child = node.<span class="property">firstChild</span>)) &#123;</span><br><span class="line">      <span class="comment">// 针对每一个节点，判断节点类型，根据包含的属性，进行赋值</span></span><br><span class="line">      <span class="title function_">compile</span>(child, vm);</span><br><span class="line"></span><br><span class="line">      flag.<span class="title function_">appendChild</span>(child);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值完毕，再将节点返回</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Vue</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = options.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">var</span> id = options.<span class="property">el</span>;</span><br><span class="line">    <span class="keyword">var</span> dom = <span class="title function_">nodeToFragment</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id), <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译完成后，将dom返回到app中</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="title function_">appendChild</span>(dom);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>上述工作可以完成任务一：输入框以及文本节点与 data 中的数据绑定接下来是进行 响应式的数据绑定：</code></pre><blockquote><p>再来看任务二的实现思路：当我们在输入框输入数据的时候，首先触发 input 事件（或者 keyup、change 事件），在相应的事件处理程序中，我们获取输入框的 value 并赋值给 vm 实例的 text 属性。我们会利用 defineProperty 将 data 中的 text 设置为 vm 的访问器属性，因此给 vm.text 赋值，就会触发 set 方法。在 set 方法中主要做两件事，第一是更新属性的值，第二留到任务三再说。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="title function_">fcuntion</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(newVal === val) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      val = newVal;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj, vm</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="title function_">defineReactive</span>(vm, key, obj[key]);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span> = options.<span class="property">data</span>;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="variable language_">this</span>.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">observe</span>(data, <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> id = options.<span class="property">el</span>;</span><br><span class="line">  <span class="keyword">var</span> dom = <span class="title function_">nodeToFragment</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id), <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 编译完成后，将dom返回到app中</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="title function_">appendChild</span>(dom);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compile</span>(<span class="params">node, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为元素</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> attr = ndoe.<span class="property">attributes</span>;</span><br><span class="line">    <span class="comment">// 解析属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; attr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (attr[i].<span class="property">nodeName</span> == <span class="string">&quot;v-model&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取v-model绑定的属性名</span></span><br><span class="line">        <span class="keyword">var</span> name = attr[i].<span class="property">nodeValue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听input事件</span></span><br><span class="line">        node.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">          vm.<span class="property">data</span>[name] = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">        node.<span class="property">value</span> = vm.<span class="property">data</span>[name];</span><br><span class="line"></span><br><span class="line">        node.<span class="title function_">removeAttribute</span>(<span class="string">&quot;v-model&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为text</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(node.<span class="property">nodeValue</span>)) &#123;</span><br><span class="line">      <span class="comment">// 获取匹配到的字符串</span></span><br><span class="line">      <span class="keyword">var</span> name = <span class="title class_">RegExp</span>.<span class="property">$1</span>;</span><br><span class="line">      name = name.<span class="title function_">trim</span>();</span><br><span class="line">      <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">      node.<span class="property">nodeValue</span> = vm.<span class="property">data</span>[name];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>之后进行 订阅/发布模式（subscribe &amp; publish）</code></pre><blockquote><p>text 属性变化了，set 方法触发了，但是文本节点的内容没有变化。如何让同样绑定到 text 的文本节点也同步变化呢？这里又有一个知识点：订阅发布模式。订阅发布模式（又称观察者模式）定义了一种一对多的关系，让多个观察者同时监听某一个主题对象，这个主题对象的状态发生改变时就会通知所有观察者对象。发布者发出通知 &#x3D;&gt; 主题对象收到通知并推送给订阅者 &#x3D;&gt; 订阅者执行相应操作</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pub = &#123;</span><br><span class="line">  <span class="attr">publish</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    dep.<span class="title function_">notify</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三个订阅者</span></span><br><span class="line"><span class="keyword">var</span> sub1 = &#123;</span><br><span class="line">  <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sub2 = &#123;</span><br><span class="line">  <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sub3 = &#123;</span><br><span class="line">  <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个主题对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dep</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subs</span> = [sub1, sub2, sub3];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dep</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">notify</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">sub</span>) &#123;</span><br><span class="line">    sub.<span class="title function_">update</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布订阅者消息，主题对象执行notify方法，进而触发订阅者执行update方法</span></span><br><span class="line"><span class="keyword">var</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span><br><span class="line">pub.<span class="title function_">publish</span>();</span><br></pre></td></tr></table></figure><blockquote><p>之前提到的，当 set 方法触发后做的第二件事就是作为发布者发出通知：“我是属性 text，我变了”。文本节点则是作为订阅者，在收到消息后执行相应的更新操作。</p></blockquote><pre><code>双向绑定的实现：</code></pre><blockquote><p>回顾一下，每当 new 一个 Vue，主要做了两件事：第一个是监听数据：observe(data)，第二个是编译 HTML：nodeToFragement(id)。在监听数据的过程中，会为 data 中的每一个属性生成一个主题对象 dep。在编译 HTML 的过程中，会为每个与数据绑定相关的节点生成一个订阅者 watcher，watcher 会将自己添加到相应属性的 dep 中。我们已经实现：修改输入框内容 &#x3D;&gt; 在事件回调函数中修改属性值 &#x3D;&gt; 触发属性的 set 方法。接下来我们要实现的是：发出通知 dep.notify() &#x3D;&gt; 触发订阅者的 update 方法 &#x3D;&gt; 更新视图。这里的关键逻辑是：如何将 watcher 添加到关联属性的 dep 中。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compile</span>(<span class="params">node, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为元素</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> attr = ndoe.<span class="property">attributes</span>;</span><br><span class="line">    <span class="comment">// 解析属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; attr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (attr[i].<span class="property">nodeName</span> == <span class="string">&quot;v-model&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取v-model绑定的属性名</span></span><br><span class="line">        <span class="keyword">var</span> name = attr[i].<span class="property">nodeValue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听input事件</span></span><br><span class="line">        node.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">          vm.<span class="property">data</span>[name] = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">        node.<span class="property">value</span> = vm.<span class="property">data</span>[name];</span><br><span class="line"></span><br><span class="line">        node.<span class="title function_">removeAttribute</span>(<span class="string">&quot;v-model&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点类型为text</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(node.<span class="property">nodeValue</span>)) &#123;</span><br><span class="line">      <span class="comment">// 获取匹配到的字符串</span></span><br><span class="line">      <span class="keyword">var</span> name = <span class="title class_">RegExp</span>.<span class="property">$1</span>;</span><br><span class="line">      name = name.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将data中的值赋值给该node</span></span><br><span class="line">      <span class="comment">// node.nodeValue = vm.data[name];</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在编译 HTML 过程中，为每个与 data 关联的节点生成一个 Watcher。</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, node, name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Watcher</span>(<span class="params">vm, node, name</span>) &#123;</span><br><span class="line">  <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">node</span> = node;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">update</span>();</span><br><span class="line">  <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Watcher</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">get</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">nodeValue</span> = <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">vm</span>.<span class="property">data</span>[<span class="variable language_">this</span>.<span class="property">name</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>首先，将自己赋给了一个全局变量 Dep.target；其次，执行了 update 方法，进而执行了 get 方法，get 的方法读取了 vm 的访问器属性，从而触发了访问器属性的 get 方法，get 方法中将该 watcher 添加到了对应访问器属性的 dep 中；再次，获取属性的值，然后更新视图。最后，将 Dep.target 设为空。因为它是全局变量，也是 watcher 与 dep 关联的唯一桥梁，任何时刻都必须保证 Dep.target 只有一个值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 添加订阅者watcher到主题对象Dep</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="title class_">Dep</span>.<span class="property">target</span>) dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>);</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="title function_">fcuntion</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(newVal === val) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      val = newVal;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 作为发布者发出通知</span></span><br><span class="line">      dep.<span class="title function_">notify</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dep</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subs</span> = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dep</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">addSub</span>: <span class="keyword">function</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">notify</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">      sub.<span class="title function_">update</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>至此，hello world 双向绑定就基本实现了。文本内容会随输入框内容同步变化，在控制器中修改 vm.text 的值，会同步反映到文本内容中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（4-1）</title>
      <link href="/post/95205135.html"/>
      <url>/post/95205135.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><pre><code>今天上午进行了一个面试（这次的面试官是个小哥），今天问的问题是和 vue 相关的，回答的过程相比之前可能又好了一点，成功与否，这个我还真不知道</code></pre><h3 id="vue-的双向绑定"><a href="#vue-的双向绑定" class="headerlink" title="vue 的双向绑定"></a>vue 的双向绑定</h3><blockquote><p>这个问题我可能回答的不太好，我说的是具体如何操作的，比如通过 data 去和页面绑定，data 来控制页面的展示，页面上的事件修改 data，形成一种双向。但是这个问题应该回答 defineProperty，双向绑定其原理是通过数据劫持+发布订阅模式相结合的方式来是实现的，简单来说就是数据层发生变化的时候，可同布更新视图层，当视图层发生变化的时候，同步更新数据层。通过 Object.defineProperty 对 data 的所有属性进行重新定义，给数据的获取和设置进行一个拦截功能（就是数据劫持），当 getter 获取数据的时候，就会给当前数据一个依赖收集（就是订阅者 Watcher），当数据 setter 更新时，就会通知对应的订阅者，进行视图更新如何视图更新呢？这我们需要一个，compile 解析模板指令，将模板中的变量替换成数据，绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图。</p></blockquote><h3 id="如何实现一个轮播图"><a href="#如何实现一个轮播图" class="headerlink" title="如何实现一个轮播图"></a>如何实现一个轮播图</h3><blockquote><p>首先，在一个 div 盒子中定义你需要轮播的图片，使用 css 控制图片在 div 中一行显示（overflow: hidden），设置一个定时器，一秒执行一次，主要控制的是图片的 margin-left 值（负值，这样才能让图片左移），到达最后一张以后，在回到第一张（margin-left 为 0）</p></blockquote><h3 id="less、sass-相对于-css-是什么"><a href="#less、sass-相对于-css-是什么" class="headerlink" title="less、sass 相对于 css 是什么"></a>less、sass 相对于 css 是什么</h3><pre><code>是一种预处理器</code></pre><h3 id="computed-和-watch-的区别以及什么时候用"><a href="#computed-和-watch-的区别以及什么时候用" class="headerlink" title="computed 和 watch 的区别以及什么时候用"></a>computed 和 watch 的区别以及什么时候用</h3><blockquote><p>computed 是对现有属性进行处理，返回一个新的属性值，有缓存。computed 是需要对数据进行处理的时候使用（比如展现格式）<br>watch 是对现有属性的一种监听。是在属性变化时，需要执行异步或者开销大的时候使用</p></blockquote><h3 id="vue-的生命周期以及调用后端在哪个生命周期"><a href="#vue-的生命周期以及调用后端在哪个生命周期" class="headerlink" title="vue 的生命周期以及调用后端在哪个生命周期"></a>vue 的生命周期以及调用后端在哪个生命周期</h3><blockquote><p>beforeCreate created beforeMount mounted beforeUpdate updated beforeDestroy destroyed<br>如果调用的是 data 中的数据，或者 methods 中的方法可以在 created 中，发请求如果需要操作 dom 就需要在 mounted 中</p></blockquote><h3 id="如果想在-jquery-上实现自己的方法，怎么做"><a href="#如果想在-jquery-上实现自己的方法，怎么做" class="headerlink" title="如果想在 jquery 上实现自己的方法，怎么做"></a>如果想在 jquery 上实现自己的方法，怎么做</h3><blockquote><p>如果是一个方法可以直接：$.fn.myFunc &#x3D; function() { … }<br>如果有多个方法，可以：$.fn.extend({<br>“myfunc1”: function() { … },<br>“myFunc2”: function() { … }<br>})</p></blockquote><h3 id="数据的深拷贝"><a href="#数据的深拷贝" class="headerlink" title="数据的深拷贝"></a>数据的深拷贝</h3><blockquote><ul><li>如果是简单的对象，也就是对象中只有一些简单的值变量，没有嵌套的对象的话，可以使用解构赋值，或者 Json.parse(Json.stringify(obj))</li><li>如果是复杂的对象，对象中包含对象的，那就需要写一个方法，对其进行遍历，直到都是值变量</li></ul></blockquote><h3 id="闭包是什么，是为了解决什么问题的，什么时候使用"><a href="#闭包是什么，是为了解决什么问题的，什么时候使用" class="headerlink" title="闭包是什么，是为了解决什么问题的，什么时候使用"></a>闭包是什么，是为了解决什么问题的，什么时候使用</h3><blockquote><p>「函数」和「函数内部能访问到的变量」的总和，就是一个闭包。可以把闭包简单理解成”定义在一个函数内部的函数”。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁</p><ul><li>闭包为什么需要嵌套函数呢？是因为需要局部变量，所以才把 local 放在一个函数里，如果不把 local 放在一个函数里，local 就是一个全局变量了，达不到使用闭包的目的——隐藏变量（如果没有局部变量，那就是全局变量，但全局变量可能会把值修改成范围外的值）</li><li>闭包为什么最后需要 return 一个函数呢？因为如果不 return，你就无法使用这个闭包。把 return bar 改成 window.bar &#x3D; bar 也是一样的，只要让外面可以访问到这个 bar 函数就行了</li><li>闭包常常用来「间接访问一个变量」。换句话说，「隐藏一个变量」</li><li><strong>变量的作用域是在函数定义声明的时候就是确定的，而非在函数运行时</strong></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">  <span class="attr">getNameFunc</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Window</span></span><br><span class="line"><span class="title function_">alert</span>(object.<span class="title function_">getNameFunc</span>()());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">  <span class="attr">getNameFunc</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> that.<span class="property">name</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// My Object</span></span><br><span class="line"><span class="title function_">alert</span>(object.<span class="title function_">getNameFunc</span>()());</span><br></pre></td></tr></table></figure><p>应用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">return</span> ++a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每次执行都会初始化 a = 1  结果：2、 2</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">fn</span>()());</span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">fn</span>()());</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outerFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">innerFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> innerFn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每次外部函数执行的时候,都会开辟一块内存空间,外部函数的地址不同,都会重新创建一个新的地址，结果为：1 2 3 1 2 3</span></span><br><span class="line"><span class="keyword">var</span> inner = <span class="title function_">outerFn</span>();</span><br><span class="line"><span class="title function_">inner</span>();</span><br><span class="line"><span class="title function_">inner</span>();</span><br><span class="line"><span class="title function_">inner</span>();</span><br><span class="line"><span class="keyword">var</span> inner2 = <span class="title function_">outerFn</span>();</span><br><span class="line"><span class="title function_">inner2</span>();</span><br><span class="line"><span class="title function_">inner2</span>();</span><br><span class="line"><span class="title function_">inner2</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 100  闭包找到的是同一地址中父级函数中对应变量最终的值</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> m = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getM</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">seta</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    m = val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">g</span> = getM;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">f</span> = seta;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="title function_">f</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">g</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数柯里化</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sum = x;</span><br><span class="line">  <span class="keyword">var</span> tmp = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    sum = sum + x;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;;</span><br><span class="line">  tmp.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 执行add(1)的时候，会将sum赋值为1，然后返回tmp函数，剩下tmp(2)(3)，执行tmp(2)的时候，因为需要用到add中的sum，所以sum不会被清除，这时就会将sum = sum + 2，也就是1 + 2，这时就剩下tmp(3)，再次执行，sum结果就变成了6，返回tmp函数，之后使用alert或者console.log的时候，会将内容自动转为字符串，所以alert(tmp)就是alert(tmp.toString())，而tmp.toString将输出改为return sum，所以返回是6</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">n, o</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">fun</span>: <span class="keyword">function</span> (<span class="params">m</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fun</span>(m, n);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// undefined，因为只传入了一个参数，会赋值给n，所以o就是undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">fun</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 0，因为a的返回值是fun: function(m) &#123; return fun(m, n) &#125;，这时候传参1，会赋值给m，因为里面用到n，所以上一步的n会被保留，这时候也就是return f(1, 0) 即赋值给了n，o，所以o是0，下面的a.fun(2) a.fun(3)是一样的</span></span><br><span class="line">a.<span class="title function_">fun</span>(<span class="number">1</span>);</span><br><span class="line">a.<span class="title function_">fun</span>(<span class="number">2</span>);</span><br><span class="line">a.<span class="title function_">fun</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 首先使用fun(0)n赋值为0，返回的是fun: function(m) &#123; return fun(m, n) &#125;，在继续调用fun(1)，m是1，n是0，又回到fun外层，即fun(n, o)，所以n是1，o是0，再调用fun(2)，m是2，n是1、又回到外层fun(n, o)，所以n是2，o是1，再调用fun(3)，m是3，n是2、又回到外层fun(n, o)，所以n是3，o是2，所以最后的结果就是：undefined  0  1  2</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">fun</span>(<span class="number">0</span>).<span class="title function_">fun</span>(<span class="number">1</span>).<span class="title function_">fun</span>(<span class="number">2</span>).<span class="title function_">fun</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// undefined  0  1  1</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="title function_">fun</span>(<span class="number">0</span>).<span class="title function_">fun</span>(<span class="number">1</span>);</span><br><span class="line">c.<span class="title function_">fun</span>(<span class="number">2</span>);</span><br><span class="line">c.<span class="title function_">fun</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件处理函数中闭包的写法</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">    lis[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i是var声明的全局变量，如果不使用闭包，每次打印的i都是最后的值，除了使用闭包，还可以使用let声明i</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（3-1）</title>
      <link href="/post/8825618d.html"/>
      <url>/post/8825618d.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>2023 年 6 月 21 号下午开启了又一次的面试，面试官是个小姐姐（发现面试前端的都是小姐姐），前面的一些概念性或者口头回答的问题回答的自己感觉比上次好了一点（promise 那个又给记错了…），主要是最后一个共享屏幕写代码，没有写出来，就凉了</p><h3 id="flex-的相关问题"><a href="#flex-的相关问题" class="headerlink" title="flex 的相关问题"></a>flex 的相关问题</h3><blockquote><ul><li><p>align-content<br>设置侧轴上(纵轴)的所有子元素排列方式</p></li><li><p>align-items<br>设置侧轴上子元素自己的排列方式</p></li></ul></blockquote><h3 id="css3-的相关问题"><a href="#css3-的相关问题" class="headerlink" title="css3 的相关问题"></a>css3 的相关问题</h3><blockquote><ul><li>css3 画三角形<br>使用 border 代替 width、height、，然后选定一个方向，将其他方向的颜色指定为透明色即可</li><li>css3 画空心三角形<br>这个我当时没有回答出来，一个简单的方法是使用伪元素或者其他元素通过定位，画一个小一点的三角形，然后背景色改为透明色即可；由这种想法还可以通过画同样大小的三角形，然后一个靠上，一个靠下，这样就能画出一个箭头的形状</li></ul></blockquote><h3 id="各种居中问题"><a href="#各种居中问题" class="headerlink" title="各种居中问题"></a>各种居中问题</h3><blockquote><p>水平居中</p><ul><li>行内元素通过：text-align: center; 即可</li><li>块状元素通过：margin: auto; 或者定位元素的话，可以通过 left: 50%; transform: translateX(-50%); 如果知道宽高的话，还可以通过 left: 50%; margin-left: -一半的宽即可</li></ul><p>垂直居中</p><ul><li>行内元素通过设定和 height 一样大小的 line-height 即可</li><li>块状元素有几种方式都可以：针对定位元素：1、在知道宽高的情况下，通过 top：50%; margin-top: -一半的高度即可；2、不知道宽高的情况下可以通过 top: 50%; transform: translateY(-50%); 即可；或者通过 left、top、bottom、right 设定为 0，然后 margin: auto 即可</li></ul></blockquote><h3 id="promise-的相关问题"><a href="#promise-的相关问题" class="headerlink" title="promise 的相关问题"></a>promise 的相关问题</h3><pre><code>以下代码输出什么</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promiseConsole</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">promiseConsole</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出为：1、2、4、5，promise在构建的时候，就会执行 executor 函数，resolve 和 reject 两个函数作为参数传递给 executor，所以先输出 1，然后reject和resolve属于微任务（异步），所以接下来输出 2，然后再输出 4，最后先执行 reject 所以输出5、因为执行了 reject，所以后续就不执行了</span></span><br></pre></td></tr></table></figure><h3 id="共享屏幕的编码"><a href="#共享屏幕的编码" class="headerlink" title="共享屏幕的编码"></a>共享屏幕的编码</h3><p>将 data 数据转换为 data1（即是将 js 的数据转换为树状结构，或者说目录型的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">pid</span>: -<span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">&quot;1-1&quot;</span>, <span class="attr">pid</span>: <span class="number">101</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">&quot;1-1-1&quot;</span>, <span class="attr">pid</span>: <span class="number">102</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">104</span>, <span class="attr">name</span>: <span class="string">&quot;1-2 &quot;</span>, <span class="attr">pid</span>: <span class="number">101</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">202</span>, <span class="attr">name</span>: <span class="string">&quot;2-3&quot;</span>, <span class="attr">pid</span>: <span class="number">201</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">201</span>, <span class="attr">name</span>: <span class="string">&quot;2&quot;</span>, <span class="attr">pid</span>: -<span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">203</span>, <span class="attr">name</span>: <span class="string">&quot;2-1&quot;</span>, <span class="attr">pid</span>: <span class="number">201</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">204</span>, <span class="attr">name</span>: <span class="string">&quot;2-2&quot;</span>, <span class="attr">pid</span>: <span class="number">201</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">301</span>, <span class="attr">name</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">pid</span>: -<span class="number">1</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data1 = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">101</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">pid</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">102</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;1-1&quot;</span>,</span><br><span class="line">        <span class="attr">pid</span>: <span class="number">101</span>,</span><br><span class="line">        <span class="attr">children</span>: [&#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">&quot;1-1-1&quot;</span>, <span class="attr">pid</span>: <span class="number">102</span> &#125;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">104</span>, <span class="attr">name</span>: <span class="string">&quot;1-2 &quot;</span>, <span class="attr">pid</span>: <span class="number">101</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">201</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="attr">pid</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">202</span>, <span class="attr">name</span>: <span class="string">&quot;2-3&quot;</span>, <span class="attr">pid</span>: <span class="number">201</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">203</span>, <span class="attr">name</span>: <span class="string">&quot;2-1&quot;</span>, <span class="attr">pid</span>: <span class="number">201</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">204</span>, <span class="attr">name</span>: <span class="string">&quot;2-2&quot;</span>, <span class="attr">pid</span>: <span class="number">201</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">301</span>, <span class="attr">name</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">pid</span>: -<span class="number">1</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、非递归，使用 map 不改变原有数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toTree</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    map[item.<span class="property">id</span>] = item;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> parent = map[item.<span class="property">pid</span>];</span><br><span class="line">    <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">      parent.<span class="property">children</span> = parent.<span class="property">children</span> || [];</span><br><span class="line">      parent.<span class="property">children</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">toTree</span>(data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、递归，不改变原有数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toTree2</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    map[item.<span class="property">id</span>] = item;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  res = <span class="title function_">recur</span>(arr, map, -<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">recur</span>(<span class="params">arr, mapArr, rootVal</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">pid</span> == rootVal) &#123;</span><br><span class="line">      <span class="keyword">const</span> children = <span class="title function_">recur</span>(arr, mapArr, item.<span class="property">id</span>);</span><br><span class="line">      <span class="keyword">if</span> (children.<span class="property">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        item.<span class="property">children</span> = children;</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">toTree2</span>(data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、递归，改变原有数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toTree3</span>(<span class="params">list, rootValue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">pid</span> === rootValue) &#123;</span><br><span class="line">      <span class="keyword">const</span> children = <span class="title function_">toTree3</span>(list, item.<span class="property">id</span>);</span><br><span class="line">      <span class="keyword">if</span> (children.<span class="property">length</span>) &#123;</span><br><span class="line">        item.<span class="property">children</span> = children;</span><br><span class="line">      &#125;</span><br><span class="line">      arr.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">toTree3</span>(data, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、使用 reduce</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toTree4</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 最终树形数组</span></span><br><span class="line">  <span class="keyword">const</span> treeData = [];</span><br><span class="line">  <span class="comment">// 深拷贝</span></span><br><span class="line">  <span class="keyword">const</span> arrClone = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr));</span><br><span class="line">  <span class="comment">// 映射表 =&gt; 快速找到上级</span></span><br><span class="line">  <span class="keyword">const</span> mapInfo = arrClone.<span class="title function_">reduce</span>(<span class="function">(<span class="params">obj, item</span>) =&gt;</span> &#123;</span><br><span class="line">    item.<span class="property">children</span> = [];</span><br><span class="line">    obj[item.<span class="property">id</span>] = item;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转树</span></span><br><span class="line">  arrClone.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parent = mapInfo[item.<span class="property">pid</span>];</span><br><span class="line">    <span class="comment">// 如果父节点存在, 直接push到父级的children数组里面</span></span><br><span class="line">    <span class="comment">// 如果父级不存在, 说明本身就是一级, 直接push到treeData数组</span></span><br><span class="line">    parent ? parent.<span class="property">children</span>.<span class="title function_">push</span>(item) : treeData.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 打印结果</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(treeData);</span><br><span class="line">  <span class="comment">// 查看原数组是否有变化</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">  <span class="keyword">return</span> treeData;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">toTree4</span>(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、使用filter</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toTree5</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="comment">// 深拷贝避免影响源数据</span></span><br><span class="line">  <span class="keyword">const</span> cloneData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr));</span><br><span class="line">  <span class="keyword">return</span> cloneData.<span class="title function_">filter</span>(<span class="function">(<span class="params">father</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 循环所有项，并添加children属性</span></span><br><span class="line">    <span class="comment">// 筛选出此项的所有子元素</span></span><br><span class="line">    <span class="keyword">const</span> branchArr = cloneData.<span class="title function_">filter</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> father.<span class="property">id</span> === child.<span class="property">pid</span>);</span><br><span class="line">    <span class="comment">// 给父级添加一个children属性，并赋值</span></span><br><span class="line">    branchArr.<span class="property">length</span> &gt; <span class="number">0</span> ? (father.<span class="property">children</span> = branchArr) : <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// father.children = branchArr 如果希望每个元素无论有没有children都添加children属性  可以直接赋值</span></span><br><span class="line">    <span class="comment">// 返回pid为&#x27;-1&#x27;的顶级节点</span></span><br><span class="line">    <span class="keyword">return</span> father.<span class="property">pid</span> === -<span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">toTree5</span>(data);</span><br></pre></td></tr></table></figure><pre><code>希望通过大量的面试还有自己的总结以及相关知识的进一步学习，能够在秋招时找到一份还不错的工作！</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（2-5）</title>
      <link href="/post/cc1b257f.html"/>
      <url>/post/cc1b257f.html</url>
      
        <content type="html"><![CDATA[<h2 id="ES6-相关"><a href="#ES6-相关" class="headerlink" title="ES6 相关"></a>ES6 相关</h2><h3 id="ES6-新增的功能"><a href="#ES6-新增的功能" class="headerlink" title="ES6 新增的功能"></a>ES6 新增的功能</h3><h3 id="var、let、const"><a href="#var、let、const" class="headerlink" title="var、let、const"></a>var、let、const</h3><p>var 声明变量存在变量提升，let 和 const 不存在变量提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// undefined  ===&gt;  a已声明还没赋值，默认得到undefined值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="comment">// 报错：c is not defined  ===&gt; 找不到c这个变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// a=100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p>let 和 const 只能在块作用域里访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">const</span> c = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="comment">// 报错：c is not defined  ===&gt; 找不到c这个变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br></pre></td></tr></table></figure><p>同一作用域下 let 和 const 不能声明同名变量，而 var 可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 控制台输出 100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 控制台输出 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台报错：Identifier &#x27;a&#x27; has already been declared  ===&gt; 标识符a已经被声明了。</span></span><br></pre></td></tr></table></figure><p>const 定义常量，而且不能修改，但是在定义的对象时对象属性值可以改变。因为常量指的是内存中的地址，只要地址不变，地址里面的值如果是基础值，可以修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">2</span>;</span><br><span class="line">a = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 控制台报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;make&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="comment">// 运行发现控制台没有报错，且 person.name 被成功修改</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><h3 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h3><p>Symbol 是 ES6 中引入的一种新的基本数据类型，用于表示一个独一无二的值，不能与其他数据类型进行运算</p><p>使用 Symbol()创建一个 Symbol 类型的值并赋值给 a 变量后，你就得到了一个在内存中独一无二的值。现在除了通过变量 a，任何人在任何作用域内都无法重新创建出这个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> b = <span class="title class_">Symbol</span>();</span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><blockquote><ul><li>在 ES6 之前，处理模板字符串：通过“\”和“+”来构建模板</li><li>对 ES6 来说：用${}来界定；反引号(&#96;&#96;)直接搞定</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;xxxxxx&quot;</span>;</span><br><span class="line"><span class="comment">// es6之前</span></span><br><span class="line"><span class="keyword">let</span> html = <span class="string">&quot;&lt;div&gt; + &lt;a&gt; &quot;</span> + url + <span class="string">&quot; &lt;/a&gt;&lt;/div&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> eshtml = <span class="string">`&lt;div&gt;&lt;a&gt;<span class="subst">$&#123;url&#125;</span>&lt;/a&gt;&lt;/div&gt;`</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串新方法"><a href="#字符串新方法" class="headerlink" title="字符串新方法"></a>字符串新方法</h3><blockquote><ul><li>includes()判断字符串是否包含参数字符串，返回 boolean 值</li><li>startsWith() | endsWith()，判断字符串是否以参数字符串开头或结尾。返回 boolean 值。这两个方法可以有第二个参数，一个数字，表示开始查找的位置</li><li>repeat()方法按指定次数返回一个新的字符串</li><li>padStart()&#x2F;padEnd()，用参数字符串按给定长度从前面或后面补全字符串，返回新字符串</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;blue,red,orange,white&quot;</span>;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">str.<span class="title function_">startsWith</span>(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">str.<span class="title function_">endsWith</span>(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x27;hellohello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>.<span class="title function_">repeat</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="string">&quot;hell&quot;</span>;</span><br><span class="line"><span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">padEnd</span>(<span class="number">5</span>, <span class="string">&quot;o&quot;</span>));</span><br><span class="line"><span class="comment">// &#x27;helloo&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">padEnd</span>(<span class="number">6</span>, <span class="string">&quot;o&quot;</span>));</span><br><span class="line"><span class="comment">// &#x27;hell  &#x27;,如果没有指定将用空格代替</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">padEnd</span>(<span class="number">6</span>));</span><br><span class="line"><span class="comment">// &#x27;ohell&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">padStart</span>(<span class="number">5</span>, <span class="string">&quot;o&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="解构表达式"><a href="#解构表达式" class="headerlink" title="解构表达式"></a>解构表达式</h3><p>字符串、以及 ES6 新增的 Map 和 Set 都可以使用解构表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组解构</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, , <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 1, undefined, 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a,,b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 1, 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line"><span class="keyword">let</span> [a,..<span class="property">b</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// ...是剩余运算符，表示赋值运算符右边除第一个值外剩余的都赋值给b</span></span><br><span class="line"><span class="comment">// 1, [2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象解构</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;ren&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">sex</span>: <span class="string">&quot;male&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; name, age, sex &#125; = obj;</span><br><span class="line"><span class="comment">// &#x27;ren&#x27; 12 &#x27;male&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, sex);</span><br><span class="line"><span class="comment">// 自定义变量名</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: myName, <span class="attr">age</span>: myAge, <span class="attr">sex</span>: mySex &#125; = obj;</span><br><span class="line"><span class="comment">// &#x27;ren&#x27; 12 &#x27;male&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName, myAge, mySex);</span><br></pre></td></tr></table></figure><h3 id="map-和-set"><a href="#map-和-set" class="headerlink" title="map 和 set"></a>map 和 set</h3><blockquote><ul><li>object 的键只能是字符串或 ES6 的 symbol 值，而 Map 可以是任何值</li><li>Map 对象有一个 size 属性，存储了键值对的个数，而 object 对象没有类似属性</li><li>Set 对象和 Map 对象类似，但它存储不是键值对。类似数组，但它的每个元素都是唯一的</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ren&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;age&quot;</span>, <span class="number">12</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// &#123;&#x27;name&#x27;=&gt;&#x27;ren&#x27;,&#x27;age&#x27;=&gt;12&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap);</span><br><span class="line"></span><br><span class="line">myMap.<span class="title function_">set</span>(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="comment">// &#123;&#x27;name&#x27;=&gt;&#x27;ren&#x27;,&#x27;age&#x27;=&gt;12,&#x27;sex&#x27;=&gt;&#x27;male&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap.<span class="property">size</span>);</span><br><span class="line"><span class="comment">// &#x27;ren&#x27;</span></span><br><span class="line">myMap.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">myMap.<span class="title function_">has</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">myMap.<span class="title function_">delete</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">myMap.<span class="title function_">has</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line">myMap.<span class="title function_">get</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 里面要传一个数组，否则会报错</span></span><br><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet);</span><br><span class="line"></span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">mySet.<span class="title function_">delete</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">mySet.<span class="title function_">has</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// &#123;2, 3, 4&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet);</span><br></pre></td></tr></table></figure><p>利用 Set 对象唯一性的特点，可以轻松实现数组的去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(mySet);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><h3 id="数组的新方法"><a href="#数组的新方法" class="headerlink" title="数组的新方法"></a>数组的新方法</h3><blockquote><ul><li>Array.from() 是内置对象 Array 的方法，实例数组不能调用</li><li>includes()、map()、filter()、forEach()、find()、some()、every()</li><li>Array.from() 三个参数：第一个表示将被转换的可迭代对象(如果只有一个参数就是把形参转变成数组)；第二个是回调函数，将对每个数组元素应用该回调函数，然后返回新的值到新数组；第三个是回调函数内 this 的指向</li><li>map() 要利用原数组经过运算后的数组，或者从对象数组中拿某个属性</li><li>filter() 是将符合挑选的筛选出来成为一个新数组，新数组不会影响旧数组</li><li>forEach() 是循环遍历数组中的每一项，没有返回值</li><li>find() 是查找数组中符合条件的第一个元素，直接将这个元素返回出来</li><li>some() 找到一个符合条件的就返回 true,所有都不符合返回 false</li><li>every() 数组所有值都符合条件才会返回 true,有一个不符合返回 false</li></ul></blockquote><h3 id="object-的新方法"><a href="#object-的新方法" class="headerlink" title="object 的新方法"></a>object 的新方法</h3><pre><code>在 ES6 中，添加了Object.is()、Object.assign()、Object.keys()、Object.values()、Object.entries()等方法</code></pre><blockquote><ul><li>Object.is()方法用来判断两个值是否为同一个值，返回一个布尔类型的值</li><li>Object.assign()方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象，并返回目标对象</li><li>Object.keys() 返回对象所有属性；Object.values() 返回对象所有属性值；Object.entries() 返回多个数组，每个数组是 key–value</li></ul></blockquote><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><blockquote><ul><li>箭头函数实现了一种更加简洁的书写方式。箭头函数内部没有 arguments，也没有 prototype 属性，所以不能用 new 关键字调用箭头函数</li><li>箭头函数和普通函数最大的区别在于其内部 this 永远指向其父级对象的 this</li><li><strong>作为方法的箭头函数 this 指向全局 window 对象，而普通函数则指向调用它的对象</strong></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">456</span>,</span><br><span class="line">  <span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// this指向window</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 123</span></span><br><span class="line">obj.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><blockquote><ul><li>class 作为对象的模板被引入 ES6，你可以通过 class 关键字定义类。class 的本质依然是一个函数</li><li>类的继承通过 extends 关键字实现</li><li>子类必须在 constructor 中调用 super()</li></ul></blockquote><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><blockquote><ul><li>ES6 使用关键字 import 导入模块（文件），有两种常用的方式</li><li>ES6 通过 export 和 export default 导出模块</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> ‘模块名称’  <span class="keyword">from</span>  ‘路径’；</span><br><span class="line"><span class="keyword">import</span>  ‘路径’；</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;ren&#x27;</span>,age = <span class="number">12</span>;</span><br><span class="line"><span class="comment">// 注意：变量需要用大括号包裹，然后才能向外输出</span></span><br><span class="line"><span class="keyword">export</span> &#123;name, age&#125;;</span><br></pre></td></tr></table></figure><h3 id="模块化优点"><a href="#模块化优点" class="headerlink" title="模块化优点"></a>模块化优点</h3><blockquote><ul><li>防止命名冲突</li><li>复用性强</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（2-4）</title>
      <link href="/post/74a7421a.html"/>
      <url>/post/74a7421a.html</url>
      
        <content type="html"><![CDATA[<h2 id="promise-相关"><a href="#promise-相关" class="headerlink" title="promise 相关"></a>promise 相关</h2><pre><code>promise的then是异步还是同步？all是异步还是同步？async、await呢？</code></pre><p>首先，promise 的构造函数是同步的，但是它的 then 是异步的，all 也是异步的</p><p>语法：<code>new Promise(function(resolve,reject)&#123;&#125;)</code></p><blockquote><p>构建 Promise 对象时，需要传入一个 executor 函数，主要业务流程都在 executor 函数中执行<br><strong>Promise 构造函数执行时立即调用 executor 函数</strong>，resolve 和 reject 两个函数作为参数传递给 executor，resolve 和 reject 函数被调用时，分别将 promise 的状态改为 fulfilled(完成)或者 rejected(失败)。一旦状态改变，就不会再变，任何时候都可以得到这个结果<br>在 executor 函数中调用 resolve 函数后，会触发 promise.then 设置的回调函数，而调用 reject 函数后，会触发 promise.catch 设置的回调函数</p></blockquote><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出依次是1、2、3</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果为2、3、1</span></span><br><span class="line"><span class="keyword">let</span> a1=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span> 采用了回调函数延迟绑定技术，在执行 resolve 函数的时候，回调函数还没有绑定，那么只能推迟回调函数的执行</span><br></pre></td></tr></table></figure><p>再比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line">a.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span> + res);</span><br><span class="line">&#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败&quot;</span> + reason);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出为：1、2、3、成功 张三丰</span></span><br><span class="line"></span><br><span class="line">解释：<span class="keyword">new</span> <span class="title class_">Promise</span> 的时候先执行 executor 函数，打印出 <span class="number">1</span>、<span class="number">2</span>,<span class="title class_">Promise</span> 在执行 resolve 时，触发微任务，还是继续往下执行同步任务，执行 a.<span class="property">then</span> 时，存储起来两个函数（此时这两个函数还没有执行）然后打印出 <span class="number">3</span>，此时同步任务执行完成，最后执行刚刚那个微任务，从而执行.<span class="property">then</span> 中成功的方法</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;f&quot;</span>);</span><br><span class="line"><span class="comment">// abcfde</span></span><br><span class="line"></span><br><span class="line">在promise对象方法中then和<span class="keyword">catch</span>方法本身都是异步的</span><br><span class="line">在promise对象中出来then和<span class="keyword">catch</span>是异步之外，其他的都是同步的</span><br></pre></td></tr></table></figure><h2 id="promise-的进一步学习"><a href="#promise-的进一步学习" class="headerlink" title="promise 的进一步学习"></a>promise 的进一步学习</h2><h3 id="函数对象与实例对象"><a href="#函数对象与实例对象" class="headerlink" title="函数对象与实例对象"></a>函数对象与实例对象</h3><blockquote><ul><li>函数对象：将函数作为对象使用时，简称为函数对象</li><li>实例对象：new 函数产生的对象，简称为对象</li></ul></blockquote><h3 id="回调函数的类别"><a href="#回调函数的类别" class="headerlink" title="回调函数的类别"></a>回调函数的类别</h3><blockquote><p>同步回调:</p><ul><li>概念：立即执行，完全执行完了才结束，不会放入回调队列中</li><li>比如：数组遍历相关的回调函数 | Promise 的 excutor 函数<br>异步回调:</li><li>概念：不会立即执行，会放入回调队列中将来执行</li><li>比如：定时器回调 | ajax 回调 | Promise 的成功（resolve）| 失败（reject）的回调</li></ul></blockquote><h3 id="promise-的优势"><a href="#promise-的优势" class="headerlink" title="promise 的优势"></a>promise 的优势</h3><blockquote><p>指定回调函数的方式更加灵活：可以在请求发出甚至结束后指定回调函数<br>支持链式调用，可以解决回调地狱问题</p></blockquote><h3 id="async-与-await"><a href="#async-与-await" class="headerlink" title="async 与 await"></a>async 与 await</h3><blockquote><p>async 函数</p><ul><li>函数的返回值为 promise 对象</li><li>promise 对象的结果由 async 函数执行的返回值决定</li><li>async 函数中使用 return 返回的内容可以通过 then 来获取</li></ul><p>await 表达式</p><ul><li>await 右侧的表达式一般为 promise 对象, 但也可以是其它的值</li><li>如果表达式是 promise 对象, await 返回的是 promise 成功的值</li><li>如果表达式是其它值, 直接将此值作为 await 的返回值</li><li><strong>await 那一句会同步执行，但是它下面的语句就变成了异步的了，类似 callback 的功能（微任务）。即，只要遇到了 <code>await</code> ，后面的代码都相当于放在 callback 里</strong></li></ul><p>注意</p><ul><li>await 必须写在 async 函数中, 但 async 函数中可以没有 await</li><li>如果 await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 来捕获处理</li></ul></blockquote><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="comment">// 这一句会同步执行，返回 Promise ，其中的 `console.log(&#x27;async2&#x27;)` 也会同步执行</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="comment">// 上面有 await ，下面就变成了“异步”，类似 callback 的功能（微任务）</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步，宏任务</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 Promise 之后，即同步执行完成，then 是异步代码</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="comment">// Promise 的函数体会立刻执行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// then 异步，微任务</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出为：script start、async1 start、async2、promise1、script end、async1 end、promise2、setTimeout</span></span><br></pre></td></tr></table></figure><h3 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h3><blockquote><p>宏任务：setTimeout、setInterval、DOM 事件等<br>微任务：promise、async&#x2F;await</p></blockquote><h3 id="事件循环的执行顺序"><a href="#事件循环的执行顺序" class="headerlink" title="事件循环的执行顺序"></a>事件循环的执行顺序</h3><p>先执行同步代码 -&gt; 微任务 -&gt; DOM 渲染 -&gt; 宏任务</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Bye&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">输出为：Hi、Bye、点击时执行clicked</span><br></pre></td></tr></table></figure><h3 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时算乘法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multi</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(num * num);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 forEach ，是 1s 之后打印出所有结果，即 3 个值是一起被计算出来的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  nums.<span class="title function_">forEach</span>(<span class="keyword">async</span> (x) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">multi</span>(x);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of ，可以让计算挨个串行执行</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="comment">// 在 for...of 循环体的内部，遇到 await 会挨个串行计算</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">multi</span>(x);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test2</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（2-3）</title>
      <link href="/post/e9707aa3.html"/>
      <url>/post/e9707aa3.html</url>
      
        <content type="html"><![CDATA[<h2 id="grid-布局"><a href="#grid-布局" class="headerlink" title="grid 布局"></a>grid 布局</h2><p>grid 布局与 flex 布局相同之处在于：都有分别针对于父元素与子元素的一些属性。<br>grid 布局与 flex 布局不同之处在于：flex 布局是轴线布局，只能指定“子元素”针对轴线的位置，可以看作是一维布局，grid 布局则是将容器划分成“行”和“列”，产生单元格，然后指定“子元素所在”的单元格，可以看作是二维布局。</p><h3 id="常见父元素属性"><a href="#常见父元素属性" class="headerlink" title="常见父元素属性"></a>常见父元素属性</h3><blockquote><p>常见的父元素属性主要有 7 种：</p><ul><li>grid-template-系列：包含 grid-template-columns（设置列数）以及 grid-template-rows（设置行数）</li><li>gap： 设置行或列之间间距</li><li>grid-template-areas： 设置单元格区域，区域由单元格组成</li><li>grid-auto-flow：设置子元素的排放顺序，默认是“先行后列”</li><li>justify-items 与 align-items：设置单元格内容的对齐方向</li><li>justify-content 与 align-content：设置整个内容区域的对齐方向</li><li>grid-auto-columns 与 grid-auto-rows 系列：用于设置多出来的子元素的宽或高</li></ul></blockquote><p>创建两个 50px 高的行和两个 200px 宽的列<br><code>grid-template: 50px 50px / 200px 200px</code></p><ul><li>如果设置的每行（每列）的高度（宽度）相同的话，如上述 <code>grid-template-columns：100px 100px 100px</code>，就可以使用 repeat 函数，用法为：<code>grid-template-columns：repeat(3, 100px)</code></li></ul><p><code>repeat(number, px)</code>: 其中第一个参数表示重复次数，第二个参数表示所要重复的数值；</p><ul><li><p>若单元格的大小是固定的，但是父元素的大小不确定，此时可用 auto-fill 自动填充父元素</p></li><li><p>repeat(auto-fill, 100px) 表示 100px 自动填充，直至父元素填满；</p></li><li><p>如未指定父元素的宽度，则不断拖动浏览器宽度时，每行排列的列数是不断变化的，排不满就挤到下一行；</p></li><li><p>若设置每一部分占父元素的比例为多少，可通过单位 fr 实现。fr 是 fraction（片段）的意思</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 分成<span class="number">3</span>份，每个占一份</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">// 也可写成</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">// 分成<span class="number">3</span>份 第一部分占一份 第二部分占<span class="number">2</span>份 第三部分占三份</span><br><span class="line"><span class="attribute">grid-template</span>-column: <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">3</span>fr;</span><br></pre></td></tr></table></figure><ul><li>若限制子元素最大值与最小值，可使用 minmax 设置<br><code>minmax: &lt;最小值&gt; &lt;最大值&gt;</code><br><code>grid-template-column: 100px minmax(100px, 200px) 100px</code></li><li>设置了 minmax 值后，在拖动浏览器放大时，最大不能超过 200px，缩小时，最小不能少于 100px，即不能再放大缩小；</li></ul><h3 id="网格线"><a href="#网格线" class="headerlink" title="网格线"></a>网格线</h3><pre><code>网格线在页面上看不出来，但是在设置完行和列之后，自动会有网格线生成；若有3行，则会有4个网格线，有4列，则有5条网格线</code></pre><p>网格线也可以命名，用方括号表示，如下 ：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 行方向定义了两行，有三条网格线，分别命名r1 r2 r3</span><br><span class="line"><span class="attribute">grid-template-rows</span>: [r1] <span class="number">100px</span> [r2] <span class="number">100px</span> [r3];</span><br><span class="line">// 列方向定义了三列，有四条网格线，分别命名为c1 c2 c3 c4</span><br><span class="line"><span class="attribute">grid-template-columns</span>: [c1] <span class="number">100px</span> [c2] <span class="number">100px</span> [c3] <span class="number">200px</span> [c4];</span><br></pre></td></tr></table></figure><h3 id="gap-系列"><a href="#gap-系列" class="headerlink" title="gap 系列"></a>gap 系列</h3><p>gap 是指行之间或列之间的间距；gap 是 column-gap（列间距）和 row-gap（行间距）的合并形式。若行距和列距相同，可将 gap 简写为 gap： 10px<br><code>gap : &lt;row-gap&gt; &lt;column-gap&gt;</code></p><p><strong>注意</strong>：以前标准是 grid-column-gap 和 grid-row-gap 和 grid-gap，现在都将 grid 前缀给去掉了～</p><h3 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h3><p>areas 指区域，是由单个或多个单元格组成（数量由子元素属性自定义）<br><code>grid-template-areas: &#39;a b c&#39; &#39;d e f&#39; &#39;g h i&#39;;</code><br>上述代码表示第一行为三个区域 区域名分别为 a b c 第二行和第三行也分别划分了各自的三个区域；行之间用空格表示；</p><p>当然，单元格也可以是同一个区域，如：<br><code>grid-template-areas: &#39;a a a&#39; &#39;d e f&#39; &#39;b b b&#39;;</code><br>第一行全部为 a 区域，第三行全部为 b 区域；（相同命名的单元格属于一个区域）</p><p>若不想给某个单元格命名，可用点.表示<br><code>grid-template-areas: &#39;a . a&#39; &#39;d . f&#39; &#39;b b b&#39;;</code></p><p>如第一行和第二行的第二列单元格并不想命名，就可以用.表示。为书写美观，可写成如下：<br><code>grid-template-areas: &#39;a a a&#39;                       &#39;d e f&#39;                       &#39;b b b&#39;;</code></p><p><em>区域的命名和网格线的命名会影响到网格线，每个区域的起始网格线会自动命名为区域名-start，终止网格线自动命名为区域名-end ～</em></p><h3 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h3><p>父元素设为 grid 布局之后，对应的子元素会按照顺序，自动放置在每一个网格，默认的放置位置是“先行后列”，即先填满第一行，再开始放入第二行；参数有两个： row 和 column</p><h3 id="justify-items-与-align-items"><a href="#justify-items-与-align-items" class="headerlink" title="justify-items 与 align-items"></a>justify-items 与 align-items</h3><p>用于设置单元格内容的水平和垂直的对齐方式；其中 justify-items 用于设置水平对齐方式，align-items 用于表示垂直对齐方式；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">justify-items： start ｜ end ｜ center ｜ stretch（默认start）</span><br><span class="line"><span class="attribute">align-items</span>： start ｜ end ｜ center ｜ stretch（默认start）</span><br></pre></td></tr></table></figure><p><em>place-items 属性是 align-items 属性和 justify-items 属性的合并形式：</em><br><code>place-items: &lt;align-items&gt; &lt;justify-items&gt;;</code></p><h3 id="justify-content-与-align-content"><a href="#justify-content-与-align-content" class="headerlink" title="justify-content 与 align-content"></a>justify-content 与 align-content</h3><p>用于设置<em>整个内容区域</em>的对齐方式，其中 justify-content 用于设置整个内容区域的水平方向，align-content 用于设置整个内容区域的垂直方向；各参数含义与 flex 布局一样；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>： start ｜ end ｜ center ｜ stretch ｜ space-around ｜ space-between ｜ space-evenly（默认是start）</span><br><span class="line">`<span class="attribute">align-content</span>： start ｜ end ｜ center ｜ stretch ｜ space-around ｜ space-between ｜ space-evenly（默认是start）</span><br></pre></td></tr></table></figure><h3 id="grid-auto-rows-与-grid-auto-columns"><a href="#grid-auto-rows-与-grid-auto-columns" class="headerlink" title="grid-auto-rows 与 grid-auto-columns"></a>grid-auto-rows 与 grid-auto-columns</h3><p>用于设置多出来的宽或高，包含 grid-auto-rows（用于设置高）和 grid-auto-columns（用于设置宽）；在排列方式为先行后列时，可以用 grid-auto-rows 限制多出来子元素的高，在排列方式为先列后行时，可以用 grid-auto-columns 限制多出来子元素的宽；</p><h3 id="常见子元素属性"><a href="#常见子元素属性" class="headerlink" title="常见子元素属性"></a>常见子元素属性</h3><blockquote><p>常见子元素属性有如下 3 种：</p><ul><li>grid-column-系列与 grid-row-系列</li><li>grid-area</li><li>justify-self 与 align-self</li></ul></blockquote><h3 id="grid-column-系列与-grid-row-系列"><a href="#grid-column-系列与-grid-row-系列" class="headerlink" title="grid-column-系列与 grid-row-系列"></a>grid-column-系列与 grid-row-系列</h3><p>grid-column-start 和 grid-column-end 用于指定子元素的开始&#x2F;结束于哪条列网格线，确定子元素的具体位置；</p><blockquote><p>也可以用 span 表示跨越几行或几列：</p><ul><li>grid-row-start：span 2 表示从子元素起始行网格线跨越两条网格线距离；</li><li>grid-row-end：span 2 也表示从子元素起始行网格线跨越两条网格线距离；</li><li>grid-column-start:：span 2 表示从子元素起始列网格线跨越两条网格线距离；</li><li>grid-column-end：span 2 也表示从子元素起始列网格线跨越两条网格线距离；</li></ul></blockquote><blockquote><p>上述亦可简写为：</p><ul><li>grid-column: 1 &#x2F; 3 表示从第一条列网格线开始到第三条列网格线</li></ul></blockquote><blockquote><ul><li>grid-row: 2 &#x2F; 3 表示从第二条行网格线开始到第三条行网格线</li></ul></blockquote><h3 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h3><p>用于指定子元素放置在哪个区域内（还记得区域是什么嘛，不记得往上翻翻哦，区域是在父元素中定义好的～）</p><p>如我们定义父元素区域划分为：<br><code>grid-template-areas: &#39;a a a&#39;                      &#39;b c d&#39;;</code></p><p>将某个子元素定义为 a 区域：<br><code>grid-area: a</code></p><p>grid-area 还可以用作 grid-row-start&#x2F;grid-column-start&#x2F;grid-row-end&#x2F;grid-column-end 的合并形式，用于直接指定子元素的具体位置：<br><code>grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;</code></p><h3 id="justify-self-与-column-self-系列"><a href="#justify-self-与-column-self-系列" class="headerlink" title="justify-self 与 column-self 系列"></a>justify-self 与 column-self 系列</h3><p>用于设置单个子元素的单元格内容的位置， justify-self 用于设置单元格内容的水平方向，align-self 用于设置单元格内容的垂直方向；与上面所述 justify-items 和 align-items 属性用法完全一致，参数也一样；</p><p>place-self 属性是 justify-self 和 align-self 的合并形式：<br><code>place-self: &lt;align-self&gt; &lt;justify-self&gt; </code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（2-2）</title>
      <link href="/post/51cc1dc6.html"/>
      <url>/post/51cc1dc6.html</url>
      
        <content type="html"><![CDATA[<h2 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>flex 布局是一种布局模型，经常被称之为 flexbox，使用 flex 布局之后，他会给子元素提供强大空间分配和对齐能力。flex 的优点就是避免不灵活的布局形式，创建更多种布局模式供你选择，解决了子元素的对齐和分布与 响应式等问题。缺点是只能依靠自身的布局模式，稍有变化则无法改变。</p><p>CSS 中提供了以下属性来实现 Flex 布局：</p><table><thead><tr><th align="center">选择器</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">display</td><td align="center">指定 HTML 元素的盒子类型</td></tr><tr><td align="center">flex-direction</td><td align="center">指定弹性盒子中子元素的排列方式</td></tr><tr><td align="center">flex-wrap</td><td align="center">设置当弹性盒子的子元素超出父容器时是否换行</td></tr><tr><td align="center">flex-flow</td><td align="center">flex-direction 和 flex-wrap 两个属性的简写</td></tr><tr><td align="center">justify-content</td><td align="center">设置弹性盒子中元素在主轴（横轴）方向上的对齐方式</td></tr><tr><td align="center">align-items</td><td align="center">设置弹性盒子中元素在侧轴（纵轴）方向上的对齐方式</td></tr><tr><td align="center">align-content</td><td align="center">修改 flex-wrap 属性的行为，类似 align-items，但不是设置子元素对齐，而是设置行对齐</td></tr><tr><td align="center">order</td><td align="center">设置弹性盒子中子元素的排列顺序</td></tr><tr><td align="center">align-self</td><td align="center">在弹性盒子的子元素上使用，用来覆盖容器的 align-items 属性</td></tr><tr><td align="center">flex</td><td align="center">设置弹性盒子中子元素如何分配空间</td></tr><tr><td align="center">flex-grow</td><td align="center">设置弹性盒子的扩展比率</td></tr><tr><td align="center">flex-shrink</td><td align="center">设置弹性盒子的收缩比率</td></tr><tr><td align="center">flex-basis</td><td align="center">设置弹性盒子伸缩基准值</td></tr></tbody></table><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><blockquote><p>flex-direction<br>flex-direction 属性用来决定主轴的方向（即项目的排列方向），属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">row</td><td align="center">默认值，主轴沿水平方向从左到右</td></tr><tr><td align="center">row-reverse</td><td align="center">主轴沿水平方向从右到左</td></tr><tr><td align="center">column</td><td align="center">主轴沿垂直方向从上到下</td></tr><tr><td align="center">column-reverse</td><td align="center">主轴沿垂直方向从下到上</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承此属性的值</td></tr></tbody></table><blockquote><p>flex-wrap<br>flex-wrap 属性用来设置当弹性盒子的子元素（项目）超出父容器时是否换行，属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">nowrap</td><td align="center">默认值，表示项目不会换行</td></tr><tr><td align="center">wrap</td><td align="center">表示项目会在需要时换行</td></tr><tr><td align="center">wrap-reverse</td><td align="center">表示项目会在需要时换行，但会以相反的顺序</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>flex-flow<br>flex-flow 属性是 flex-direction 和 flex-wrap 两个属性的简写，语法格式如下：<br><code>flex-flow: flex-direction flex-wrap;</code></p></blockquote><blockquote><p>justify-content<br>justify-content 属性用于设置弹性盒子中元素在主轴（横轴）方向上的对齐方式，属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">flex-start</td><td align="center">默认值，左对齐</td></tr><tr><td align="center">flex-end</td><td align="center">右对齐</td></tr><tr><td align="center">center</td><td align="center">居中</td></tr><tr><td align="center">space-between</td><td align="center">两端对齐，项目之间的间隔是相等的</td></tr><tr><td align="center">space-around</td><td align="center">每个项目两侧的间隔相等</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>align-items<br>align-items 属性用来设置弹性盒子中元素在侧轴（纵轴）方向上的对齐方式，属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">stretch</td><td align="center">默认值，项目将被拉伸以适合容器</td></tr><tr><td align="center">center</td><td align="center">项目位于容器的中央</td></tr><tr><td align="center">flex-start</td><td align="center">项目位于容器的顶部</td></tr><tr><td align="center">flex-end</td><td align="center">项目位于容器的底部</td></tr><tr><td align="center">baseline</td><td align="center">项目与容器的基线对齐</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>align-content<br>align-content 属性与 justify-content 属性类似，可以在弹性盒子的侧轴还有多余空间时调整容器内项目的对齐方式，属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">stretch</td><td align="center">默认值，将项目拉伸以占据剩余空间</td></tr><tr><td align="center">center</td><td align="center">项目在容器内居中排布</td></tr><tr><td align="center">flex-start</td><td align="center">项目在容器的顶部排列</td></tr><tr><td align="center">flex-end</td><td align="center">项目在容器的底部排列</td></tr><tr><td align="center">space-between</td><td align="center">多行项目均匀分布在容器中，其中第一行分布在容器的顶部，最后一行分布在容器的底部</td></tr><tr><td align="center">space-around</td><td align="center">多行项目均匀分布在容器中，并且每行的间距（包括离容器边缘的间距）都相等</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>order<br>order 属性用来设置项目在容器中出现的顺序，您可以通过具体的数值来定义项目在容器中的位置，属性的语法格式如下：<br><code>order: number;</code><br>其中 number 就是项目在容器中的位置，默认值为 0。</p></blockquote><blockquote><p>align-self<br>align-self 属性允许您为某个项目设置不同于其它项目的对齐方式，该属性可以覆盖 align-items 属性的值。align-self 属性的可选值如下：</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">auto</td><td align="center">默认值，表示元素将继承其父容器的 align-items 属性值，如果没有父容器，则为“stretch”</td></tr><tr><td align="center">stretch</td><td align="center">项目将被拉伸以适合容器</td></tr><tr><td align="center">center</td><td align="center">项目位于容器的中央</td></tr><tr><td align="center">flex-start</td><td align="center">项目位于容器的顶部</td></tr><tr><td align="center">flex-end</td><td align="center">项目位于容器的底部</td></tr><tr><td align="center">baseline</td><td align="center">项目与容器的基线对齐</td></tr><tr><td align="center">initial</td><td align="center">将此属性设置为属性的默认值</td></tr><tr><td align="center">inherit</td><td align="center">从父元素继承属性的值</td></tr></tbody></table><blockquote><p>flex<br>flex 属性是 flex-grow、flex-shrink 和 flex-basis 三个属性的简写，语法格式如下：<br><code>flex: flex-grow flex-shrink flex-basis;</code></p><p>参数说明如下：</p><ul><li>flex-grow：（必填参数）一个数字，用来设置项目相对于其他项目的增长量，默认值为 0；</li><li>flex-shrink：（选填参数）一个数字，用来设置项目相对于其他项目的收缩量，默认值为 1；</li><li>flex-basis：（选填参数）项目的长度，合法值为 auto（默认值，表示自动）、inherit（表示从父元素继承该属性的值） 或者以具体的值加 “%”、”px”、”em” 等单位的形式。</li></ul><p>另外，flex 属性还有两个快捷值，分别为 auto（1 1 auto）和 none（0 0 auto）。</p></blockquote><p>另外，除了可以使用 flex 属性外，您也可以使用 flex-grow、flex-shrink、flex-basis 几个属性来分别设置项目的增长量、收缩量以及项目长度，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: auto;</span><br><span class="line">  <span class="comment">/* 等同于 flex:1 1 auto; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（2-1）</title>
      <link href="/post/5c0cb90c.html"/>
      <url>/post/5c0cb90c.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>今天下午经历了第二次面试，面试官是一个小姐姐，看着挺和蔼的，具体问的问题其实也不算难，<br>都是前端开发中常用的东西，但是她可能更想了解原理，而我处于只会用的境界，整体感觉我觉<br>得很不好，不出意外，应该是挂了…</p><h2 id="CSS3-中的动画以及常用的-css3-属性"><a href="#CSS3-中的动画以及常用的-css3-属性" class="headerlink" title="CSS3 中的动画以及常用的 css3 属性"></a>CSS3 中的动画以及常用的 css3 属性</h2><p>我回答的是 scale、transform、rotate 等，然后她又问我动画相关的，我说自己常用的可能就是 animation，然后自定义一些动画，进行引用啥的…</p><h2 id="promise-相关"><a href="#promise-相关" class="headerlink" title="promise 相关"></a>promise 相关</h2><p>刚开始小姐姐问 promise 了解吗，我说了解，主要是用来解决 ajax 回调地狱的问题的，然后她问我 promise 可以实现同步吗，问到这里，我已经不行了，这种概念题可真是让我头疼，之后又问我.then 方法是同步还是异步？.all 可以实现同步吗？为什么？直接想死</p><h2 id="ES6-相关"><a href="#ES6-相关" class="headerlink" title="ES6 相关"></a>ES6 相关</h2><p>先问了我会用 ES6 吗，都用了哪些，我说常用的可能就是解构赋值和箭头函数，然后又问我解构赋值具体咋用，最后问了我结构赋值是深拷贝还是浅拷贝，为什么？我的妈，又是为什么，哎….没了</p><h2 id="关于面试的回顾，知识点总结"><a href="#关于面试的回顾，知识点总结" class="headerlink" title="关于面试的回顾，知识点总结"></a>关于面试的回顾，知识点总结</h2><h2 id="css3-新增有哪些"><a href="#css3-新增有哪些" class="headerlink" title="css3 新增有哪些"></a>css3 新增有哪些</h2><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><table><thead><tr><th>选择器</th><th align="center">例子</th><th>例子描述</th></tr></thead><tbody><tr><td>elem1~elem2</td><td align="center">p~ul</td><td>选择前面有&lt;p&gt;元素的每个&lt;ul&gt;元素</td></tr><tr><td>[attribute^&#x3D;value]</td><td align="center">a[src^&#x3D;”https”]</td><td>选择其 src 属性值以“HTTP 是”开头的每个&lt;a&gt;元素</td></tr><tr><td>[attribute$&#x3D;value]</td><td align="center">a[src$&#x3D;”.pdf”]</td><td>选择其 src 属性以“.pdf”结尾的所有&lt;a&gt;元素</td></tr><tr><td>[attribute*&#x3D;value]</td><td align="center">a[src*&#x3D;”abd”]</td><td>选择其 src 属性中包含“abc”子串的每个&lt;a&gt;元素</td></tr><tr><td>:first-of-type</td><td align="center">p:first-of-type</td><td>选择属于其父元素的首个&lt;p&gt;元素的每个&lt;p&gt;元素</td></tr><tr><td>:last-of-type</td><td align="center">p:last-of-type</td><td>选择属于其父元素的最后&lt;p&gt;元素的每个&lt;p&gt;元素</td></tr><tr><td>:only-of-type</td><td align="center">p:only-of-type</td><td>选择属于其父元素的唯一的&lt;p&gt;元素的每个&lt;p&gt;元素</td></tr><tr><td>:noly-child</td><td align="center">p:only-child</td><td>选择属于其父元素的唯一子元素的每个&lt;p&gt;元素</td></tr><tr><td>:nth-child(n)</td><td align="center">p:nth-child(2)</td><td>选择属于其父元素的第二个子元素的每个&lt;p&gt;元素</td></tr><tr><td>:nth-last-child(n)</td><td align="center">p:nth-last-child(2)</td><td>同上，从最后一个子元素开始计数</td></tr><tr><td>:nth-of-type(n)</td><td align="center">p:nth-of-type(2)</td><td>选择属于其父元素第二个&lt;p&gt;元素的每个&lt;p&gt;元素</td></tr><tr><td>:nth-last-of-type(n)</td><td align="center">p:nth-last-of-type(2)</td><td>同上，但是从最后一个子元素开始计数</td></tr><tr><td>:last-child</td><td align="center">p:last-child</td><td>选择属于其父元素最后一个子元素每个&lt;p&gt;元素</td></tr></tbody></table><h3 id="新样式"><a href="#新样式" class="headerlink" title="新样式"></a>新样式</h3><ul><li><p>边框</p><blockquote><ul><li>border-radius: 创建圆角边框</li><li>box-shadow: 为元素添加阴影</li><li>border-image: 使用图片来绘制边框</li></ul></blockquote></li><li><p>box-shadow</p><blockquote><p>设置元素阴影，设置属性如下：</p><ul><li>水平阴影</li><li>垂直阴影</li><li>模糊距离</li><li>阴影尺寸（影子大小）</li><li>阴影颜色</li><li>内&#x2F;外阴影</li></ul><p>其中水平阴影和垂直阴影是必须设置的</p></blockquote></li></ul><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>新增了几个关于背景的属性，分别是<code>background-clip</code>、<code>background-origin</code>、<code>background-size</code> 和 <code>background-break</code></p><ul><li><p>background-clip</p><blockquote><p>用于确定背景画区，有以下几种可能的属性：</p><ul><li>background-clip: border-box; 背景从 <code>border</code> 开始显示</li><li>background-clip: padding-box; 背景从 <code>padding</code> 开始显示</li><li>background-clip: content-box; 背景从 <code>content</code> 区域开始显示</li><li>background-clip: no-clip; 默认属性，等同于 <code>border-box</code></li></ul></blockquote></li><li><p>background-origin</p><blockquote><p>我们设置背景图片时，图片是会以左上角对齐，但是是以 <code>border</code> 的左上角对齐还是以 <code>padding</code> 的左上角或者 <code>content</code> 的左上角对齐？<code>border-origin</code> 正是用来设置这个的</p><ul><li>background-origin: border-box; 从 <code>border</code> 开始计算 <code>background-position</code></li><li>background-origin: padding-box; 从 <code>padding</code> 开始计算 <code>background-position</code></li><li>background-origin: content-box; 从 <code>content</code> 开始计算 <code>background-position</code></li></ul><p>默认情况是 <code>padding-box</code>，即以 <code>padding</code> 的左上角为原定</p></blockquote></li><li><p>background-size</p><blockquote><p><code>background-size</code> 属性常用来调整背景图片的大小，主要用于设定图片本身。有以下可能的属性：</p><ul><li>background-size: contain; 缩小图片以适合元素（维持像素长宽比）</li><li>background-size: cover; 扩展元素以填补元素（维持像素长宽比）</li><li>background-size: 100px 100px; 缩小图片至指定的大小</li><li>background-size: 50% 100%; 缩小图片至指定的大小，百分比是相对包含元素的尺寸</li></ul></blockquote></li><li><p>background-break</p><blockquote><p>元素可以被分成几个独立的盒子（如使内联元素 span 跨越多行），background-break 属性用来控制背景怎样在这些不同的盒子中显示</p><ul><li>background-break: continous; 默认值。忽略盒之间的距离（也就是像元素没有分成多个盒子，依然是一个整体一样）</li><li>background-break: bounding-box; 把盒之间的距离计算在内</li><li>background-break: each-box; 为每个盒子单独重绘背景</li></ul></blockquote></li></ul><h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><ul><li><p>word-wrap</p><blockquote><p>语法：word-wrap: normal | break-wrod</p><ul><li>normal: 使用浏览器默认的换行</li><li>break-all: 允许在单词内换行</li></ul></blockquote></li><li><p>text-overflow</p><blockquote><p><code>text-overflow</code> 设置或检索当当前行超过指定容器的边界时如何显示，属性有两个值选择：</p><ul><li>clip: 修剪文本</li><li>ellipsis: 显示省略符号来代表被修剪的文本</li></ul></blockquote></li><li><p>text-shadow</p><blockquote><p><code>text-shadow</code>可向文本应用阴影。能够规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色</p></blockquote></li><li><p>text-decoration</p><blockquote><p><code>CSS3</code> 里面开始支持对文字的更深层次的渲染，具体有三个属性可供设置：</p><ul><li>text-fill-color: 设置文字内部填充颜色</li><li>text-stroke-color: 设置文字边界填充颜色</li><li>text-stroke-width: 设置文字边界宽度</li></ul></blockquote></li></ul><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><blockquote><p>css3 新增了新的颜色表示方式 rgba 与 hsla</p><ul><li>rgba 分为两部分，rgb 为颜色值，a 为透明度</li><li>hala 分为四部分，h 为色相，s 为饱和度，l 为亮度，a 为透明度</li></ul></blockquote><h2 id="transition-过渡"><a href="#transition-过渡" class="headerlink" title="transition 过渡"></a>transition 过渡</h2><blockquote><p><code>transition</code> 属性可以被指定为一个或多个 <code>CSS</code> 属性的过渡效果，多个属性之间用逗号进行分隔，必须规定两项内容：</p><ul><li>过渡效果</li><li>持续时间</li></ul></blockquote><p>语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition</span>： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>上面为简写模式，也可以分开写各个属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition-property</span>: width;</span><br><span class="line"><span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line"><span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line"><span class="attribute">transition-delay</span>: <span class="number">2s</span>;</span><br></pre></td></tr></table></figure><h2 id="transform-转换"><a href="#transform-转换" class="headerlink" title="transform 转换"></a>transform 转换</h2><blockquote><p><code>transform</code> 属性允许你旋转，缩放，倾斜或平移给定元素</p><p><code>transform-origin</code>：转换元素的位置（围绕那个点进行转换），默认值为(x,y,z):(50%,50%,0)</p><p>使用方式：</p><ul><li>transform: translate(120px, 50%)：位移</li><li>transform: scale(2, 0.5)：缩放</li><li>transform: rotate(0.5turn)：旋转</li><li>transform: skew(30deg, 20deg)：倾斜</li></ul></blockquote><h2 id="animation-动画"><a href="#animation-动画" class="headerlink" title="animation 动画"></a>animation 动画</h2><blockquote><p>动画这个平常用的也很多，主要是做一个预设的动画。和一些页面交互的动画效果，结果和过渡应该一样，让页面不会那么生硬</p><p><code>animation</code> 也有很多的属性</p><ul><li>animation-name：动画名称</li><li>animation-duration：动画持续时间</li><li>animation-timing-function：动画时间函数</li><li>animation-delay：动画延迟时间</li><li>animation-iteration-count：动画执行次数，可以设置为一个整数，也可以设置为 infinite，意思是无限循环</li><li>animation-direction：动画执行方向</li><li>animation-paly-state：动画播放状态</li><li>animation-fill-mode：动画填充模式</li></ul></blockquote><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><blockquote><p>颜色渐变是指在两个颜色之间平稳的过渡，<code>css3</code> 渐变包括</p></blockquote><ul><li><p>linear-gradient：线性渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(direction, color-stop1, color-stop2, …);</span><br></pre></td></tr></table></figure></li><li><p>radial-gradient：径向渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(<span class="number">0deg</span>, red, green);</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><ul><li><a href="https://blog.csdn.net/u012138854/article/details/127740658">https://blog.csdn.net/u012138854/article/details/127740658</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启研究生面试的记录（1）</title>
      <link href="/post/4eb916e2.html"/>
      <url>/post/4eb916e2.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>由于个人觉得找工作的时候有和没有实习经历是不一样的，所以就特别想在找正式工作之前，经历一个实习，<br>然后就投递了一些简历（我投的时候，是挑着投的，后来有经验的人说，实习嘛，不应该追求工资，所以不要挑，<br>别人要你就行）。然后今天下午收到了一个笔试链接，因为之前投递后，也会有一些链接，让你填写一些类似公<br>务员考试的那种场景题、逻辑题、还有一些工作场景中会有的问题，问你如何解决，结果这一次不是，我点进去<br>一看，只有三个题，30 分钟，我瞬间觉得是正儿八经的笔试题，但是回不去了，开着摄像头呢，没办法，做吧，<br>由于太紧张，第一个提看了七分钟还没有头绪，就想着先做后面的，然后平静下来后，回来在做，结果…，人<br>家规定提交上一个，才来做下一个，但是因为时间关系，没办法，我只能放弃第一个了，后面俩个做的挺顺利的，<br>一共 23 分钟，这时候，我想其实第一个也不难，但是没机会了，哎第一个题就是让你从给定的数组中选出出现<br>次数最多的元素，可能不止一个。看到这个题，我就想如何存储每一个数字的次数，思路对，但是数据结构…，<br>由于平时用的 java，一下就想到了 map，但是 js 有 map 吗？忘了，尴尬，没办法，用数组吧，本来用数组<br>也挺简单，紧张的不行竟然想着用两个存储，对应位置一个记录数字，一个记录次数，线上的 ide，没有提示，<br>好像有的方法也没法用，比如 indexOf，最终无疾而终</p><h2 id="正确的答案"><a href="#正确的答案" class="headerlink" title="正确的答案"></a>正确的答案</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getReaptNums</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    res[arr[i]]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (max &lt; res[i]) max = res[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res[i] == max) ans.<span class="title function_">push</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html相关知识（2）</title>
      <link href="/post/c4d42ff.html"/>
      <url>/post/c4d42ff.html</url>
      
        <content type="html"><![CDATA[<p>HTML 为标题的文章主要记录了自己在 HTML 学习的过程中遇到的知识点</p><h2 id="如何理解-HTML-的语义化"><a href="#如何理解-HTML-的语义化" class="headerlink" title="如何理解 HTML 的语义化"></a>如何理解 HTML 的语义化</h2><blockquote><ul><li>让人更容易读懂代码（增加代码可读性）</li><li>让搜索引擎更容易读懂（SEO-搜索引擎优化）</li></ul></blockquote><p>在此基础上列举一个简单的例子，比如说标题使用 div 和 h1，列表使用 div 和 ul、li 等的对比。</p><h2 id="默认情况下，哪些是块状元素，哪些是内联元素"><a href="#默认情况下，哪些是块状元素，哪些是内联元素" class="headerlink" title="默认情况下，哪些是块状元素，哪些是内联元素"></a>默认情况下，哪些是块状元素，哪些是内联元素</h2><blockquote><p>display：block&#x2F;table div、table、h1、h2、…、ul、ol、p<br>display：inline&#x2F;inline-block span、img、input、button</p></blockquote><h2 id="float-布局：如何实现圣杯布局和双飞翼布局、手写-clearfix"><a href="#float-布局：如何实现圣杯布局和双飞翼布局、手写-clearfix" class="headerlink" title="float 布局：如何实现圣杯布局和双飞翼布局、手写 clearfix"></a>float 布局：如何实现圣杯布局和双飞翼布局、手写 clearfix</h2><blockquote><ul><li>圣杯布局和双飞翼布局的目的：1）、三栏布局，中间一栏最先加载和渲染（内容最重要） 2）、两侧内容固定，中间内容随着宽度自适应 3）、一般用于 PC 网页</li><li>圣杯布局和双飞翼布局的技术总结：1）、使用 float 布局 2）、两侧使用 margin 负值，以便和中间内容横向重叠 3）、防止中间内容被两侧覆盖，一个用 padding、一个用 margin</li></ul></blockquote><h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#header</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-right</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: -<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 手写 clearfix */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 兼容IE低版本 */</span></span></span><br><span class="line"><span class="language-css">        *zoom: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>this is header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>this is center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>this is left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>this is right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>this is footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>双飞翼布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.col</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#main</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#main-wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">190px</span> <span class="number">0</span> <span class="number">190px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">190px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#0000ff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">190px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">190px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main-wrap&quot;</span>&gt;</span>this is main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>this is left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>this is right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex-实现三点骰子"><a href="#flex-实现三点骰子" class="headerlink" title="flex 实现三点骰子"></a>flex 实现三点骰子</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-self</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-self</span>: self-end;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo搭建博客的第一篇文章</title>
      <link href="/post/bbb939dd.html"/>
      <url>/post/bbb939dd.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
